
OrpPhModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043bc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  00006070  2**0
                  CONTENTS
  4 .ARM          00000000  08004718  08004718  00006070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004718  08004718  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800471c  0800471c  0000571c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004720  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000070  08004790  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08004790  000063ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eded  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002417  00000000  00000000  00014e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000172a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00018000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010561  00000000  00000000  00018a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001101b  00000000  00000000  00028fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064797  00000000  00000000  0003a001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e798  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f94  00000000  00000000  0009e7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000a1770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004464 	.word	0x08004464

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004464 	.word	0x08004464

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdca 	bl	8000dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f842 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f9b0 	bl	8000590 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f990 	bl	8000554 <MX_DMA_Init>
  MX_TIM1_Init();
 8000234:	f000 f906 	bl	8000444 <MX_TIM1_Init>
  MX_ADC_Init();
 8000238:	f000 f89c 	bl	8000374 <MX_ADC_Init>
  MX_USART1_UART_Init();
 800023c:	f000 f95a 	bl	80004f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(Selector_ADC2_GPIO_Port,Selector_ADC2_Pin, GPIO_PIN_SET);
 8000240:	4b16      	ldr	r3, [pc, #88]	@ (800029c <main+0x7c>)
 8000242:	2201      	movs	r2, #1
 8000244:	2104      	movs	r1, #4
 8000246:	0018      	movs	r0, r3
 8000248:	f001 fe7c 	bl	8001f44 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc, value, 2);
 800024c:	4914      	ldr	r1, [pc, #80]	@ (80002a0 <main+0x80>)
 800024e:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <main+0x84>)
 8000250:	2202      	movs	r2, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 ff7a 	bl	800114c <HAL_ADC_Start_DMA>
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 8000258:	2380      	movs	r3, #128	@ 0x80
 800025a:	005a      	lsls	r2, r3, #1
 800025c:	4912      	ldr	r1, [pc, #72]	@ (80002a8 <main+0x88>)
 800025e:	4b13      	ldr	r3, [pc, #76]	@ (80002ac <main+0x8c>)
 8000260:	0018      	movs	r0, r3
 8000262:	f004 f86f 	bl	8004344 <HAL_UARTEx_ReceiveToIdle_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc, value, 2);
 8000266:	490e      	ldr	r1, [pc, #56]	@ (80002a0 <main+0x80>)
 8000268:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <main+0x84>)
 800026a:	2202      	movs	r2, #2
 800026c:	0018      	movs	r0, r3
 800026e:	f000 ff6d 	bl	800114c <HAL_ADC_Start_DMA>
	  writeToHolding(0, value[0]);
 8000272:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <main+0x80>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	b29b      	uxth	r3, r3
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fa54 	bl	8000728 <writeToHolding>
	  writeToHolding(1, value[1]);
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <main+0x80>)
 8000282:	685b      	ldr	r3, [r3, #4]
 8000284:	b29b      	uxth	r3, r3
 8000286:	0019      	movs	r1, r3
 8000288:	2001      	movs	r0, #1
 800028a:	f000 fa4d 	bl	8000728 <writeToHolding>
	  HAL_Delay(500);
 800028e:	23fa      	movs	r3, #250	@ 0xfa
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fdf6 	bl	8000e84 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc, value, 2);
 8000298:	46c0      	nop			@ (mov r8, r8)
 800029a:	e7e4      	b.n	8000266 <main+0x46>
 800029c:	48000400 	.word	0x48000400
 80002a0:	200001e0 	.word	0x200001e0
 80002a4:	2000008c 	.word	0x2000008c
 80002a8:	200001e8 	.word	0x200001e8
 80002ac:	20000158 	.word	0x20000158

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b095      	sub	sp, #84	@ 0x54
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2420      	movs	r4, #32
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	2330      	movs	r3, #48	@ 0x30
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f004 f8a3 	bl	800440c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	2310      	movs	r3, #16
 80002c8:	18fb      	adds	r3, r7, r3
 80002ca:	0018      	movs	r0, r3
 80002cc:	2310      	movs	r3, #16
 80002ce:	001a      	movs	r2, r3
 80002d0:	2100      	movs	r1, #0
 80002d2:	f004 f89b 	bl	800440c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	2310      	movs	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	2100      	movs	r1, #0
 80002e0:	f004 f894 	bl	800440c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e4:	0021      	movs	r1, r4
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2201      	movs	r2, #1
 80002f0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2202      	movs	r2, #2
 80002f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	2280      	movs	r2, #128	@ 0x80
 80002fc:	0252      	lsls	r2, r2, #9
 80002fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0352      	lsls	r2, r2, #13
 8000306:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030e:	187b      	adds	r3, r7, r1
 8000310:	0018      	movs	r0, r3
 8000312:	f001 fe35 	bl	8001f80 <HAL_RCC_OscConfig>
 8000316:	1e03      	subs	r3, r0, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800031a:	f000 f9ff 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	2110      	movs	r1, #16
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2207      	movs	r2, #7
 8000324:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2202      	movs	r2, #2
 800032a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2101      	movs	r1, #1
 800033c:	0018      	movs	r0, r3
 800033e:	f002 f939 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000346:	f000 f9e9 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800034a:	003b      	movs	r3, r7
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000356:	003b      	movs	r3, r7
 8000358:	0018      	movs	r0, r3
 800035a:	f002 fa97 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 800035e:	1e03      	subs	r3, r0, #0
 8000360:	d001      	beq.n	8000366 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000362:	f000 f9db 	bl	800071c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000366:	f002 f9f3 	bl	8002750 <HAL_RCC_EnableCSS>
}
 800036a:	46c0      	nop			@ (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b015      	add	sp, #84	@ 0x54
 8000370:	bd90      	pop	{r4, r7, pc}
	...

08000374 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	230c      	movs	r3, #12
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f004 f842 	bl	800440c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000388:	4b2c      	ldr	r3, [pc, #176]	@ (800043c <MX_ADC_Init+0xc8>)
 800038a:	4a2d      	ldr	r2, [pc, #180]	@ (8000440 <MX_ADC_Init+0xcc>)
 800038c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800038e:	4b2b      	ldr	r3, [pc, #172]	@ (800043c <MX_ADC_Init+0xc8>)
 8000390:	2280      	movs	r2, #128	@ 0x80
 8000392:	0612      	lsls	r2, r2, #24
 8000394:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000396:	4b29      	ldr	r3, [pc, #164]	@ (800043c <MX_ADC_Init+0xc8>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800039c:	4b27      	ldr	r3, [pc, #156]	@ (800043c <MX_ADC_Init+0xc8>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003a2:	4b26      	ldr	r3, [pc, #152]	@ (800043c <MX_ADC_Init+0xc8>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003a8:	4b24      	ldr	r3, [pc, #144]	@ (800043c <MX_ADC_Init+0xc8>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003ae:	4b23      	ldr	r3, [pc, #140]	@ (800043c <MX_ADC_Init+0xc8>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003b4:	4b21      	ldr	r3, [pc, #132]	@ (800043c <MX_ADC_Init+0xc8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80003ba:	4b20      	ldr	r3, [pc, #128]	@ (800043c <MX_ADC_Init+0xc8>)
 80003bc:	2201      	movs	r2, #1
 80003be:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003c0:	4b1e      	ldr	r3, [pc, #120]	@ (800043c <MX_ADC_Init+0xc8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003c6:	4b1d      	ldr	r3, [pc, #116]	@ (800043c <MX_ADC_Init+0xc8>)
 80003c8:	22c2      	movs	r2, #194	@ 0xc2
 80003ca:	32ff      	adds	r2, #255	@ 0xff
 80003cc:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <MX_ADC_Init+0xc8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003d4:	4b19      	ldr	r3, [pc, #100]	@ (800043c <MX_ADC_Init+0xc8>)
 80003d6:	2224      	movs	r2, #36	@ 0x24
 80003d8:	2100      	movs	r1, #0
 80003da:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003dc:	4b17      	ldr	r3, [pc, #92]	@ (800043c <MX_ADC_Init+0xc8>)
 80003de:	2201      	movs	r2, #1
 80003e0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003e2:	4b16      	ldr	r3, [pc, #88]	@ (800043c <MX_ADC_Init+0xc8>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fd71 	bl	8000ecc <HAL_ADC_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80003ee:	f000 f995 	bl	800071c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2208      	movs	r2, #8
 80003f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2280      	movs	r2, #128	@ 0x80
 80003fc:	0152      	lsls	r2, r2, #5
 80003fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2205      	movs	r2, #5
 8000404:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000406:	1d3a      	adds	r2, r7, #4
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_ADC_Init+0xc8>)
 800040a:	0011      	movs	r1, r2
 800040c:	0018      	movs	r0, r3
 800040e:	f000 ff37 	bl	8001280 <HAL_ADC_ConfigChannel>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000416:	f000 f981 	bl	800071c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2209      	movs	r2, #9
 800041e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000420:	1d3a      	adds	r2, r7, #4
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_ADC_Init+0xc8>)
 8000424:	0011      	movs	r1, r2
 8000426:	0018      	movs	r0, r3
 8000428:	f000 ff2a 	bl	8001280 <HAL_ADC_ConfigChannel>
 800042c:	1e03      	subs	r3, r0, #0
 800042e:	d001      	beq.n	8000434 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8000430:	f000 f974 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	46bd      	mov	sp, r7
 8000438:	b004      	add	sp, #16
 800043a:	bd80      	pop	{r7, pc}
 800043c:	2000008c 	.word	0x2000008c
 8000440:	40012400 	.word	0x40012400

08000444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800044a:	2308      	movs	r3, #8
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2310      	movs	r3, #16
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f003 ffd9 	bl	800440c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800045a:	003b      	movs	r3, r7
 800045c:	0018      	movs	r0, r3
 800045e:	2308      	movs	r3, #8
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f003 ffd2 	bl	800440c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000468:	4b1f      	ldr	r3, [pc, #124]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 800046a:	4a20      	ldr	r2, [pc, #128]	@ (80004ec <MX_TIM1_Init+0xa8>)
 800046c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800046e:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000474:	4b1c      	ldr	r3, [pc, #112]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800047a:	4b1b      	ldr	r3, [pc, #108]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 800047c:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <MX_TIM1_Init+0xac>)
 800047e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b19      	ldr	r3, [pc, #100]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000486:	4b18      	ldr	r3, [pc, #96]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 8000488:	2200      	movs	r2, #0
 800048a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b16      	ldr	r3, [pc, #88]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 8000494:	0018      	movs	r0, r3
 8000496:	f002 fac7 	bl	8002a28 <HAL_TIM_Base_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800049e:	f000 f93d 	bl	800071c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a2:	2108      	movs	r1, #8
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2280      	movs	r2, #128	@ 0x80
 80004a8:	0152      	lsls	r2, r2, #5
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ac:	187a      	adds	r2, r7, r1
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f002 fb08 	bl	8002ac8 <HAL_TIM_ConfigClockSource>
 80004b8:	1e03      	subs	r3, r0, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004bc:	f000 f92e 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004cc:	003a      	movs	r2, r7
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <MX_TIM1_Init+0xa4>)
 80004d0:	0011      	movs	r1, r2
 80004d2:	0018      	movs	r0, r3
 80004d4:	f002 fcea 	bl	8002eac <HAL_TIMEx_MasterConfigSynchronization>
 80004d8:	1e03      	subs	r3, r0, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004dc:	f000 f91e 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b006      	add	sp, #24
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000110 	.word	0x20000110
 80004ec:	40012c00 	.word	0x40012c00
 80004f0:	0000ffff 	.word	0x0000ffff

080004f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <MX_USART1_UART_Init+0x58>)
 80004fa:	4a15      	ldr	r2, [pc, #84]	@ (8000550 <MX_USART1_UART_Init+0x5c>)
 80004fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000500:	22e1      	movs	r2, #225	@ 0xe1
 8000502:	0252      	lsls	r2, r2, #9
 8000504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000508:	2200      	movs	r2, #0
 800050a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800050c:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <MX_USART1_UART_Init+0x58>)
 800050e:	2200      	movs	r2, #0
 8000510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000514:	2200      	movs	r2, #0
 8000516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <MX_USART1_UART_Init+0x58>)
 800051a:	220c      	movs	r2, #12
 800051c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051e:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000520:	2200      	movs	r2, #0
 8000522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000524:	4b09      	ldr	r3, [pc, #36]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000526:	2200      	movs	r2, #0
 8000528:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800052a:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_USART1_UART_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000532:	2200      	movs	r2, #0
 8000534:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000536:	4b05      	ldr	r3, [pc, #20]	@ (800054c <MX_USART1_UART_Init+0x58>)
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fd0f 	bl	8002f5c <HAL_UART_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000542:	f000 f8eb 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000158 	.word	0x20000158
 8000550:	40013800 	.word	0x40013800

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <MX_DMA_Init+0x38>)
 800055c:	695a      	ldr	r2, [r3, #20]
 800055e:	4b0b      	ldr	r3, [pc, #44]	@ (800058c <MX_DMA_Init+0x38>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	615a      	str	r2, [r3, #20]
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <MX_DMA_Init+0x38>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2009      	movs	r0, #9
 8000578:	f001 f92c 	bl	80017d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800057c:	2009      	movs	r0, #9
 800057e:	f001 f93e 	bl	80017fe <HAL_NVIC_EnableIRQ>

}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	@ 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f003 ff33 	bl	800440c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	4b47      	ldr	r3, [pc, #284]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b46      	ldr	r3, [pc, #280]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005ac:	2180      	movs	r1, #128	@ 0x80
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b43      	ldr	r3, [pc, #268]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	@ 0x80
 80005ba:	03db      	lsls	r3, r3, #15
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b40      	ldr	r3, [pc, #256]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005c4:	695a      	ldr	r2, [r3, #20]
 80005c6:	4b3f      	ldr	r3, [pc, #252]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005c8:	2180      	movs	r1, #128	@ 0x80
 80005ca:	0289      	lsls	r1, r1, #10
 80005cc:	430a      	orrs	r2, r1
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	4b3c      	ldr	r3, [pc, #240]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005d2:	695a      	ldr	r2, [r3, #20]
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	029b      	lsls	r3, r3, #10
 80005d8:	4013      	ands	r3, r2
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005e4:	2180      	movs	r1, #128	@ 0x80
 80005e6:	02c9      	lsls	r1, r1, #11
 80005e8:	430a      	orrs	r2, r1
 80005ea:	615a      	str	r2, [r3, #20]
 80005ec:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <MX_GPIO_Init+0x134>)
 80005ee:	695a      	ldr	r2, [r3, #20]
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	02db      	lsls	r3, r3, #11
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Selector_ADC1_Pin|Led_blue_Pin|Rs485_control_Pin, GPIO_PIN_RESET);
 80005fa:	238c      	movs	r3, #140	@ 0x8c
 80005fc:	0159      	lsls	r1, r3, #5
 80005fe:	2390      	movs	r3, #144	@ 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2200      	movs	r2, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fc9d 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Selector_ADC2_GPIO_Port, Selector_ADC2_Pin, GPIO_PIN_RESET);
 800060a:	4b2f      	ldr	r3, [pc, #188]	@ (80006c8 <MX_GPIO_Init+0x138>)
 800060c:	2200      	movs	r2, #0
 800060e:	2104      	movs	r1, #4
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fc97 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2208      	movs	r2, #8
 800061a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2202      	movs	r2, #2
 8000620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2203      	movs	r2, #3
 800062c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	193a      	adds	r2, r7, r4
 8000636:	2390      	movs	r3, #144	@ 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fb11 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Selector_ADC1_Pin Rs485_control_Pin */
  GPIO_InitStruct.Pin = Selector_ADC1_Pin|Rs485_control_Pin;
 8000642:	0021      	movs	r1, r4
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2284      	movs	r2, #132	@ 0x84
 8000648:	0152      	lsls	r2, r2, #5
 800064a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	000c      	movs	r4, r1
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2201      	movs	r2, #1
 8000652:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	193a      	adds	r2, r7, r4
 8000662:	2390      	movs	r3, #144	@ 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fafb 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Selector_ADC2_Pin */
  GPIO_InitStruct.Pin = Selector_ADC2_Pin;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	2204      	movs	r2, #4
 8000672:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	193b      	adds	r3, r7, r4
 8000676:	2201      	movs	r2, #1
 8000678:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	193b      	adds	r3, r7, r4
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	193b      	adds	r3, r7, r4
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Selector_ADC2_GPIO_Port, &GPIO_InitStruct);
 8000686:	193b      	adds	r3, r7, r4
 8000688:	4a0f      	ldr	r2, [pc, #60]	@ (80006c8 <MX_GPIO_Init+0x138>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f001 fae9 	bl	8001c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led_blue_Pin */
  GPIO_InitStruct.Pin = Led_blue_Pin;
 8000692:	0021      	movs	r1, r4
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2280      	movs	r2, #128	@ 0x80
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2203      	movs	r2, #3
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Led_blue_GPIO_Port, &GPIO_InitStruct);
 80006ae:	187a      	adds	r2, r7, r1
 80006b0:	2390      	movs	r3, #144	@ 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fad4 	bl	8001c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b009      	add	sp, #36	@ 0x24
 80006c2:	bd90      	pop	{r4, r7, pc}
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400

080006cc <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	000a      	movs	r2, r1
 80006d6:	1cbb      	adds	r3, r7, #2
 80006d8:	801a      	strh	r2, [r3, #0]
	if (RxData[0] == SLAVE_ID)
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <HAL_UARTEx_RxEventCallback+0x48>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b07      	cmp	r3, #7
 80006e0:	d10c      	bne.n	80006fc <HAL_UARTEx_RxEventCallback+0x30>
	{
		switch (RxData[1]){
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_UARTEx_RxEventCallback+0x48>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d002      	beq.n	80006f0 <HAL_UARTEx_RxEventCallback+0x24>
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d003      	beq.n	80006f6 <HAL_UARTEx_RxEventCallback+0x2a>
			break;
		case 0x04:
			readInputRegs();
			break;
		default:
			break;
 80006ee:	e005      	b.n	80006fc <HAL_UARTEx_RxEventCallback+0x30>
			readHoldingRegs();
 80006f0:	f000 f8a6 	bl	8000840 <readHoldingRegs>
			break;
 80006f4:	e002      	b.n	80006fc <HAL_UARTEx_RxEventCallback+0x30>
			readInputRegs();
 80006f6:	f000 f927 	bl	8000948 <readInputRegs>
			break;
 80006fa:	46c0      	nop			@ (mov r8, r8)
		}
	}

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	005a      	lsls	r2, r3, #1
 8000700:	4904      	ldr	r1, [pc, #16]	@ (8000714 <HAL_UARTEx_RxEventCallback+0x48>)
 8000702:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000704:	0018      	movs	r0, r3
 8000706:	f003 fe1d 	bl	8004344 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	200001e8 	.word	0x200001e8
 8000718:	20000158 	.word	0x20000158

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <writeToHolding>:
		21345, 22345, 24567, 25678, 26789, 24680, 20394, 29384, 26937, 27654,  // 20-29 40021-40030
		31245, 31456, 34567, 35678, 36789, 37890, 30948, 34958, 35867, 36092,  // 30-39 40031-40040
		45678, 46789, 47890, 41235, 42356, 43567, 40596, 49586, 48765, 41029,  // 40-49 40041-40050
};

void writeToHolding(uint16_t address, uint16_t value) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dbb      	adds	r3, r7, #6
 8000732:	801a      	strh	r2, [r3, #0]
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	1c0a      	adds	r2, r1, #0
 8000738:	801a      	strh	r2, [r3, #0]
	Holding_Registers_Database[address] = value;
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	881a      	ldrh	r2, [r3, #0]
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <writeToHolding+0x28>)
 8000740:	0052      	lsls	r2, r2, #1
 8000742:	1d39      	adds	r1, r7, #4
 8000744:	8809      	ldrh	r1, [r1, #0]
 8000746:	52d1      	strh	r1, [r2, r3]
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	b002      	add	sp, #8
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000000 	.word	0x20000000

08000754 <sendData>:

void sendData (uint8_t *data, int size)
{
 8000754:	b5b0      	push	{r4, r5, r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
	// we will calculate the CRC in this function itself
	uint16_t crc = crc16(data, size);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b29a      	uxth	r2, r3
 8000762:	250e      	movs	r5, #14
 8000764:	197c      	adds	r4, r7, r5
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 f970 	bl	8000a50 <crc16>
 8000770:	0003      	movs	r3, r0
 8000772:	8023      	strh	r3, [r4, #0]
	data[size] = crc&0xFF;   // CRC LOW
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	197a      	adds	r2, r7, r5
 800077c:	8812      	ldrh	r2, [r2, #0]
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
	data[size+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000782:	197b      	adds	r3, r7, r5
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b299      	uxth	r1, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	18d3      	adds	r3, r2, r3
 8000792:	b2ca      	uxtb	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(Rs485_control_GPIO_Port,Rs485_control_Pin,GPIO_PIN_SET);
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	0159      	lsls	r1, r3, #5
 800079a:	2390      	movs	r3, #144	@ 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fbcf 	bl	8001f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_blue_GPIO_Port,Led_blue_Pin,GPIO_PIN_SET);
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	0059      	lsls	r1, r3, #1
 80007aa:	2390      	movs	r3, #144	@ 0x90
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	2201      	movs	r2, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fbc7 	bl	8001f44 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, data, size+2, 1000);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	3302      	adds	r3, #2
 80007bc:	b29a      	uxth	r2, r3
 80007be:	23fa      	movs	r3, #250	@ 0xfa
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	6879      	ldr	r1, [r7, #4]
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <sendData+0xa0>)
 80007c6:	f002 fc1d 	bl	8003004 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(Rs485_control_GPIO_Port,Rs485_control_Pin,GPIO_PIN_RESET);
 80007ca:	2380      	movs	r3, #128	@ 0x80
 80007cc:	0159      	lsls	r1, r3, #5
 80007ce:	2390      	movs	r3, #144	@ 0x90
 80007d0:	05db      	lsls	r3, r3, #23
 80007d2:	2200      	movs	r2, #0
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fbb5 	bl	8001f44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_blue_GPIO_Port,Led_blue_Pin,GPIO_PIN_RESET);
 80007da:	2380      	movs	r3, #128	@ 0x80
 80007dc:	0059      	lsls	r1, r3, #1
 80007de:	2390      	movs	r3, #144	@ 0x90
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	2200      	movs	r2, #0
 80007e4:	0018      	movs	r0, r3
 80007e6:	f001 fbad 	bl	8001f44 <HAL_GPIO_WritePin>
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bdb0      	pop	{r4, r5, r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	20000158 	.word	0x20000158

080007f8 <modbusException>:

void modbusException (uint8_t exceptioncode)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
	//| SLAVE_ID | FUNCTION_CODE | Exception code | CRC     |
	//| 1 BYTE   |  1 BYTE       |    1 BYTE      | 2 BYTES |

	TxData[0] = RxData[0];       // slave ID
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <modbusException+0x40>)
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <modbusException+0x44>)
 800080a:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1]|0x80;  // adding 1 to the MSB of the function code
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <modbusException+0x40>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	4252      	negs	r2, r2
 8000814:	4313      	orrs	r3, r2
 8000816:	b2da      	uxtb	r2, r3
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <modbusException+0x44>)
 800081a:	705a      	strb	r2, [r3, #1]
	TxData[2] = exceptioncode;   // Load the Exception code
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <modbusException+0x44>)
 800081e:	1dfa      	adds	r2, r7, #7
 8000820:	7812      	ldrb	r2, [r2, #0]
 8000822:	709a      	strb	r2, [r3, #2]
	sendData(TxData, 3);         // send Data... CRC will be calculated in the function
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <modbusException+0x44>)
 8000826:	2103      	movs	r1, #3
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff93 	bl	8000754 <sendData>
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b002      	add	sp, #8
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	200001e8 	.word	0x200001e8
 800083c:	200002e8 	.word	0x200002e8

08000840 <readHoldingRegs>:


uint8_t readHoldingRegs (void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <readHoldingRegs+0xfc>)
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b21a      	sxth	r2, r3
 800084e:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <readHoldingRegs+0xfc>)
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	b21b      	sxth	r3, r3
 8000854:	4313      	orrs	r3, r2
 8000856:	b21a      	sxth	r2, r3
 8000858:	230e      	movs	r3, #14
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <readHoldingRegs+0xfc>)
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <readHoldingRegs+0xfc>)
 8000868:	795b      	ldrb	r3, [r3, #5]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	1cbb      	adds	r3, r7, #2
 8000872:	801a      	strh	r2, [r3, #0]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 8000874:	1cbb      	adds	r3, r7, #2
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <readHoldingRegs+0x44>
 800087c:	1cbb      	adds	r3, r7, #2
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	2b7d      	cmp	r3, #125	@ 0x7d
 8000882:	d904      	bls.n	800088e <readHoldingRegs+0x4e>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 8000884:	2003      	movs	r0, #3
 8000886:	f7ff ffb7 	bl	80007f8 <modbusException>
		return 0;
 800088a:	2300      	movs	r3, #0
 800088c:	e052      	b.n	8000934 <readHoldingRegs+0xf4>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 800088e:	230e      	movs	r3, #14
 8000890:	18fa      	adds	r2, r7, r3
 8000892:	1cbb      	adds	r3, r7, #2
 8000894:	8812      	ldrh	r2, [r2, #0]
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	b29a      	uxth	r2, r3
 800089c:	003b      	movs	r3, r7
 800089e:	3a01      	subs	r2, #1
 80008a0:	801a      	strh	r2, [r3, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80008a2:	003b      	movs	r3, r7
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b31      	cmp	r3, #49	@ 0x31
 80008a8:	d904      	bls.n	80008b4 <readHoldingRegs+0x74>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80008aa:	2002      	movs	r0, #2
 80008ac:	f7ff ffa4 	bl	80007f8 <modbusException>
		return 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	e03f      	b.n	8000934 <readHoldingRegs+0xf4>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <readHoldingRegs+0x100>)
 80008b6:	2207      	movs	r2, #7
 80008b8:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <readHoldingRegs+0xfc>)
 80008bc:	785a      	ldrb	r2, [r3, #1]
 80008be:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <readHoldingRegs+0x100>)
 80008c0:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80008c2:	1cbb      	adds	r3, r7, #2
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	18db      	adds	r3, r3, r3
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <readHoldingRegs+0x100>)
 80008ce:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80008d0:	2303      	movs	r3, #3
 80008d2:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	e020      	b.n	800091c <readHoldingRegs+0xdc>
	{
		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80008da:	200e      	movs	r0, #14
 80008dc:	183b      	adds	r3, r7, r0
 80008de:	881a      	ldrh	r2, [r3, #0]
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <readHoldingRegs+0x104>)
 80008e2:	0052      	lsls	r2, r2, #1
 80008e4:	5ad3      	ldrh	r3, [r2, r3]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b299      	uxth	r1, r3
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	b2c9      	uxtb	r1, r1
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <readHoldingRegs+0x100>)
 80008f4:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80008f6:	183b      	adds	r3, r7, r0
 80008f8:	881a      	ldrh	r2, [r3, #0]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <readHoldingRegs+0x104>)
 80008fc:	0052      	lsls	r2, r2, #1
 80008fe:	5ad1      	ldrh	r1, [r2, r3]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2c9      	uxtb	r1, r1
 8000908:	4a0d      	ldr	r2, [pc, #52]	@ (8000940 <readHoldingRegs+0x100>)
 800090a:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 800090c:	183b      	adds	r3, r7, r0
 800090e:	881a      	ldrh	r2, [r3, #0]
 8000910:	183b      	adds	r3, r7, r0
 8000912:	3201      	adds	r2, #1
 8000914:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	3301      	adds	r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	1cbb      	adds	r3, r7, #2
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbd9      	blt.n	80008da <readHoldingRegs+0x9a>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <readHoldingRegs+0x100>)
 800092a:	0011      	movs	r1, r2
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff ff11 	bl	8000754 <sendData>
	return 1;   // success
 8000932:	2301      	movs	r3, #1
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001e8 	.word	0x200001e8
 8000940:	200002e8 	.word	0x200002e8
 8000944:	20000000 	.word	0x20000000

08000948 <readInputRegs>:

uint8_t readInputRegs (void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 800094e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a44 <readInputRegs+0xfc>)
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	b21a      	sxth	r2, r3
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <readInputRegs+0xfc>)
 8000958:	78db      	ldrb	r3, [r3, #3]
 800095a:	b21b      	sxth	r3, r3
 800095c:	4313      	orrs	r3, r2
 800095e:	b21a      	sxth	r2, r3
 8000960:	230e      	movs	r3, #14
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	801a      	strh	r2, [r3, #0]

	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000966:	4b37      	ldr	r3, [pc, #220]	@ (8000a44 <readInputRegs+0xfc>)
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21a      	sxth	r2, r3
 800096e:	4b35      	ldr	r3, [pc, #212]	@ (8000a44 <readInputRegs+0xfc>)
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	b21b      	sxth	r3, r3
 8000974:	4313      	orrs	r3, r2
 8000976:	b21a      	sxth	r2, r3
 8000978:	1cbb      	adds	r3, r7, #2
 800097a:	801a      	strh	r2, [r3, #0]
	if ((numRegs<1)||(numRegs>125))  // maximum no. of Registers as per the PDF
 800097c:	1cbb      	adds	r3, r7, #2
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d003      	beq.n	800098c <readInputRegs+0x44>
 8000984:	1cbb      	adds	r3, r7, #2
 8000986:	881b      	ldrh	r3, [r3, #0]
 8000988:	2b7d      	cmp	r3, #125	@ 0x7d
 800098a:	d904      	bls.n	8000996 <readInputRegs+0x4e>
	{
		modbusException (ILLEGAL_DATA_VALUE);  // send an exception
 800098c:	2003      	movs	r0, #3
 800098e:	f7ff ff33 	bl	80007f8 <modbusException>
		return 0;
 8000992:	2300      	movs	r3, #0
 8000994:	e052      	b.n	8000a3c <readInputRegs+0xf4>
	}

	uint16_t endAddr = startAddr+numRegs-1;  // end Register
 8000996:	230e      	movs	r3, #14
 8000998:	18fa      	adds	r2, r7, r3
 800099a:	1cbb      	adds	r3, r7, #2
 800099c:	8812      	ldrh	r2, [r2, #0]
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	18d3      	adds	r3, r2, r3
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	003b      	movs	r3, r7
 80009a6:	3a01      	subs	r2, #1
 80009a8:	801a      	strh	r2, [r3, #0]
	if (endAddr>49)  // end Register can not be more than 49 as we only have record of 50 Registers in total
 80009aa:	003b      	movs	r3, r7
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2b31      	cmp	r3, #49	@ 0x31
 80009b0:	d904      	bls.n	80009bc <readInputRegs+0x74>
	{
		modbusException(ILLEGAL_DATA_ADDRESS);   // send an exception
 80009b2:	2002      	movs	r0, #2
 80009b4:	f7ff ff20 	bl	80007f8 <modbusException>
		return 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e03f      	b.n	8000a3c <readInputRegs+0xf4>
	// Prepare TxData buffer

	//| SLAVE_ID | FUNCTION_CODE | BYTE COUNT | DATA      | CRC     |
	//| 1 BYTE   |  1 BYTE       |  1 BYTE    | N*2 BYTES | 2 BYTES |

	TxData[0] = SLAVE_ID;  // slave ID
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <readInputRegs+0x100>)
 80009be:	2207      	movs	r2, #7
 80009c0:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 80009c2:	4b20      	ldr	r3, [pc, #128]	@ (8000a44 <readInputRegs+0xfc>)
 80009c4:	785a      	ldrb	r2, [r3, #1]
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <readInputRegs+0x100>)
 80009c8:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 80009ca:	1cbb      	adds	r3, r7, #2
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	18db      	adds	r3, r3, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <readInputRegs+0x100>)
 80009d6:	709a      	strb	r2, [r3, #2]
	int indx = 3;  // we need to keep track of how many bytes has been stored in TxData Buffer
 80009d8:	2303      	movs	r3, #3
 80009da:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	e020      	b.n	8000a24 <readInputRegs+0xdc>
	{
		TxData[indx++] = (Input_Registers_Database[startAddr]>>8)&0xFF;  // extract the higher byte
 80009e2:	200e      	movs	r0, #14
 80009e4:	183b      	adds	r3, r7, r0
 80009e6:	881a      	ldrh	r2, [r3, #0]
 80009e8:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <readInputRegs+0x104>)
 80009ea:	0052      	lsls	r2, r2, #1
 80009ec:	5ad3      	ldrh	r3, [r2, r3]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b299      	uxth	r1, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	60ba      	str	r2, [r7, #8]
 80009f8:	b2c9      	uxtb	r1, r1
 80009fa:	4a13      	ldr	r2, [pc, #76]	@ (8000a48 <readInputRegs+0x100>)
 80009fc:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Input_Registers_Database[startAddr])&0xFF;   // extract the lower byte
 80009fe:	183b      	adds	r3, r7, r0
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <readInputRegs+0x104>)
 8000a04:	0052      	lsls	r2, r2, #1
 8000a06:	5ad1      	ldrh	r1, [r2, r3]
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	b2c9      	uxtb	r1, r1
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <readInputRegs+0x100>)
 8000a12:	54d1      	strb	r1, [r2, r3]
		startAddr++;  // increment the register address
 8000a14:	183b      	adds	r3, r7, r0
 8000a16:	881a      	ldrh	r2, [r3, #0]
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<numRegs; i++)   // Load the actual data into TxData buffer
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3301      	adds	r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	1cbb      	adds	r3, r7, #2
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbd9      	blt.n	80009e2 <readInputRegs+0x9a>
	}

	sendData(TxData, indx);  // send data... CRC will be calculated in the function itself
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <readInputRegs+0x100>)
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f7ff fe8d 	bl	8000754 <sendData>
	return 1;   // success
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b004      	add	sp, #16
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001e8 	.word	0x200001e8
 8000a48:	200002e8 	.word	0x200002e8
 8000a4c:	0800447c 	.word	0x0800447c

08000a50 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	000a      	movs	r2, r1
 8000a5a:	1cbb      	adds	r3, r7, #2
 8000a5c:	801a      	strh	r2, [r3, #0]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000a5e:	230f      	movs	r3, #15
 8000a60:	18fb      	adds	r3, r7, r3
 8000a62:	22ff      	movs	r2, #255	@ 0xff
 8000a64:	701a      	strb	r2, [r3, #0]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000a66:	230e      	movs	r3, #14
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	22ff      	movs	r2, #255	@ 0xff
 8000a6c:	701a      	strb	r2, [r3, #0]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000a6e:	e019      	b.n	8000aa4 <crc16+0x54>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	1c5a      	adds	r2, r3, #1
 8000a74:	607a      	str	r2, [r7, #4]
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	200e      	movs	r0, #14
 8000a7a:	183b      	adds	r3, r7, r0
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4053      	eors	r3, r2
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000a84:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <crc16+0x84>)
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	18d3      	adds	r3, r2, r3
 8000a8a:	7819      	ldrb	r1, [r3, #0]
 8000a8c:	183b      	adds	r3, r7, r0
 8000a8e:	200f      	movs	r0, #15
 8000a90:	183a      	adds	r2, r7, r0
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	404a      	eors	r2, r1
 8000a96:	701a      	strb	r2, [r3, #0]
        crc_hi = table_crc_lo[i];
 8000a98:	183b      	adds	r3, r7, r0
 8000a9a:	490f      	ldr	r1, [pc, #60]	@ (8000ad8 <crc16+0x88>)
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	188a      	adds	r2, r1, r2
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	701a      	strb	r2, [r3, #0]
    while (buffer_length--) {
 8000aa4:	1cbb      	adds	r3, r7, #2
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	1cba      	adds	r2, r7, #2
 8000aaa:	1e59      	subs	r1, r3, #1
 8000aac:	8011      	strh	r1, [r2, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1de      	bne.n	8000a70 <crc16+0x20>
    }

    return (crc_hi << 8 | crc_lo);
 8000ab2:	230f      	movs	r3, #15
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	230e      	movs	r3, #14
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	b29b      	uxth	r3, r3
}
 8000aca:	0018      	movs	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	080044e0 	.word	0x080044e0
 8000ad8:	080045e0 	.word	0x080045e0

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	699a      	ldr	r2, [r3, #24]
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	619a      	str	r2, [r3, #24]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <HAL_MspInit+0x44>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_MspInit+0x44>)
 8000afc:	69da      	ldr	r2, [r3, #28]
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	0549      	lsls	r1, r1, #21
 8000b04:	430a      	orrs	r2, r1
 8000b06:	61da      	str	r2, [r3, #28]
 8000b08:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <HAL_MspInit+0x44>)
 8000b0a:	69da      	ldr	r2, [r3, #28]
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	055b      	lsls	r3, r3, #21
 8000b10:	4013      	ands	r3, r2
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b08b      	sub	sp, #44	@ 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	2414      	movs	r4, #20
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	0018      	movs	r0, r3
 8000b32:	2314      	movs	r3, #20
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f003 fc68 	bl	800440c <memset>
  if(hadc->Instance==ADC1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a2c      	ldr	r2, [pc, #176]	@ (8000bf4 <HAL_ADC_MspInit+0xd0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d152      	bne.n	8000bec <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b46:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b48:	699a      	ldr	r2, [r3, #24]
 8000b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	0089      	lsls	r1, r1, #2
 8000b50:	430a      	orrs	r2, r1
 8000b52:	619a      	str	r2, [r3, #24]
 8000b54:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b56:	699a      	ldr	r2, [r3, #24]
 8000b58:	2380      	movs	r3, #128	@ 0x80
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b68:	2180      	movs	r1, #128	@ 0x80
 8000b6a:	02c9      	lsls	r1, r1, #11
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <HAL_ADC_MspInit+0xd4>)
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	02db      	lsls	r3, r3, #11
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2203      	movs	r2, #3
 8000b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2203      	movs	r2, #3
 8000b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	4a1a      	ldr	r2, [pc, #104]	@ (8000bfc <HAL_ADC_MspInit+0xd8>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f001 f864 	bl	8001c64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000b9e:	4a19      	ldr	r2, [pc, #100]	@ (8000c04 <HAL_ADC_MspInit+0xe0>)
 8000ba0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bb6:	2280      	movs	r2, #128	@ 0x80
 8000bb8:	0092      	lsls	r2, r2, #2
 8000bba:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	0112      	lsls	r2, r2, #4
 8000bc2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fe30 	bl	8001838 <HAL_DMA_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000bdc:	f7ff fd9e 	bl	800071c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000be4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_ADC_MspInit+0xdc>)
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b00b      	add	sp, #44	@ 0x2c
 8000bf2:	bd90      	pop	{r4, r7, pc}
 8000bf4:	40012400 	.word	0x40012400
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	200000cc 	.word	0x200000cc
 8000c04:	40020008 	.word	0x40020008

08000c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_TIM_Base_MspInit+0x38>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d10d      	bne.n	8000c36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c20:	2180      	movs	r1, #128	@ 0x80
 8000c22:	0109      	lsls	r1, r1, #4
 8000c24:	430a      	orrs	r2, r1
 8000c26:	619a      	str	r2, [r3, #24]
 8000c28:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_TIM_Base_MspInit+0x3c>)
 8000c2a:	699a      	ldr	r2, [r3, #24]
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	40012c00 	.word	0x40012c00
 8000c44:	40021000 	.word	0x40021000

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b08b      	sub	sp, #44	@ 0x2c
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	2414      	movs	r4, #20
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	2314      	movs	r3, #20
 8000c58:	001a      	movs	r2, r3
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	f003 fbd6 	bl	800440c <memset>
  if(huart->Instance==USART1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a21      	ldr	r2, [pc, #132]	@ (8000cec <HAL_UART_MspInit+0xa4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d13b      	bne.n	8000ce2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6a:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c6c:	699a      	ldr	r2, [r3, #24]
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c70:	2180      	movs	r1, #128	@ 0x80
 8000c72:	01c9      	lsls	r1, r1, #7
 8000c74:	430a      	orrs	r2, r1
 8000c76:	619a      	str	r2, [r3, #24]
 8000c78:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	01db      	lsls	r3, r3, #7
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c88:	695a      	ldr	r2, [r3, #20]
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	0289      	lsls	r1, r1, #10
 8000c90:	430a      	orrs	r2, r1
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_UART_MspInit+0xa8>)
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	2380      	movs	r3, #128	@ 0x80
 8000c9a:	029b      	lsls	r3, r3, #10
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	22c0      	movs	r2, #192	@ 0xc0
 8000ca6:	00d2      	lsls	r2, r2, #3
 8000ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	0021      	movs	r1, r4
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	2202      	movs	r2, #2
 8000cb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	187b      	adds	r3, r7, r1
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	2203      	movs	r2, #3
 8000cbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	187a      	adds	r2, r7, r1
 8000cc6:	2390      	movs	r3, #144	@ 0x90
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 ffc9 	bl	8001c64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	201b      	movs	r0, #27
 8000cd8:	f000 fd7c 	bl	80017d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cdc:	201b      	movs	r0, #27
 8000cde:	f000 fd8e 	bl	80017fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b00b      	add	sp, #44	@ 0x2c
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	40013800 	.word	0x40013800
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cf8:	f001 fdae 	bl	8002858 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	e7fd      	b.n	8000cfc <NMI_Handler+0x8>

08000d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	e7fd      	b.n	8000d04 <HardFault_Handler+0x4>

08000d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 f894 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <DMA1_Channel1_IRQHandler+0x14>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 feab 	bl	8001a8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	200000cc 	.word	0x200000cc

08000d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <USART1_IRQHandler+0x14>)
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f002 f9fa 	bl	8003144 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	20000158 	.word	0x20000158

08000d5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d68:	480d      	ldr	r0, [pc, #52]	@ (8000da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d6a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d6c:	f7ff fff6 	bl	8000d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	@ (8000da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	@ (8000da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	@ (8000dac <LoopForever+0xe>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	@ (8000db4 <LoopForever+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d96:	f003 fb41 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9a:	f7ff fa41 	bl	8000220 <main>

08000d9e <LoopForever>:

LoopForever:
    b LoopForever
 8000d9e:	e7fe      	b.n	8000d9e <LoopForever>
  ldr   r0, =_estack
 8000da0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000dac:	08004720 	.word	0x08004720
  ldr r2, =_sbss
 8000db0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000db4:	200003ec 	.word	0x200003ec

08000db8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC1_IRQHandler>
	...

08000dbc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <HAL_Init+0x24>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_Init+0x24>)
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f809 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd2:	f7ff fe83 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	40022000 	.word	0x40022000

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_InitTick+0x5c>)
 8000dee:	681c      	ldr	r4, [r3, #0]
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <HAL_InitTick+0x60>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	0019      	movs	r1, r3
 8000df6:	23fa      	movs	r3, #250	@ 0xfa
 8000df8:	0098      	lsls	r0, r3, #2
 8000dfa:	f7ff f985 	bl	8000108 <__udivsi3>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	0019      	movs	r1, r3
 8000e02:	0020      	movs	r0, r4
 8000e04:	f7ff f980 	bl	8000108 <__udivsi3>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 fd07 	bl	800181e <HAL_SYSTICK_Config>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e00f      	b.n	8000e38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d80b      	bhi.n	8000e36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	2301      	movs	r3, #1
 8000e22:	425b      	negs	r3, r3
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fcd4 	bl	80017d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_InitTick+0x64>)
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	20000064 	.word	0x20000064
 8000e44:	2000006c 	.word	0x2000006c
 8000e48:	20000068 	.word	0x20000068

08000e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <HAL_IncTick+0x1c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	001a      	movs	r2, r3
 8000e56:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	18d2      	adds	r2, r2, r3
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	2000006c 	.word	0x2000006c
 8000e6c:	200003e8 	.word	0x200003e8

08000e70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b02      	ldr	r3, [pc, #8]	@ (8000e80 <HAL_GetTick+0x10>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			@ (mov r8, r8)
 8000e80:	200003e8 	.word	0x200003e8

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff fff0 	bl	8000e70 <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	189b      	adds	r3, r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	f7ff ffe0 	bl	8000e70 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b004      	add	sp, #16
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	2000006c 	.word	0x2000006c

08000ecc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e125      	b.n	8001136 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10a      	bne.n	8000f08 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2234      	movs	r2, #52	@ 0x34
 8000efc:	2100      	movs	r1, #0
 8000efe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff fe0e 	bl	8000b24 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d000      	beq.n	8000f14 <HAL_ADC_Init+0x48>
 8000f12:	e103      	b.n	800111c <HAL_ADC_Init+0x250>
 8000f14:	230f      	movs	r3, #15
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d000      	beq.n	8000f20 <HAL_ADC_Init+0x54>
 8000f1e:	e0fd      	b.n	800111c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	2204      	movs	r2, #4
 8000f28:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f2a:	d000      	beq.n	8000f2e <HAL_ADC_Init+0x62>
 8000f2c:	e0f6      	b.n	800111c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f32:	4a83      	ldr	r2, [pc, #524]	@ (8001140 <HAL_ADC_Init+0x274>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	2202      	movs	r2, #2
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d112      	bne.n	8000f72 <HAL_ADC_Init+0xa6>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d009      	beq.n	8000f6e <HAL_ADC_Init+0xa2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	401a      	ands	r2, r3
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0xa6>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_ADC_Init+0xa8>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d116      	bne.n	8000fa6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2218      	movs	r2, #24
 8000f80:	4393      	bics	r3, r2
 8000f82:	0019      	movs	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	0899      	lsrs	r1, r3, #2
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68da      	ldr	r2, [r3, #12]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4964      	ldr	r1, [pc, #400]	@ (8001144 <HAL_ADC_Init+0x278>)
 8000fb2:	400a      	ands	r2, r1
 8000fb4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7e1b      	ldrb	r3, [r3, #24]
 8000fba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7e5b      	ldrb	r3, [r3, #25]
 8000fc0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fc2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7e9b      	ldrb	r3, [r3, #26]
 8000fc8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d002      	beq.n	8000fda <HAL_ADC_Init+0x10e>
 8000fd4:	2380      	movs	r3, #128	@ 0x80
 8000fd6:	015b      	lsls	r3, r3, #5
 8000fd8:	e000      	b.n	8000fdc <HAL_ADC_Init+0x110>
 8000fda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fdc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fe2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d101      	bne.n	8000ff0 <HAL_ADC_Init+0x124>
 8000fec:	2304      	movs	r3, #4
 8000fee:	e000      	b.n	8000ff2 <HAL_ADC_Init+0x126>
 8000ff0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000ff2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2124      	movs	r1, #36	@ 0x24
 8000ff8:	5c5b      	ldrb	r3, [r3, r1]
 8000ffa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000ffc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	4313      	orrs	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	7edb      	ldrb	r3, [r3, #27]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d115      	bne.n	8001038 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e9b      	ldrb	r3, [r3, #26]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d105      	bne.n	8001020 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2280      	movs	r2, #128	@ 0x80
 8001018:	0252      	lsls	r2, r2, #9
 800101a:	4313      	orrs	r3, r2
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	e00b      	b.n	8001038 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001024:	2220      	movs	r2, #32
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001030:	2201      	movs	r2, #1
 8001032:	431a      	orrs	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69da      	ldr	r2, [r3, #28]
 800103c:	23c2      	movs	r3, #194	@ 0xc2
 800103e:	33ff      	adds	r3, #255	@ 0xff
 8001040:	429a      	cmp	r2, r3
 8001042:	d007      	beq.n	8001054 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800104c:	4313      	orrs	r3, r2
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	4313      	orrs	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68d9      	ldr	r1, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	430a      	orrs	r2, r1
 8001062:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	055b      	lsls	r3, r3, #21
 800106c:	429a      	cmp	r2, r3
 800106e:	d01b      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001074:	2b01      	cmp	r3, #1
 8001076:	d017      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107c:	2b02      	cmp	r3, #2
 800107e:	d013      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2b03      	cmp	r3, #3
 8001086:	d00f      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108c:	2b04      	cmp	r3, #4
 800108e:	d00b      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001094:	2b05      	cmp	r3, #5
 8001096:	d007      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109c:	2b06      	cmp	r3, #6
 800109e:	d003      	beq.n	80010a8 <HAL_ADC_Init+0x1dc>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d112      	bne.n	80010ce <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2107      	movs	r1, #7
 80010b4:	438a      	bics	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6959      	ldr	r1, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c2:	2207      	movs	r2, #7
 80010c4:	401a      	ands	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	430a      	orrs	r2, r1
 80010cc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <HAL_ADC_Init+0x27c>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d10b      	bne.n	80010f6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010e8:	2203      	movs	r2, #3
 80010ea:	4393      	bics	r3, r2
 80010ec:	2201      	movs	r2, #1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010f4:	e01c      	b.n	8001130 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010fa:	2212      	movs	r2, #18
 80010fc:	4393      	bics	r3, r2
 80010fe:	2210      	movs	r2, #16
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800110a:	2201      	movs	r2, #1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001112:	230f      	movs	r3, #15
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800111a:	e009      	b.n	8001130 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001120:	2210      	movs	r2, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001128:	230f      	movs	r3, #15
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001130:	230f      	movs	r3, #15
 8001132:	18fb      	adds	r3, r7, r3
 8001134:	781b      	ldrb	r3, [r3, #0]
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	fffffefd 	.word	0xfffffefd
 8001144:	fffe0219 	.word	0xfffe0219
 8001148:	833fffe7 	.word	0x833fffe7

0800114c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001158:	2317      	movs	r3, #23
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2204      	movs	r2, #4
 8001168:	4013      	ands	r3, r2
 800116a:	d15e      	bne.n	800122a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2234      	movs	r2, #52	@ 0x34
 8001170:	5c9b      	ldrb	r3, [r3, r2]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d101      	bne.n	800117a <HAL_ADC_Start_DMA+0x2e>
 8001176:	2302      	movs	r3, #2
 8001178:	e05e      	b.n	8001238 <HAL_ADC_Start_DMA+0xec>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2234      	movs	r2, #52	@ 0x34
 800117e:	2101      	movs	r1, #1
 8001180:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	7e5b      	ldrb	r3, [r3, #25]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d007      	beq.n	800119a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800118a:	2317      	movs	r3, #23
 800118c:	18fc      	adds	r4, r7, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	0018      	movs	r0, r3
 8001192:	f000 f96b 	bl	800146c <ADC_Enable>
 8001196:	0003      	movs	r3, r0
 8001198:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800119a:	2317      	movs	r3, #23
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d146      	bne.n	8001232 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a8:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <HAL_ADC_Start_DMA+0xf4>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	2280      	movs	r2, #128	@ 0x80
 80011ae:	0052      	lsls	r2, r2, #1
 80011b0:	431a      	orrs	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2234      	movs	r2, #52	@ 0x34
 80011c0:	2100      	movs	r1, #0
 80011c2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001244 <HAL_ADC_Start_DMA+0xf8>)
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001248 <HAL_ADC_Start_DMA+0xfc>)
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d8:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <HAL_ADC_Start_DMA+0x100>)
 80011da:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	221c      	movs	r2, #28
 80011e2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2110      	movs	r1, #16
 80011f0:	430a      	orrs	r2, r1
 80011f2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2101      	movs	r1, #1
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3340      	adds	r3, #64	@ 0x40
 800120e:	0019      	movs	r1, r3
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f000 fb58 	bl	80018c8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2104      	movs	r1, #4
 8001224:	430a      	orrs	r2, r1
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e003      	b.n	8001232 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800122a:	2317      	movs	r3, #23
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001232:	2317      	movs	r3, #23
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	781b      	ldrb	r3, [r3, #0]
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b007      	add	sp, #28
 800123e:	bd90      	pop	{r4, r7, pc}
 8001240:	fffff0fe 	.word	0xfffff0fe
 8001244:	08001575 	.word	0x08001575
 8001248:	08001629 	.word	0x08001629
 800124c:	08001647 	.word	0x08001647

08001250 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001258:	46c0      	nop			@ (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b002      	add	sp, #8
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b002      	add	sp, #8
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800128a:	230f      	movs	r3, #15
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	055b      	lsls	r3, r3, #21
 800129e:	429a      	cmp	r2, r3
 80012a0:	d011      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x46>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d00d      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x46>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d009      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x46>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d005      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x46>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	2b04      	cmp	r3, #4
 80012c0:	d001      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x46>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2234      	movs	r2, #52	@ 0x34
 80012ca:	5c9b      	ldrb	r3, [r3, r2]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x54>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0bb      	b.n	800144c <HAL_ADC_ConfigChannel+0x1cc>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2234      	movs	r2, #52	@ 0x34
 80012d8:	2101      	movs	r1, #1
 80012da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2204      	movs	r2, #4
 80012e4:	4013      	ands	r3, r2
 80012e6:	d000      	beq.n	80012ea <HAL_ADC_ConfigChannel+0x6a>
 80012e8:	e09f      	b.n	800142a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a59      	ldr	r2, [pc, #356]	@ (8001454 <HAL_ADC_ConfigChannel+0x1d4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d100      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x76>
 80012f4:	e077      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2201      	movs	r2, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	055b      	lsls	r3, r3, #21
 8001314:	429a      	cmp	r2, r3
 8001316:	d037      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d033      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001324:	2b02      	cmp	r3, #2
 8001326:	d02f      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800132c:	2b03      	cmp	r3, #3
 800132e:	d02b      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001334:	2b04      	cmp	r3, #4
 8001336:	d027      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	2b05      	cmp	r3, #5
 800133e:	d023      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001344:	2b06      	cmp	r3, #6
 8001346:	d01f      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800134c:	2b07      	cmp	r3, #7
 800134e:	d01b      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	2107      	movs	r1, #7
 800135c:	400b      	ands	r3, r1
 800135e:	429a      	cmp	r2, r3
 8001360:	d012      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2107      	movs	r1, #7
 800136e:	438a      	bics	r2, r1
 8001370:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6959      	ldr	r1, [r3, #20]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2207      	movs	r2, #7
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	430a      	orrs	r2, r1
 8001386:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d003      	beq.n	8001398 <HAL_ADC_ConfigChannel+0x118>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b11      	cmp	r3, #17
 8001396:	d152      	bne.n	800143e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001398:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <HAL_ADC_ConfigChannel+0x1d8>)
 800139a:	6819      	ldr	r1, [r3, #0]
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d102      	bne.n	80013aa <HAL_ADC_ConfigChannel+0x12a>
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	041b      	lsls	r3, r3, #16
 80013a8:	e001      	b.n	80013ae <HAL_ADC_ConfigChannel+0x12e>
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	03db      	lsls	r3, r3, #15
 80013ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001458 <HAL_ADC_ConfigChannel+0x1d8>)
 80013b0:	430b      	orrs	r3, r1
 80013b2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b10      	cmp	r3, #16
 80013ba:	d140      	bne.n	800143e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <HAL_ADC_ConfigChannel+0x1dc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4927      	ldr	r1, [pc, #156]	@ (8001460 <HAL_ADC_ConfigChannel+0x1e0>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	001a      	movs	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013d6:	e002      	b.n	80013de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f9      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x158>
 80013e4:	e02b      	b.n	800143e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	4099      	lsls	r1, r3
 80013f4:	000b      	movs	r3, r1
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	400a      	ands	r2, r1
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d003      	beq.n	8001410 <HAL_ADC_ConfigChannel+0x190>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b11      	cmp	r3, #17
 800140e:	d116      	bne.n	800143e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001410:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_ADC_ConfigChannel+0x1d8>)
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b10      	cmp	r3, #16
 800141a:	d101      	bne.n	8001420 <HAL_ADC_ConfigChannel+0x1a0>
 800141c:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_ADC_ConfigChannel+0x1e4>)
 800141e:	e000      	b.n	8001422 <HAL_ADC_ConfigChannel+0x1a2>
 8001420:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_ADC_ConfigChannel+0x1e8>)
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <HAL_ADC_ConfigChannel+0x1d8>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	e009      	b.n	800143e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800142e:	2220      	movs	r2, #32
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2234      	movs	r2, #52	@ 0x34
 8001442:	2100      	movs	r1, #0
 8001444:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b004      	add	sp, #16
 8001452:	bd80      	pop	{r7, pc}
 8001454:	00001001 	.word	0x00001001
 8001458:	40012708 	.word	0x40012708
 800145c:	20000064 	.word	0x20000064
 8001460:	000f4240 	.word	0x000f4240
 8001464:	ff7fffff 	.word	0xff7fffff
 8001468:	ffbfffff 	.word	0xffbfffff

0800146c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2203      	movs	r2, #3
 8001484:	4013      	ands	r3, r2
 8001486:	2b01      	cmp	r3, #1
 8001488:	d112      	bne.n	80014b0 <ADC_Enable+0x44>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	2b01      	cmp	r3, #1
 8001496:	d009      	beq.n	80014ac <ADC_Enable+0x40>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	2380      	movs	r3, #128	@ 0x80
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	401a      	ands	r2, r3
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d101      	bne.n	80014b0 <ADC_Enable+0x44>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <ADC_Enable+0x46>
 80014b0:	2300      	movs	r3, #0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d152      	bne.n	800155c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001568 <ADC_Enable+0xfc>)
 80014be:	4013      	ands	r3, r2
 80014c0:	d00d      	beq.n	80014de <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014c6:	2210      	movs	r2, #16
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d2:	2201      	movs	r2, #1
 80014d4:	431a      	orrs	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e03f      	b.n	800155e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <ADC_Enable+0x100>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	491f      	ldr	r1, [pc, #124]	@ (8001570 <ADC_Enable+0x104>)
 80014f4:	0018      	movs	r0, r3
 80014f6:	f7fe fe07 	bl	8000108 <__udivsi3>
 80014fa:	0003      	movs	r3, r0
 80014fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014fe:	e002      	b.n	8001506 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	3b01      	subs	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1f9      	bne.n	8001500 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800150c:	f7ff fcb0 	bl	8000e70 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001514:	e01b      	b.n	800154e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001516:	f7ff fcab 	bl	8000e70 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d914      	bls.n	800154e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	2b01      	cmp	r3, #1
 8001530:	d00d      	beq.n	800154e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001536:	2210      	movs	r2, #16
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001542:	2201      	movs	r2, #1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e007      	b.n	800155e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2201      	movs	r2, #1
 8001556:	4013      	ands	r3, r2
 8001558:	2b01      	cmp	r3, #1
 800155a:	d1dc      	bne.n	8001516 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b004      	add	sp, #16
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	80000017 	.word	0x80000017
 800156c:	20000064 	.word	0x20000064
 8001570:	000f4240 	.word	0x000f4240

08001574 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001586:	2250      	movs	r2, #80	@ 0x50
 8001588:	4013      	ands	r3, r2
 800158a:	d140      	bne.n	800160e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68da      	ldr	r2, [r3, #12]
 80015a0:	23c0      	movs	r3, #192	@ 0xc0
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4013      	ands	r3, r2
 80015a6:	d12d      	bne.n	8001604 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d129      	bne.n	8001604 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d122      	bne.n	8001604 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2204      	movs	r2, #4
 80015c6:	4013      	ands	r3, r2
 80015c8:	d110      	bne.n	80015ec <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	210c      	movs	r1, #12
 80015d6:	438a      	bics	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <ADC_DMAConvCplt+0xb0>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	2201      	movs	r2, #1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015ea:	e00b      	b.n	8001604 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f0:	2220      	movs	r2, #32
 80015f2:	431a      	orrs	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fc:	2201      	movs	r2, #1
 80015fe:	431a      	orrs	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff fe22 	bl	8001250 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800160c:	e005      	b.n	800161a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	0010      	movs	r0, r2
 8001618:	4798      	blx	r3
}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	b004      	add	sp, #16
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	fffffefe 	.word	0xfffffefe

08001628 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001634:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	0018      	movs	r0, r3
 800163a:	f7ff fe11 	bl	8001260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}

08001646 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b084      	sub	sp, #16
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	431a      	orrs	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001664:	2204      	movs	r2, #4
 8001666:	431a      	orrs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	0018      	movs	r0, r3
 8001670:	f7ff fdfe 	bl	8001270 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b004      	add	sp, #16
 800167a:	bd80      	pop	{r7, pc}

0800167c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	0002      	movs	r2, r0
 8001684:	1dfb      	adds	r3, r7, #7
 8001686:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b7f      	cmp	r3, #127	@ 0x7f
 800168e:	d809      	bhi.n	80016a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	001a      	movs	r2, r3
 8001696:	231f      	movs	r3, #31
 8001698:	401a      	ands	r2, r3
 800169a:	4b04      	ldr	r3, [pc, #16]	@ (80016ac <__NVIC_EnableIRQ+0x30>)
 800169c:	2101      	movs	r1, #1
 800169e:	4091      	lsls	r1, r2
 80016a0:	000a      	movs	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
  }
}
 80016a4:	46c0      	nop			@ (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	0002      	movs	r2, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80016c4:	d828      	bhi.n	8001718 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001784 <__NVIC_SetPriority+0xd4>)
 80016c8:	1dfb      	adds	r3, r7, #7
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	33c0      	adds	r3, #192	@ 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	589b      	ldr	r3, [r3, r2]
 80016d6:	1dfa      	adds	r2, r7, #7
 80016d8:	7812      	ldrb	r2, [r2, #0]
 80016da:	0011      	movs	r1, r2
 80016dc:	2203      	movs	r2, #3
 80016de:	400a      	ands	r2, r1
 80016e0:	00d2      	lsls	r2, r2, #3
 80016e2:	21ff      	movs	r1, #255	@ 0xff
 80016e4:	4091      	lsls	r1, r2
 80016e6:	000a      	movs	r2, r1
 80016e8:	43d2      	mvns	r2, r2
 80016ea:	401a      	ands	r2, r3
 80016ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	22ff      	movs	r2, #255	@ 0xff
 80016f4:	401a      	ands	r2, r3
 80016f6:	1dfb      	adds	r3, r7, #7
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	0018      	movs	r0, r3
 80016fc:	2303      	movs	r3, #3
 80016fe:	4003      	ands	r3, r0
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001704:	481f      	ldr	r0, [pc, #124]	@ (8001784 <__NVIC_SetPriority+0xd4>)
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b25b      	sxtb	r3, r3
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	430a      	orrs	r2, r1
 8001710:	33c0      	adds	r3, #192	@ 0xc0
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001716:	e031      	b.n	800177c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <__NVIC_SetPriority+0xd8>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0019      	movs	r1, r3
 8001720:	230f      	movs	r3, #15
 8001722:	400b      	ands	r3, r1
 8001724:	3b08      	subs	r3, #8
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3306      	adds	r3, #6
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	18d3      	adds	r3, r2, r3
 800172e:	3304      	adds	r3, #4
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	1dfa      	adds	r2, r7, #7
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	0011      	movs	r1, r2
 8001738:	2203      	movs	r2, #3
 800173a:	400a      	ands	r2, r1
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	21ff      	movs	r1, #255	@ 0xff
 8001740:	4091      	lsls	r1, r2
 8001742:	000a      	movs	r2, r1
 8001744:	43d2      	mvns	r2, r2
 8001746:	401a      	ands	r2, r3
 8001748:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	019b      	lsls	r3, r3, #6
 800174e:	22ff      	movs	r2, #255	@ 0xff
 8001750:	401a      	ands	r2, r3
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	0018      	movs	r0, r3
 8001758:	2303      	movs	r3, #3
 800175a:	4003      	ands	r3, r0
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001760:	4809      	ldr	r0, [pc, #36]	@ (8001788 <__NVIC_SetPriority+0xd8>)
 8001762:	1dfb      	adds	r3, r7, #7
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	001c      	movs	r4, r3
 8001768:	230f      	movs	r3, #15
 800176a:	4023      	ands	r3, r4
 800176c:	3b08      	subs	r3, #8
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	430a      	orrs	r2, r1
 8001772:	3306      	adds	r3, #6
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	18c3      	adds	r3, r0, r3
 8001778:	3304      	adds	r3, #4
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	46c0      	nop			@ (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b003      	add	sp, #12
 8001782:	bd90      	pop	{r4, r7, pc}
 8001784:	e000e100 	.word	0xe000e100
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	045b      	lsls	r3, r3, #17
 800179c:	429a      	cmp	r2, r3
 800179e:	d301      	bcc.n	80017a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017a0:	2301      	movs	r3, #1
 80017a2:	e010      	b.n	80017c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <SysTick_Config+0x44>)
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	3a01      	subs	r2, #1
 80017aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ac:	2301      	movs	r3, #1
 80017ae:	425b      	negs	r3, r3
 80017b0:	2103      	movs	r1, #3
 80017b2:	0018      	movs	r0, r3
 80017b4:	f7ff ff7c 	bl	80016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <SysTick_Config+0x44>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017be:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <SysTick_Config+0x44>)
 80017c0:	2207      	movs	r2, #7
 80017c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	e000e010 	.word	0xe000e010

080017d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	210f      	movs	r1, #15
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	1c02      	adds	r2, r0, #0
 80017e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	0011      	movs	r1, r2
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ff5d 	bl	80016b0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	0002      	movs	r2, r0
 8001806:	1dfb      	adds	r3, r7, #7
 8001808:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180a:	1dfb      	adds	r3, r7, #7
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b25b      	sxtb	r3, r3
 8001810:	0018      	movs	r0, r3
 8001812:	f7ff ff33 	bl	800167c <__NVIC_EnableIRQ>
}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b002      	add	sp, #8
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff ffaf 	bl	800178c <SysTick_Config>
 800182e:	0003      	movs	r3, r0
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e036      	b.n	80018bc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2221      	movs	r2, #33	@ 0x21
 8001852:	2102      	movs	r1, #2
 8001854:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <HAL_DMA_Init+0x8c>)
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800186e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f9c4 	bl	8001c2c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2221      	movs	r2, #33	@ 0x21
 80018ae:	2101      	movs	r1, #1
 80018b0:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2220      	movs	r2, #32
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b004      	add	sp, #16
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	ffffc00f 	.word	0xffffc00f

080018c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2317      	movs	r3, #23
 80018d8:	18fb      	adds	r3, r7, r3
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	5c9b      	ldrb	r3, [r3, r2]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_DMA_Start_IT+0x24>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e04f      	b.n	800198c <HAL_DMA_Start_IT+0xc4>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2220      	movs	r2, #32
 80018f0:	2101      	movs	r1, #1
 80018f2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2221      	movs	r2, #33	@ 0x21
 80018f8:	5c9b      	ldrb	r3, [r3, r2]
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d13a      	bne.n	8001976 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2221      	movs	r2, #33	@ 0x21
 8001904:	2102      	movs	r1, #2
 8001906:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	438a      	bics	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f954 	bl	8001bd2 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d008      	beq.n	8001944 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	210e      	movs	r1, #14
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e00f      	b.n	8001964 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	210a      	movs	r1, #10
 8001950:	430a      	orrs	r2, r1
 8001952:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2104      	movs	r1, #4
 8001960:	438a      	bics	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	e007      	b.n	8001986 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	2100      	movs	r1, #0
 800197c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800197e:	2317      	movs	r3, #23
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	2202      	movs	r2, #2
 8001984:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001986:	2317      	movs	r3, #23
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	781b      	ldrb	r3, [r3, #0]
}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b006      	add	sp, #24
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2221      	movs	r2, #33	@ 0x21
 80019a0:	5c9b      	ldrb	r3, [r3, r2]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d008      	beq.n	80019ba <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2204      	movs	r2, #4
 80019ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2220      	movs	r2, #32
 80019b2:	2100      	movs	r1, #0
 80019b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e020      	b.n	80019fc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	210e      	movs	r1, #14
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	438a      	bics	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e2:	2101      	movs	r1, #1
 80019e4:	4091      	lsls	r1, r2
 80019e6:	000a      	movs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2221      	movs	r2, #33	@ 0x21
 80019ee:	2101      	movs	r1, #1
 80019f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2220      	movs	r2, #32
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	210f      	movs	r1, #15
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2221      	movs	r2, #33	@ 0x21
 8001a18:	5c9b      	ldrb	r3, [r3, r2]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d006      	beq.n	8001a2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2204      	movs	r2, #4
 8001a24:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e028      	b.n	8001a80 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	210e      	movs	r1, #14
 8001a3a:	438a      	bics	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a56:	2101      	movs	r1, #1
 8001a58:	4091      	lsls	r1, r2
 8001a5a:	000a      	movs	r2, r1
 8001a5c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2221      	movs	r2, #33	@ 0x21
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	4798      	blx	r3
    }
  }
  return status;
 8001a80:	230f      	movs	r3, #15
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	781b      	ldrb	r3, [r3, #0]
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b084      	sub	sp, #16
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	2204      	movs	r2, #4
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d024      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x72>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	4013      	ands	r3, r2
 8001abc:	d020      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d107      	bne.n	8001ada <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	4091      	lsls	r1, r2
 8001ae6:	000a      	movs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d100      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x66>
 8001af2:	e06a      	b.n	8001bca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	0010      	movs	r0, r2
 8001afc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001afe:	e064      	b.n	8001bca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	2202      	movs	r2, #2
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d02b      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xda>
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2202      	movs	r2, #2
 8001b14:	4013      	ands	r3, r2
 8001b16:	d027      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	4013      	ands	r3, r2
 8001b22:	d10b      	bne.n	8001b3c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	210a      	movs	r1, #10
 8001b30:	438a      	bics	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2221      	movs	r2, #33	@ 0x21
 8001b38:	2101      	movs	r1, #1
 8001b3a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b44:	2102      	movs	r1, #2
 8001b46:	4091      	lsls	r1, r2
 8001b48:	000a      	movs	r2, r1
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	2100      	movs	r1, #0
 8001b52:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d036      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	0010      	movs	r0, r2
 8001b64:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b66:	e030      	b.n	8001bca <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	d028      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13c>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d024      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	210e      	movs	r1, #14
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4091      	lsls	r1, r2
 8001b9c:	000a      	movs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2221      	movs	r2, #33	@ 0x21
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	4798      	blx	r3
    }
  }
}
 8001bc8:	e7ff      	b.n	8001bca <HAL_DMA_IRQHandler+0x13c>
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b004      	add	sp, #16
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be8:	2101      	movs	r1, #1
 8001bea:	4091      	lsls	r1, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d108      	bne.n	8001c12 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c10:	e007      	b.n	8001c22 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]
}
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <DMA_CalcBaseAndBitshift+0x30>)
 8001c3a:	4694      	mov	ip, r2
 8001c3c:	4463      	add	r3, ip
 8001c3e:	2114      	movs	r1, #20
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7fe fa61 	bl	8000108 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	009a      	lsls	r2, r3, #2
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a03      	ldr	r2, [pc, #12]	@ (8001c60 <DMA_CalcBaseAndBitshift+0x34>)
 8001c52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001c54:	46c0      	nop			@ (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	bffdfff8 	.word	0xbffdfff8
 8001c60:	40020000 	.word	0x40020000

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	e14f      	b.n	8001f14 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2101      	movs	r1, #1
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	000a      	movs	r2, r1
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d100      	bne.n	8001c8c <HAL_GPIO_Init+0x28>
 8001c8a:	e140      	b.n	8001f0e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d005      	beq.n	8001ca4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d130      	bne.n	8001d06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	0013      	movs	r3, r2
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cda:	2201      	movs	r2, #1
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d017      	beq.n	8001d42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	43da      	mvns	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	409a      	lsls	r2, r3
 8001d34:	0013      	movs	r3, r2
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2203      	movs	r2, #3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d123      	bne.n	8001d96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	58d3      	ldr	r3, [r2, r3]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2207      	movs	r2, #7
 8001d60:	4013      	ands	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	409a      	lsls	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2107      	movs	r1, #7
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	6939      	ldr	r1, [r7, #16]
 8001d94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2203      	movs	r2, #3
 8001db4:	401a      	ands	r2, r3
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	23c0      	movs	r3, #192	@ 0xc0
 8001dd0:	029b      	lsls	r3, r3, #10
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d100      	bne.n	8001dd8 <HAL_GPIO_Init+0x174>
 8001dd6:	e09a      	b.n	8001f0e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	4b54      	ldr	r3, [pc, #336]	@ (8001f2c <HAL_GPIO_Init+0x2c8>)
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_GPIO_Init+0x2c8>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	430a      	orrs	r2, r1
 8001de2:	619a      	str	r2, [r3, #24]
 8001de4:	4b51      	ldr	r3, [pc, #324]	@ (8001f2c <HAL_GPIO_Init+0x2c8>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001df0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <HAL_GPIO_Init+0x2cc>)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	3302      	adds	r3, #2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	589b      	ldr	r3, [r3, r2]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4013      	ands	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	220f      	movs	r2, #15
 8001e08:	409a      	lsls	r2, r3
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	2390      	movs	r3, #144	@ 0x90
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1e2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a44      	ldr	r2, [pc, #272]	@ (8001f34 <HAL_GPIO_Init+0x2d0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1de>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a43      	ldr	r2, [pc, #268]	@ (8001f38 <HAL_GPIO_Init+0x2d4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1da>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <HAL_GPIO_Init+0x2d8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1d6>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e46:	2300      	movs	r3, #0
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	@ (8001f30 <HAL_GPIO_Init+0x2cc>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	2380      	movs	r3, #128	@ 0x80
 8001e7c:	035b      	lsls	r3, r3, #13
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	039b      	lsls	r3, r3, #14
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001eba:	4b21      	ldr	r3, [pc, #132]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	2380      	movs	r3, #128	@ 0x80
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	025b      	lsls	r3, r3, #9
 8001efc:	4013      	ands	r3, r2
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_GPIO_Init+0x2dc>)
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	3301      	adds	r3, #1
 8001f12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	40da      	lsrs	r2, r3
 8001f1c:	1e13      	subs	r3, r2, #0
 8001f1e:	d000      	beq.n	8001f22 <HAL_GPIO_Init+0x2be>
 8001f20:	e6a8      	b.n	8001c74 <HAL_GPIO_Init+0x10>
  } 
}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b006      	add	sp, #24
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	0008      	movs	r0, r1
 8001f4e:	0011      	movs	r1, r2
 8001f50:	1cbb      	adds	r3, r7, #2
 8001f52:	1c02      	adds	r2, r0, #0
 8001f54:	801a      	strh	r2, [r3, #0]
 8001f56:	1c7b      	adds	r3, r7, #1
 8001f58:	1c0a      	adds	r2, r1, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5c:	1c7b      	adds	r3, r7, #1
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f64:	1cbb      	adds	r3, r7, #2
 8001f66:	881a      	ldrh	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f6c:	e003      	b.n	8001f76 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6e:	1cbb      	adds	r3, r7, #2
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f76:	46c0      	nop			@ (mov r8, r8)
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e301      	b.n	8002596 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x1e>
 8001f9c:	e08d      	b.n	80020ba <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f9e:	4bc3      	ldr	r3, [pc, #780]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d00e      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001faa:	4bc0      	ldr	r3, [pc, #768]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	220c      	movs	r2, #12
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x64>
 8001fb6:	4bbd      	ldr	r3, [pc, #756]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc8:	4bb8      	ldr	r3, [pc, #736]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	029b      	lsls	r3, r3, #10
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d100      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x56>
 8001fd4:	e070      	b.n	80020b8 <HAL_RCC_OscConfig+0x138>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d000      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x60>
 8001fde:	e06b      	b.n	80020b8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e2d8      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_OscConfig+0x7c>
 8001fec:	4baf      	ldr	r3, [pc, #700]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4bae      	ldr	r3, [pc, #696]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	2180      	movs	r1, #128	@ 0x80
 8001ff4:	0249      	lsls	r1, r1, #9
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e02f      	b.n	800205c <HAL_RCC_OscConfig+0xdc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10c      	bne.n	800201e <HAL_RCC_OscConfig+0x9e>
 8002004:	4ba9      	ldr	r3, [pc, #676]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4ba8      	ldr	r3, [pc, #672]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800200a:	49a9      	ldr	r1, [pc, #676]	@ (80022b0 <HAL_RCC_OscConfig+0x330>)
 800200c:	400a      	ands	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	4ba6      	ldr	r3, [pc, #664]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4ba5      	ldr	r3, [pc, #660]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002016:	49a7      	ldr	r1, [pc, #668]	@ (80022b4 <HAL_RCC_OscConfig+0x334>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e01e      	b.n	800205c <HAL_RCC_OscConfig+0xdc>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d10e      	bne.n	8002044 <HAL_RCC_OscConfig+0xc4>
 8002026:	4ba1      	ldr	r3, [pc, #644]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4ba0      	ldr	r3, [pc, #640]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800202c:	2180      	movs	r1, #128	@ 0x80
 800202e:	02c9      	lsls	r1, r1, #11
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	4b9d      	ldr	r3, [pc, #628]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b9c      	ldr	r3, [pc, #624]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	0249      	lsls	r1, r1, #9
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xdc>
 8002044:	4b99      	ldr	r3, [pc, #612]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b98      	ldr	r3, [pc, #608]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800204a:	4999      	ldr	r1, [pc, #612]	@ (80022b0 <HAL_RCC_OscConfig+0x330>)
 800204c:	400a      	ands	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4b96      	ldr	r3, [pc, #600]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b95      	ldr	r3, [pc, #596]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002056:	4997      	ldr	r1, [pc, #604]	@ (80022b4 <HAL_RCC_OscConfig+0x334>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d014      	beq.n	800208e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe ff04 	bl	8000e70 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206e:	f7fe feff 	bl	8000e70 <HAL_GetTick>
 8002072:	0002      	movs	r2, r0
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b64      	cmp	r3, #100	@ 0x64
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e28a      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002080:	4b8a      	ldr	r3, [pc, #552]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	029b      	lsls	r3, r3, #10
 8002088:	4013      	ands	r3, r2
 800208a:	d0f0      	beq.n	800206e <HAL_RCC_OscConfig+0xee>
 800208c:	e015      	b.n	80020ba <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe feef 	bl	8000e70 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe feea 	bl	8000e70 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b64      	cmp	r3, #100	@ 0x64
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e275      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020aa:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	2380      	movs	r3, #128	@ 0x80
 80020b0:	029b      	lsls	r3, r3, #10
 80020b2:	4013      	ands	r3, r2
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x118>
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x146>
 80020c4:	e069      	b.n	800219a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020c6:	4b79      	ldr	r3, [pc, #484]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	220c      	movs	r2, #12
 80020cc:	4013      	ands	r3, r2
 80020ce:	d00b      	beq.n	80020e8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020d0:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	220c      	movs	r2, #12
 80020d6:	4013      	ands	r3, r2
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d11c      	bne.n	8002116 <HAL_RCC_OscConfig+0x196>
 80020dc:	4b73      	ldr	r3, [pc, #460]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	4013      	ands	r3, r2
 80020e6:	d116      	bne.n	8002116 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e8:	4b70      	ldr	r3, [pc, #448]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2202      	movs	r2, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x17e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e24b      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b6b      	ldr	r3, [pc, #428]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	22f8      	movs	r2, #248	@ 0xf8
 8002104:	4393      	bics	r3, r2
 8002106:	0019      	movs	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00da      	lsls	r2, r3, #3
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002114:	e041      	b.n	800219a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d024      	beq.n	8002168 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b62      	ldr	r3, [pc, #392]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002124:	2101      	movs	r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fea1 	bl	8000e70 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fe9c 	bl	8000e70 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e227      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002146:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d0f1      	beq.n	8002134 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	22f8      	movs	r2, #248	@ 0xf8
 8002156:	4393      	bics	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00da      	lsls	r2, r3, #3
 8002160:	4b52      	ldr	r3, [pc, #328]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002168:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b4f      	ldr	r3, [pc, #316]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800216e:	2101      	movs	r1, #1
 8002170:	438a      	bics	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe fe7c 	bl	8000e70 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe fe77 	bl	8000e70 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e202      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002190:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d1f1      	bne.n	800217e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2208      	movs	r2, #8
 80021a0:	4013      	ands	r3, r2
 80021a2:	d036      	beq.n	8002212 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d019      	beq.n	80021e0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ac:	4b3f      	ldr	r3, [pc, #252]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021b0:	4b3e      	ldr	r3, [pc, #248]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	430a      	orrs	r2, r1
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fe5a 	bl	8000e70 <HAL_GetTick>
 80021bc:	0003      	movs	r3, r0
 80021be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fe55 	bl	8000e70 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1e0      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d4:	4b35      	ldr	r3, [pc, #212]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	2202      	movs	r2, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d0f1      	beq.n	80021c2 <HAL_RCC_OscConfig+0x242>
 80021de:	e018      	b.n	8002212 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021e4:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	438a      	bics	r2, r1
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ec:	f7fe fe40 	bl	8000e70 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe fe3b 	bl	8000e70 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e1c6      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	2202      	movs	r2, #2
 800220e:	4013      	ands	r3, r2
 8002210:	d1f1      	bne.n	80021f6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	d100      	bne.n	800221e <HAL_RCC_OscConfig+0x29e>
 800221c:	e0b4      	b.n	8002388 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221e:	201f      	movs	r0, #31
 8002220:	183b      	adds	r3, r7, r0
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	055b      	lsls	r3, r3, #21
 800222e:	4013      	ands	r3, r2
 8002230:	d110      	bne.n	8002254 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	0549      	lsls	r1, r1, #21
 800223c:	430a      	orrs	r2, r1
 800223e:	61da      	str	r2, [r3, #28]
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800224e:	183b      	adds	r3, r7, r0
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4013      	ands	r3, r2
 800225e:	d11a      	bne.n	8002296 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002260:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	0049      	lsls	r1, r1, #1
 800226a:	430a      	orrs	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226e:	f7fe fdff 	bl	8000e70 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7fe fdfa 	bl	8000e70 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	@ 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e185      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_OscConfig+0x338>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	4013      	ands	r3, r2
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d10e      	bne.n	80022bc <HAL_RCC_OscConfig+0x33c>
 800229e:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80022a0:	6a1a      	ldr	r2, [r3, #32]
 80022a2:	4b02      	ldr	r3, [pc, #8]	@ (80022ac <HAL_RCC_OscConfig+0x32c>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]
 80022aa:	e035      	b.n	8002318 <HAL_RCC_OscConfig+0x398>
 80022ac:	40021000 	.word	0x40021000
 80022b0:	fffeffff 	.word	0xfffeffff
 80022b4:	fffbffff 	.word	0xfffbffff
 80022b8:	40007000 	.word	0x40007000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x35e>
 80022c4:	4bb6      	ldr	r3, [pc, #728]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022c6:	6a1a      	ldr	r2, [r3, #32]
 80022c8:	4bb5      	ldr	r3, [pc, #724]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	621a      	str	r2, [r3, #32]
 80022d0:	4bb3      	ldr	r3, [pc, #716]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022d2:	6a1a      	ldr	r2, [r3, #32]
 80022d4:	4bb2      	ldr	r3, [pc, #712]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022d6:	2104      	movs	r1, #4
 80022d8:	438a      	bics	r2, r1
 80022da:	621a      	str	r2, [r3, #32]
 80022dc:	e01c      	b.n	8002318 <HAL_RCC_OscConfig+0x398>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b05      	cmp	r3, #5
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x380>
 80022e6:	4bae      	ldr	r3, [pc, #696]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022e8:	6a1a      	ldr	r2, [r3, #32]
 80022ea:	4bad      	ldr	r3, [pc, #692]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022ec:	2104      	movs	r1, #4
 80022ee:	430a      	orrs	r2, r1
 80022f0:	621a      	str	r2, [r3, #32]
 80022f2:	4bab      	ldr	r3, [pc, #684]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022f4:	6a1a      	ldr	r2, [r3, #32]
 80022f6:	4baa      	ldr	r3, [pc, #680]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	430a      	orrs	r2, r1
 80022fc:	621a      	str	r2, [r3, #32]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0x398>
 8002300:	4ba7      	ldr	r3, [pc, #668]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002302:	6a1a      	ldr	r2, [r3, #32]
 8002304:	4ba6      	ldr	r3, [pc, #664]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002306:	2101      	movs	r1, #1
 8002308:	438a      	bics	r2, r1
 800230a:	621a      	str	r2, [r3, #32]
 800230c:	4ba4      	ldr	r3, [pc, #656]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800230e:	6a1a      	ldr	r2, [r3, #32]
 8002310:	4ba3      	ldr	r3, [pc, #652]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002312:	2104      	movs	r1, #4
 8002314:	438a      	bics	r2, r1
 8002316:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d014      	beq.n	800234a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fda6 	bl	8000e70 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	e009      	b.n	800233e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232a:	f7fe fda1 	bl	8000e70 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	4a9b      	ldr	r2, [pc, #620]	@ (80025a4 <HAL_RCC_OscConfig+0x624>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e12b      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	4b98      	ldr	r3, [pc, #608]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x3aa>
 8002348:	e013      	b.n	8002372 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe fd91 	bl	8000e70 <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002352:	e009      	b.n	8002368 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002354:	f7fe fd8c 	bl	8000e70 <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	4a91      	ldr	r2, [pc, #580]	@ (80025a4 <HAL_RCC_OscConfig+0x624>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e116      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b8d      	ldr	r3, [pc, #564]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002372:	231f      	movs	r3, #31
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b88      	ldr	r3, [pc, #544]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002382:	4989      	ldr	r1, [pc, #548]	@ (80025a8 <HAL_RCC_OscConfig+0x628>)
 8002384:	400a      	ands	r2, r1
 8002386:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2210      	movs	r2, #16
 800238e:	4013      	ands	r3, r2
 8002390:	d063      	beq.n	800245a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d12a      	bne.n	80023f0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800239a:	4b81      	ldr	r3, [pc, #516]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800239c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239e:	4b80      	ldr	r3, [pc, #512]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023a0:	2104      	movs	r1, #4
 80023a2:	430a      	orrs	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023a6:	4b7e      	ldr	r3, [pc, #504]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023aa:	4b7d      	ldr	r3, [pc, #500]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd5d 	bl	8000e70 <HAL_GetTick>
 80023b6:	0003      	movs	r3, r0
 80023b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023bc:	f7fe fd58 	bl	8000e70 <HAL_GetTick>
 80023c0:	0002      	movs	r2, r0
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e0e3      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023ce:	4b74      	ldr	r3, [pc, #464]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d2:	2202      	movs	r2, #2
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0f1      	beq.n	80023bc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023d8:	4b71      	ldr	r3, [pc, #452]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023dc:	22f8      	movs	r2, #248	@ 0xf8
 80023de:	4393      	bics	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	00da      	lsls	r2, r3, #3
 80023e8:	4b6d      	ldr	r3, [pc, #436]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ee:	e034      	b.n	800245a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	3305      	adds	r3, #5
 80023f6:	d111      	bne.n	800241c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023f8:	4b69      	ldr	r3, [pc, #420]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023fc:	4b68      	ldr	r3, [pc, #416]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80023fe:	2104      	movs	r1, #4
 8002400:	438a      	bics	r2, r1
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002404:	4b66      	ldr	r3, [pc, #408]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002408:	22f8      	movs	r2, #248	@ 0xf8
 800240a:	4393      	bics	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	00da      	lsls	r2, r3, #3
 8002414:	4b62      	ldr	r3, [pc, #392]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002416:	430a      	orrs	r2, r1
 8002418:	635a      	str	r2, [r3, #52]	@ 0x34
 800241a:	e01e      	b.n	800245a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800241c:	4b60      	ldr	r3, [pc, #384]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800241e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002420:	4b5f      	ldr	r3, [pc, #380]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002422:	2104      	movs	r1, #4
 8002424:	430a      	orrs	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002428:	4b5d      	ldr	r3, [pc, #372]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800242a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800242c:	4b5c      	ldr	r3, [pc, #368]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800242e:	2101      	movs	r1, #1
 8002430:	438a      	bics	r2, r1
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fd1c 	bl	8000e70 <HAL_GetTick>
 8002438:	0003      	movs	r3, r0
 800243a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800243e:	f7fe fd17 	bl	8000e70 <HAL_GetTick>
 8002442:	0002      	movs	r2, r0
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0a2      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002450:	4b53      	ldr	r3, [pc, #332]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002454:	2202      	movs	r2, #2
 8002456:	4013      	ands	r3, r2
 8002458:	d1f1      	bne.n	800243e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d100      	bne.n	8002464 <HAL_RCC_OscConfig+0x4e4>
 8002462:	e097      	b.n	8002594 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b4e      	ldr	r3, [pc, #312]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	220c      	movs	r2, #12
 800246a:	4013      	ands	r3, r2
 800246c:	2b08      	cmp	r3, #8
 800246e:	d100      	bne.n	8002472 <HAL_RCC_OscConfig+0x4f2>
 8002470:	e06b      	b.n	800254a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d14c      	bne.n	8002514 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002480:	494a      	ldr	r1, [pc, #296]	@ (80025ac <HAL_RCC_OscConfig+0x62c>)
 8002482:	400a      	ands	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fcf3 	bl	8000e70 <HAL_GetTick>
 800248a:	0003      	movs	r3, r0
 800248c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fcee 	bl	8000e70 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e079      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	049b      	lsls	r3, r3, #18
 80024aa:	4013      	ands	r3, r2
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ae:	4b3c      	ldr	r3, [pc, #240]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b2:	220f      	movs	r2, #15
 80024b4:	4393      	bics	r3, r2
 80024b6:	0019      	movs	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024bc:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024be:	430a      	orrs	r2, r1
 80024c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024c2:	4b37      	ldr	r3, [pc, #220]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a3a      	ldr	r2, [pc, #232]	@ (80025b0 <HAL_RCC_OscConfig+0x630>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d4:	431a      	orrs	r2, r3
 80024d6:	4b32      	ldr	r3, [pc, #200]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	4b30      	ldr	r3, [pc, #192]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b2f      	ldr	r3, [pc, #188]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 80024e2:	2180      	movs	r1, #128	@ 0x80
 80024e4:	0449      	lsls	r1, r1, #17
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fcc1 	bl	8000e70 <HAL_GetTick>
 80024ee:	0003      	movs	r3, r0
 80024f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fcbc 	bl	8000e70 <HAL_GetTick>
 80024f8:	0002      	movs	r2, r0
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e047      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002506:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	049b      	lsls	r3, r3, #18
 800250e:	4013      	ands	r3, r2
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x574>
 8002512:	e03f      	b.n	8002594 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800251a:	4924      	ldr	r1, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x62c>)
 800251c:	400a      	ands	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fca6 	bl	8000e70 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fca1 	bl	8000e70 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e02c      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	2380      	movs	r3, #128	@ 0x80
 8002542:	049b      	lsls	r3, r3, #18
 8002544:	4013      	ands	r3, r2
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x5aa>
 8002548:	e024      	b.n	8002594 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e01f      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002556:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_RCC_OscConfig+0x620>)
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	025b      	lsls	r3, r3, #9
 8002568:	401a      	ands	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	429a      	cmp	r2, r3
 8002570:	d10e      	bne.n	8002590 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	220f      	movs	r2, #15
 8002576:	401a      	ands	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d107      	bne.n	8002590 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	23f0      	movs	r3, #240	@ 0xf0
 8002584:	039b      	lsls	r3, r3, #14
 8002586:	401a      	ands	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b008      	add	sp, #32
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	00001388 	.word	0x00001388
 80025a8:	efffffff 	.word	0xefffffff
 80025ac:	feffffff 	.word	0xfeffffff
 80025b0:	ffc2ffff 	.word	0xffc2ffff

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0b3      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d911      	bls.n	80025fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b58      	ldr	r3, [pc, #352]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e09a      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2202      	movs	r2, #2
 8002600:	4013      	ands	r3, r2
 8002602:	d015      	beq.n	8002630 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2204      	movs	r2, #4
 800260a:	4013      	ands	r3, r2
 800260c:	d006      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800260e:	4b4b      	ldr	r3, [pc, #300]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	4b4a      	ldr	r3, [pc, #296]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002614:	21e0      	movs	r1, #224	@ 0xe0
 8002616:	00c9      	lsls	r1, r1, #3
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b47      	ldr	r3, [pc, #284]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	22f0      	movs	r2, #240	@ 0xf0
 8002622:	4393      	bics	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	4b44      	ldr	r3, [pc, #272]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2201      	movs	r2, #1
 8002636:	4013      	ands	r3, r2
 8002638:	d040      	beq.n	80026bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	4013      	ands	r3, r2
 800264c:	d114      	bne.n	8002678 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e06e      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b38      	ldr	r3, [pc, #224]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	049b      	lsls	r3, r3, #18
 8002662:	4013      	ands	r3, r2
 8002664:	d108      	bne.n	8002678 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e062      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e05b      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002678:	4b30      	ldr	r3, [pc, #192]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2203      	movs	r2, #3
 800267e:	4393      	bics	r3, r2
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7fe fbf0 	bl	8000e70 <HAL_GetTick>
 8002690:	0003      	movs	r3, r0
 8002692:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002694:	e009      	b.n	80026aa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7fe fbeb 	bl	8000e70 <HAL_GetTick>
 800269a:	0002      	movs	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <HAL_RCC_ClockConfig+0x18c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e042      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b24      	ldr	r3, [pc, #144]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	220c      	movs	r2, #12
 80026b0:	401a      	ands	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1ec      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d211      	bcs.n	80026ee <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	4b16      	ldr	r3, [pc, #88]	@ (8002738 <HAL_RCC_ClockConfig+0x184>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e020      	b.n	8002730 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2204      	movs	r2, #4
 80026f4:	4013      	ands	r3, r2
 80026f6:	d009      	beq.n	800270c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026f8:	4b10      	ldr	r3, [pc, #64]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a11      	ldr	r2, [pc, #68]	@ (8002744 <HAL_RCC_ClockConfig+0x190>)
 80026fe:	4013      	ands	r3, r2
 8002700:	0019      	movs	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	4b0d      	ldr	r3, [pc, #52]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800270c:	f000 f82e 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8002710:	0001      	movs	r1, r0
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_RCC_ClockConfig+0x188>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	220f      	movs	r2, #15
 800271a:	4013      	ands	r3, r2
 800271c:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_RCC_ClockConfig+0x194>)
 800271e:	5cd3      	ldrb	r3, [r2, r3]
 8002720:	000a      	movs	r2, r1
 8002722:	40da      	lsrs	r2, r3
 8002724:	4b09      	ldr	r3, [pc, #36]	@ (800274c <HAL_RCC_ClockConfig+0x198>)
 8002726:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002728:	2003      	movs	r0, #3
 800272a:	f7fe fb5b 	bl	8000de4 <HAL_InitTick>
  
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b004      	add	sp, #16
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
 8002740:	00001388 	.word	0x00001388
 8002744:	fffff8ff 	.word	0xfffff8ff
 8002748:	080046e0 	.word	0x080046e0
 800274c:	20000064 	.word	0x20000064

08002750 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_RCC_EnableCSS+0x18>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_RCC_EnableCSS+0x18>)
 800275a:	2180      	movs	r1, #128	@ 0x80
 800275c:	0309      	lsls	r1, r1, #12
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
}
 8002762:	46c0      	nop			@ (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002786:	4b20      	ldr	r3, [pc, #128]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	220c      	movs	r2, #12
 8002790:	4013      	ands	r3, r2
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x30>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x36>
 800279a:	e02c      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	e02c      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	220f      	movs	r2, #15
 80027a8:	4013      	ands	r3, r2
 80027aa:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027b0:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	220f      	movs	r2, #15
 80027b6:	4013      	ands	r3, r2
 80027b8:	4a16      	ldr	r2, [pc, #88]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xa8>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	4013      	ands	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4810      	ldr	r0, [pc, #64]	@ (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027cc:	f7fd fc9c 	bl	8000108 <__udivsi3>
 80027d0:	0003      	movs	r3, r0
 80027d2:	001a      	movs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4353      	muls	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e009      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	000a      	movs	r2, r1
 80027e0:	0152      	lsls	r2, r2, #5
 80027e2:	1a52      	subs	r2, r2, r1
 80027e4:	0193      	lsls	r3, r2, #6
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	185b      	adds	r3, r3, r1
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
      break;
 80027f4:	e002      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f6:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027f8:	613b      	str	r3, [r7, #16]
      break;
 80027fa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027fc:	693b      	ldr	r3, [r7, #16]
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	40021000 	.word	0x40021000
 800280c:	007a1200 	.word	0x007a1200
 8002810:	080046f8 	.word	0x080046f8
 8002814:	08004708 	.word	0x08004708

08002818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b02      	ldr	r3, [pc, #8]	@ (8002828 <HAL_RCC_GetHCLKFreq+0x10>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	20000064 	.word	0x20000064

0800282c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002830:	f7ff fff2 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002834:	0001      	movs	r1, r0
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	2207      	movs	r2, #7
 800283e:	4013      	ands	r3, r2
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	40d9      	lsrs	r1, r3
 8002846:	000b      	movs	r3, r1
}    
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	40021000 	.word	0x40021000
 8002854:	080046f0 	.word	0x080046f0

08002858 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800285c:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <HAL_RCC_NMI_IRQHandler+0x20>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	4013      	ands	r3, r2
 8002864:	2b80      	cmp	r3, #128	@ 0x80
 8002866:	d104      	bne.n	8002872 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002868:	f000 f80a 	bl	8002880 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_RCC_NMI_IRQHandler+0x24>)
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	701a      	strb	r2, [r3, #0]
  }
}
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000
 800287c:	4002100a 	.word	0x4002100a

08002880 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	4013      	ands	r3, r2
 80028a6:	d100      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028a8:	e08e      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80028aa:	2017      	movs	r0, #23
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	055b      	lsls	r3, r3, #21
 80028ba:	4013      	ands	r3, r2
 80028bc:	d110      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	4b54      	ldr	r3, [pc, #336]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	4b53      	ldr	r3, [pc, #332]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0549      	lsls	r1, r1, #21
 80028c8:	430a      	orrs	r2, r1
 80028ca:	61da      	str	r2, [r3, #28]
 80028cc:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	055b      	lsls	r3, r3, #21
 80028d4:	4013      	ands	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
 80028d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028da:	183b      	adds	r3, r7, r0
 80028dc:	2201      	movs	r2, #1
 80028de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	@ 0x80
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4013      	ands	r3, r2
 80028ea:	d11a      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ec:	4b49      	ldr	r3, [pc, #292]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b48      	ldr	r3, [pc, #288]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80028f2:	2180      	movs	r1, #128	@ 0x80
 80028f4:	0049      	lsls	r1, r1, #1
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fab9 	bl	8000e70 <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fab4 	bl	8000e70 <HAL_GetTick>
 8002908:	0002      	movs	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e077      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b3f      	ldr	r3, [pc, #252]	@ (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	2380      	movs	r3, #128	@ 0x80
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4013      	ands	r3, r2
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002924:	6a1a      	ldr	r2, [r3, #32]
 8002926:	23c0      	movs	r3, #192	@ 0xc0
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4013      	ands	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d034      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	23c0      	movs	r3, #192	@ 0xc0
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4013      	ands	r3, r2
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	429a      	cmp	r2, r3
 8002942:	d02c      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002944:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a33      	ldr	r2, [pc, #204]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800294e:	4b30      	ldr	r3, [pc, #192]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	4b2f      	ldr	r3, [pc, #188]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002954:	2180      	movs	r1, #128	@ 0x80
 8002956:	0249      	lsls	r1, r1, #9
 8002958:	430a      	orrs	r2, r1
 800295a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800295c:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800295e:	6a1a      	ldr	r2, [r3, #32]
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002962:	492e      	ldr	r1, [pc, #184]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002964:	400a      	ands	r2, r1
 8002966:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002968:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002976:	f7fe fa7b 	bl	8000e70 <HAL_GetTick>
 800297a:	0003      	movs	r3, r0
 800297c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297e:	e009      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7fe fa76 	bl	8000e70 <HAL_GetTick>
 8002984:	0002      	movs	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	4a25      	ldr	r2, [pc, #148]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e038      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	4b1e      	ldr	r3, [pc, #120]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d0f0      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	0019      	movs	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4b18      	ldr	r3, [pc, #96]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ae:	430a      	orrs	r2, r1
 80029b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b2:	2317      	movs	r3, #23
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029bc:	4b14      	ldr	r3, [pc, #80]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	4b13      	ldr	r3, [pc, #76]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c2:	4918      	ldr	r1, [pc, #96]	@ (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80029c4:	400a      	ands	r2, r1
 80029c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	d009      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	2203      	movs	r2, #3
 80029d8:	4393      	bics	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2220      	movs	r2, #32
 80029ec:	4013      	ands	r3, r2
 80029ee:	d009      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029f0:	4b07      	ldr	r3, [pc, #28]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f4:	2210      	movs	r2, #16
 80029f6:	4393      	bics	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a00:	430a      	orrs	r2, r1
 8002a02:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b006      	add	sp, #24
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40007000 	.word	0x40007000
 8002a18:	fffffcff 	.word	0xfffffcff
 8002a1c:	fffeffff 	.word	0xfffeffff
 8002a20:	00001388 	.word	0x00001388
 8002a24:	efffffff 	.word	0xefffffff

08002a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e042      	b.n	8002ac0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223d      	movs	r2, #61	@ 0x3d
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d107      	bne.n	8002a56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223c      	movs	r2, #60	@ 0x3c
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f7fe f8d9 	bl	8000c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223d      	movs	r2, #61	@ 0x3d
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	0019      	movs	r1, r3
 8002a68:	0010      	movs	r0, r2
 8002a6a:	f000 f901 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2246      	movs	r2, #70	@ 0x46
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223e      	movs	r2, #62	@ 0x3e
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	223f      	movs	r2, #63	@ 0x3f
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2240      	movs	r2, #64	@ 0x40
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2241      	movs	r2, #65	@ 0x41
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2242      	movs	r2, #66	@ 0x42
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2243      	movs	r2, #67	@ 0x43
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2244      	movs	r2, #68	@ 0x44
 8002aaa:	2101      	movs	r1, #1
 8002aac:	5499      	strb	r1, [r3, r2]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2245      	movs	r2, #69	@ 0x45
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223d      	movs	r2, #61	@ 0x3d
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	230f      	movs	r3, #15
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223c      	movs	r2, #60	@ 0x3c
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_ConfigClockSource+0x20>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0bc      	b.n	8002c62 <HAL_TIM_ConfigClockSource+0x19a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	223c      	movs	r2, #60	@ 0x3c
 8002aec:	2101      	movs	r1, #1
 8002aee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	223d      	movs	r2, #61	@ 0x3d
 8002af4:	2102      	movs	r1, #2
 8002af6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2277      	movs	r2, #119	@ 0x77
 8002b04:	4393      	bics	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4a58      	ldr	r2, [pc, #352]	@ (8002c6c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2280      	movs	r2, #128	@ 0x80
 8002b1e:	0192      	lsls	r2, r2, #6
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d040      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xde>
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	0192      	lsls	r2, r2, #6
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d900      	bls.n	8002b2e <HAL_TIM_ConfigClockSource+0x66>
 8002b2c:	e088      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b2e:	2280      	movs	r2, #128	@ 0x80
 8002b30:	0152      	lsls	r2, r2, #5
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d100      	bne.n	8002b38 <HAL_TIM_ConfigClockSource+0x70>
 8002b36:	e088      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x182>
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	0152      	lsls	r2, r2, #5
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d900      	bls.n	8002b42 <HAL_TIM_ConfigClockSource+0x7a>
 8002b40:	e07e      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b42:	2b70      	cmp	r3, #112	@ 0x70
 8002b44:	d018      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xb0>
 8002b46:	d900      	bls.n	8002b4a <HAL_TIM_ConfigClockSource+0x82>
 8002b48:	e07a      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b4a:	2b60      	cmp	r3, #96	@ 0x60
 8002b4c:	d04f      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x126>
 8002b4e:	d900      	bls.n	8002b52 <HAL_TIM_ConfigClockSource+0x8a>
 8002b50:	e076      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b52:	2b50      	cmp	r3, #80	@ 0x50
 8002b54:	d03b      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x106>
 8002b56:	d900      	bls.n	8002b5a <HAL_TIM_ConfigClockSource+0x92>
 8002b58:	e072      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b5a:	2b40      	cmp	r3, #64	@ 0x40
 8002b5c:	d057      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0x146>
 8002b5e:	d900      	bls.n	8002b62 <HAL_TIM_ConfigClockSource+0x9a>
 8002b60:	e06e      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b62:	2b30      	cmp	r3, #48	@ 0x30
 8002b64:	d063      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x166>
 8002b66:	d86b      	bhi.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b68:	2b20      	cmp	r3, #32
 8002b6a:	d060      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x166>
 8002b6c:	d868      	bhi.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d05d      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x166>
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d05b      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x166>
 8002b76:	e063      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b88:	f000 f970 	bl	8002e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2277      	movs	r2, #119	@ 0x77
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e052      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb6:	f000 f959 	bl	8002e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2180      	movs	r1, #128	@ 0x80
 8002bc6:	01c9      	lsls	r1, r1, #7
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	609a      	str	r2, [r3, #8]
      break;
 8002bcc:	e03e      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f000 f8cc 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2150      	movs	r1, #80	@ 0x50
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f926 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e02e      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	f000 f8ea 	bl	8002dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2160      	movs	r1, #96	@ 0x60
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 f916 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002c0c:	e01e      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	f000 f8ac 	bl	8002d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2140      	movs	r1, #64	@ 0x40
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f906 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002c2c:	e00e      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f000 f8fd 	bl	8002e38 <TIM_ITRx_SetConfig>
      break;
 8002c3e:	e005      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c40:	230f      	movs	r3, #15
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
      break;
 8002c48:	e000      	b.n	8002c4c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c4a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	223d      	movs	r2, #61	@ 0x3d
 8002c50:	2101      	movs	r1, #1
 8002c52:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223c      	movs	r2, #60	@ 0x3c
 8002c58:	2100      	movs	r1, #0
 8002c5a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b004      	add	sp, #16
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	ffff00ff 	.word	0xffff00ff

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a36      	ldr	r2, [pc, #216]	@ (8002d5c <TIM_Base_SetConfig+0xec>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_Base_SetConfig+0x20>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a35      	ldr	r2, [pc, #212]	@ (8002d60 <TIM_Base_SetConfig+0xf0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d108      	bne.n	8002ca2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2270      	movs	r2, #112	@ 0x70
 8002c94:	4393      	bics	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d5c <TIM_Base_SetConfig+0xec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	@ (8002d60 <TIM_Base_SetConfig+0xf0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00f      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d64 <TIM_Base_SetConfig+0xf4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d68 <TIM_Base_SetConfig+0xf8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a29      	ldr	r2, [pc, #164]	@ (8002d6c <TIM_Base_SetConfig+0xfc>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d003      	beq.n	8002cd2 <TIM_Base_SetConfig+0x62>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <TIM_Base_SetConfig+0x100>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d108      	bne.n	8002ce4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <TIM_Base_SetConfig+0x104>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2280      	movs	r2, #128	@ 0x80
 8002ce8:	4393      	bics	r3, r2
 8002cea:	001a      	movs	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	@ (8002d5c <TIM_Base_SetConfig+0xec>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_Base_SetConfig+0xba>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <TIM_Base_SetConfig+0xf8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0xba>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <TIM_Base_SetConfig+0xfc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0xba>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <TIM_Base_SetConfig+0x100>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d103      	bne.n	8002d32 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d106      	bne.n	8002d52 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	611a      	str	r2, [r3, #16]
  }
}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40002000 	.word	0x40002000
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	40014400 	.word	0x40014400
 8002d70:	40014800 	.word	0x40014800
 8002d74:	fffffcff 	.word	0xfffffcff

08002d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	4393      	bics	r3, r2
 8002d92:	001a      	movs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	22f0      	movs	r2, #240	@ 0xf0
 8002da2:	4393      	bics	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	220a      	movs	r2, #10
 8002db4:	4393      	bics	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	621a      	str	r2, [r3, #32]
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b006      	add	sp, #24
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2210      	movs	r2, #16
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <TIM_TI2_ConfigInputStage+0x60>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	031b      	lsls	r3, r3, #12
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	22a0      	movs	r2, #160	@ 0xa0
 8002e10:	4393      	bics	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	621a      	str	r2, [r3, #32]
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b006      	add	sp, #24
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	ffff0fff 	.word	0xffff0fff

08002e38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2270      	movs	r2, #112	@ 0x70
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	2207      	movs	r2, #7
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	609a      	str	r2, [r3, #8]
}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b004      	add	sp, #16
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	4a09      	ldr	r2, [pc, #36]	@ (8002ea8 <TIM_ETR_SetConfig+0x3c>)
 8002e84:	4013      	ands	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	021a      	lsls	r2, r3, #8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	ffff00ff 	.word	0xffff00ff

08002eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	223c      	movs	r2, #60	@ 0x3c
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e041      	b.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	223c      	movs	r2, #60	@ 0x3c
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223d      	movs	r2, #61	@ 0x3d
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2270      	movs	r2, #112	@ 0x70
 8002ee8:	4393      	bics	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a13      	ldr	r2, [pc, #76]	@ (8002f50 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	@ (8002f54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a10      	ldr	r2, [pc, #64]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d10c      	bne.n	8002f36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2280      	movs	r2, #128	@ 0x80
 8002f20:	4393      	bics	r3, r2
 8002f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	223d      	movs	r2, #61	@ 0x3d
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	223c      	movs	r2, #60	@ 0x3c
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40014000 	.word	0x40014000

08002f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e044      	b.n	8002ff8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2278      	movs	r2, #120	@ 0x78
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7fd fe61 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2224      	movs	r2, #36	@ 0x24
 8002f8a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2101      	movs	r1, #1
 8002f98:	438a      	bics	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 fcec 	bl	8003984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fba8 	bl	8003704 <UART_SetConfig>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e01c      	b.n	8002ff8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	490d      	ldr	r1, [pc, #52]	@ (8003000 <HAL_UART_Init+0xa4>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2108      	movs	r1, #8
 8002fda:	438a      	bics	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f000 fd7b 	bl	8003aec <UART_CheckIdleState>
 8002ff6:	0003      	movs	r3, r0
}
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	fffff7ff 	.word	0xfffff7ff

08003004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003018:	2b20      	cmp	r3, #32
 800301a:	d000      	beq.n	800301e <HAL_UART_Transmit+0x1a>
 800301c:	e08c      	b.n	8003138 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_UART_Transmit+0x28>
 8003024:	1dbb      	adds	r3, r7, #6
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e084      	b.n	800313a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	015b      	lsls	r3, r3, #5
 8003038:	429a      	cmp	r2, r3
 800303a:	d109      	bne.n	8003050 <HAL_UART_Transmit+0x4c>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d105      	bne.n	8003050 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2201      	movs	r2, #1
 8003048:	4013      	ands	r3, r2
 800304a:	d001      	beq.n	8003050 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e074      	b.n	800313a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2284      	movs	r2, #132	@ 0x84
 8003054:	2100      	movs	r1, #0
 8003056:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2221      	movs	r2, #33	@ 0x21
 800305c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305e:	f7fd ff07 	bl	8000e70 <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1dba      	adds	r2, r7, #6
 800306a:	2150      	movs	r1, #80	@ 0x50
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1dba      	adds	r2, r7, #6
 8003074:	2152      	movs	r1, #82	@ 0x52
 8003076:	8812      	ldrh	r2, [r2, #0]
 8003078:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	015b      	lsls	r3, r3, #5
 8003082:	429a      	cmp	r2, r3
 8003084:	d108      	bne.n	8003098 <HAL_UART_Transmit+0x94>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	61bb      	str	r3, [r7, #24]
 8003096:	e003      	b.n	80030a0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030a0:	e02f      	b.n	8003102 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	0013      	movs	r3, r2
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	@ 0x80
 80030b0:	f000 fdc4 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d004      	beq.n	80030c2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e03b      	b.n	800313a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	881a      	ldrh	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	05d2      	lsls	r2, r2, #23
 80030d2:	0dd2      	lsrs	r2, r2, #23
 80030d4:	b292      	uxth	r2, r2
 80030d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	3302      	adds	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e007      	b.n	80030f0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2252      	movs	r2, #82	@ 0x52
 80030f4:	5a9b      	ldrh	r3, [r3, r2]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b299      	uxth	r1, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2252      	movs	r2, #82	@ 0x52
 8003100:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2252      	movs	r2, #82	@ 0x52
 8003106:	5a9b      	ldrh	r3, [r3, r2]
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1c9      	bne.n	80030a2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	0013      	movs	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	2140      	movs	r1, #64	@ 0x40
 800311c:	f000 fd8e 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d004      	beq.n	800312e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e005      	b.n	800313a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2220      	movs	r2, #32
 8003132:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	e000      	b.n	800313a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003138:	2302      	movs	r3, #2
  }
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b008      	add	sp, #32
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b0ab      	sub	sp, #172	@ 0xac
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	22a4      	movs	r2, #164	@ 0xa4
 8003154:	18b9      	adds	r1, r7, r2
 8003156:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	20a0      	movs	r0, #160	@ 0xa0
 8003160:	1839      	adds	r1, r7, r0
 8003162:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	219c      	movs	r1, #156	@ 0x9c
 800316c:	1879      	adds	r1, r7, r1
 800316e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003170:	0011      	movs	r1, r2
 8003172:	18bb      	adds	r3, r7, r2
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a99      	ldr	r2, [pc, #612]	@ (80033dc <HAL_UART_IRQHandler+0x298>)
 8003178:	4013      	ands	r3, r2
 800317a:	2298      	movs	r2, #152	@ 0x98
 800317c:	18bc      	adds	r4, r7, r2
 800317e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003180:	18bb      	adds	r3, r7, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d114      	bne.n	80031b2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003188:	187b      	adds	r3, r7, r1
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	d00f      	beq.n	80031b2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003192:	183b      	adds	r3, r7, r0
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2220      	movs	r2, #32
 8003198:	4013      	ands	r3, r2
 800319a:	d00a      	beq.n	80031b2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d100      	bne.n	80031a6 <HAL_UART_IRQHandler+0x62>
 80031a4:	e286      	b.n	80036b4 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	0010      	movs	r0, r2
 80031ae:	4798      	blx	r3
      }
      return;
 80031b0:	e280      	b.n	80036b4 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031b2:	2398      	movs	r3, #152	@ 0x98
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d100      	bne.n	80031be <HAL_UART_IRQHandler+0x7a>
 80031bc:	e114      	b.n	80033e8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031be:	239c      	movs	r3, #156	@ 0x9c
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	d106      	bne.n	80031d8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031ca:	23a0      	movs	r3, #160	@ 0xa0
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a83      	ldr	r2, [pc, #524]	@ (80033e0 <HAL_UART_IRQHandler+0x29c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	d100      	bne.n	80031d8 <HAL_UART_IRQHandler+0x94>
 80031d6:	e107      	b.n	80033e8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031d8:	23a4      	movs	r3, #164	@ 0xa4
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2201      	movs	r2, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d012      	beq.n	800320a <HAL_UART_IRQHandler+0xc6>
 80031e4:	23a0      	movs	r3, #160	@ 0xa0
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	d00b      	beq.n	800320a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2284      	movs	r2, #132	@ 0x84
 80031fe:	589b      	ldr	r3, [r3, r2]
 8003200:	2201      	movs	r2, #1
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2184      	movs	r1, #132	@ 0x84
 8003208:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800320a:	23a4      	movs	r3, #164	@ 0xa4
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2202      	movs	r2, #2
 8003212:	4013      	ands	r3, r2
 8003214:	d011      	beq.n	800323a <HAL_UART_IRQHandler+0xf6>
 8003216:	239c      	movs	r3, #156	@ 0x9c
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2201      	movs	r2, #1
 800321e:	4013      	ands	r3, r2
 8003220:	d00b      	beq.n	800323a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2202      	movs	r2, #2
 8003228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2284      	movs	r2, #132	@ 0x84
 800322e:	589b      	ldr	r3, [r3, r2]
 8003230:	2204      	movs	r2, #4
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2184      	movs	r1, #132	@ 0x84
 8003238:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800323a:	23a4      	movs	r3, #164	@ 0xa4
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2204      	movs	r2, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d011      	beq.n	800326a <HAL_UART_IRQHandler+0x126>
 8003246:	239c      	movs	r3, #156	@ 0x9c
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2201      	movs	r2, #1
 800324e:	4013      	ands	r3, r2
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	@ 0x84
 800325e:	589b      	ldr	r3, [r3, r2]
 8003260:	2202      	movs	r2, #2
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2184      	movs	r1, #132	@ 0x84
 8003268:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800326a:	23a4      	movs	r3, #164	@ 0xa4
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2208      	movs	r2, #8
 8003272:	4013      	ands	r3, r2
 8003274:	d017      	beq.n	80032a6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003276:	23a0      	movs	r3, #160	@ 0xa0
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2220      	movs	r2, #32
 800327e:	4013      	ands	r3, r2
 8003280:	d105      	bne.n	800328e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003282:	239c      	movs	r3, #156	@ 0x9c
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2201      	movs	r2, #1
 800328a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800328c:	d00b      	beq.n	80032a6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2284      	movs	r2, #132	@ 0x84
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	2208      	movs	r2, #8
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2184      	movs	r1, #132	@ 0x84
 80032a4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032a6:	23a4      	movs	r3, #164	@ 0xa4
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4013      	ands	r3, r2
 80032b2:	d013      	beq.n	80032dc <HAL_UART_IRQHandler+0x198>
 80032b4:	23a0      	movs	r3, #160	@ 0xa0
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	04db      	lsls	r3, r3, #19
 80032be:	4013      	ands	r3, r2
 80032c0:	d00c      	beq.n	80032dc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2280      	movs	r2, #128	@ 0x80
 80032c8:	0112      	lsls	r2, r2, #4
 80032ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2284      	movs	r2, #132	@ 0x84
 80032d0:	589b      	ldr	r3, [r3, r2]
 80032d2:	2220      	movs	r2, #32
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2184      	movs	r1, #132	@ 0x84
 80032da:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2284      	movs	r2, #132	@ 0x84
 80032e0:	589b      	ldr	r3, [r3, r2]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d100      	bne.n	80032e8 <HAL_UART_IRQHandler+0x1a4>
 80032e6:	e1e7      	b.n	80036b8 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e8:	23a4      	movs	r3, #164	@ 0xa4
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2220      	movs	r2, #32
 80032f0:	4013      	ands	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f4:	23a0      	movs	r3, #160	@ 0xa0
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2220      	movs	r2, #32
 80032fc:	4013      	ands	r3, r2
 80032fe:	d008      	beq.n	8003312 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	0010      	movs	r0, r2
 8003310:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2284      	movs	r2, #132	@ 0x84
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	2194      	movs	r1, #148	@ 0x94
 800331a:	187a      	adds	r2, r7, r1
 800331c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2240      	movs	r2, #64	@ 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d004      	beq.n	8003336 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800332c:	187b      	adds	r3, r7, r1
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2228      	movs	r2, #40	@ 0x28
 8003332:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003334:	d047      	beq.n	80033c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 fda5 	bl	8003e88 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2240      	movs	r2, #64	@ 0x40
 8003346:	4013      	ands	r3, r2
 8003348:	2b40      	cmp	r3, #64	@ 0x40
 800334a:	d137      	bne.n	80033bc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334c:	f3ef 8310 	mrs	r3, PRIMASK
 8003350:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003354:	2090      	movs	r0, #144	@ 0x90
 8003356:	183a      	adds	r2, r7, r0
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	2301      	movs	r3, #1
 800335c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			@ (mov r8, r8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2140      	movs	r1, #64	@ 0x40
 8003372:	438a      	bics	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	183b      	adds	r3, r7, r0
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	2b00      	cmp	r3, #0
 800338a:	d012      	beq.n	80033b2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_UART_IRQHandler+0x2a0>)
 8003392:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003398:	0018      	movs	r0, r3
 800339a:	f7fe fb33 	bl	8001a04 <HAL_DMA_Abort_IT>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d01a      	beq.n	80033d8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ac:	0018      	movs	r0, r3
 80033ae:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e012      	b.n	80033d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f000 f99d 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ba:	e00d      	b.n	80033d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	0018      	movs	r0, r3
 80033c0:	f000 f998 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e008      	b.n	80033d8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f993 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2284      	movs	r2, #132	@ 0x84
 80033d2:	2100      	movs	r1, #0
 80033d4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033d6:	e16f      	b.n	80036b8 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	46c0      	nop			@ (mov r8, r8)
    return;
 80033da:	e16d      	b.n	80036b8 <HAL_UART_IRQHandler+0x574>
 80033dc:	0000080f 	.word	0x0000080f
 80033e0:	04000120 	.word	0x04000120
 80033e4:	08003f51 	.word	0x08003f51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d000      	beq.n	80033f2 <HAL_UART_IRQHandler+0x2ae>
 80033f0:	e139      	b.n	8003666 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033f2:	23a4      	movs	r3, #164	@ 0xa4
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	4013      	ands	r3, r2
 80033fc:	d100      	bne.n	8003400 <HAL_UART_IRQHandler+0x2bc>
 80033fe:	e132      	b.n	8003666 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003400:	23a0      	movs	r3, #160	@ 0xa0
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2210      	movs	r2, #16
 8003408:	4013      	ands	r3, r2
 800340a:	d100      	bne.n	800340e <HAL_UART_IRQHandler+0x2ca>
 800340c:	e12b      	b.n	8003666 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2240      	movs	r2, #64	@ 0x40
 800341e:	4013      	ands	r3, r2
 8003420:	2b40      	cmp	r3, #64	@ 0x40
 8003422:	d000      	beq.n	8003426 <HAL_UART_IRQHandler+0x2e2>
 8003424:	e09f      	b.n	8003566 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	217e      	movs	r1, #126	@ 0x7e
 8003430:	187b      	adds	r3, r7, r1
 8003432:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003434:	187b      	adds	r3, r7, r1
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d100      	bne.n	800343e <HAL_UART_IRQHandler+0x2fa>
 800343c:	e13e      	b.n	80036bc <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2258      	movs	r2, #88	@ 0x58
 8003442:	5a9b      	ldrh	r3, [r3, r2]
 8003444:	187a      	adds	r2, r7, r1
 8003446:	8812      	ldrh	r2, [r2, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d300      	bcc.n	800344e <HAL_UART_IRQHandler+0x30a>
 800344c:	e136      	b.n	80036bc <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	187a      	adds	r2, r7, r1
 8003452:	215a      	movs	r1, #90	@ 0x5a
 8003454:	8812      	ldrh	r2, [r2, #0]
 8003456:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b20      	cmp	r3, #32
 8003460:	d06f      	beq.n	8003542 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800346c:	2301      	movs	r3, #1
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4992      	ldr	r1, [pc, #584]	@ (80036cc <HAL_UART_IRQHandler+0x588>)
 8003484:	400a      	ands	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003494:	f3ef 8310 	mrs	r3, PRIMASK
 8003498:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800349a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349c:	677b      	str	r3, [r7, #116]	@ 0x74
 800349e:	2301      	movs	r3, #1
 80034a0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	438a      	bics	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034bc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c0:	f383 8810 	msr	PRIMASK, r3
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80034cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80034d0:	2301      	movs	r3, #1
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2140      	movs	r1, #64	@ 0x40
 80034e8:	438a      	bics	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ee:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2280      	movs	r2, #128	@ 0x80
 80034fc:	2120      	movs	r1, #32
 80034fe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003506:	f3ef 8310 	mrs	r3, PRIMASK
 800350a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800350c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003510:	2301      	movs	r3, #1
 8003512:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			@ (mov r8, r8)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2110      	movs	r1, #16
 8003528:	438a      	bics	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003532:	f383 8810 	msr	PRIMASK, r3
}
 8003536:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353c:	0018      	movs	r0, r3
 800353e:	f7fe fa29 	bl	8001994 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2258      	movs	r2, #88	@ 0x58
 800354c:	5a9a      	ldrh	r2, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	215a      	movs	r1, #90	@ 0x5a
 8003552:	5a5b      	ldrh	r3, [r3, r1]
 8003554:	b29b      	uxth	r3, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0011      	movs	r1, r2
 800355e:	0018      	movs	r0, r3
 8003560:	f7fd f8b4 	bl	80006cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003564:	e0aa      	b.n	80036bc <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2258      	movs	r2, #88	@ 0x58
 800356a:	5a99      	ldrh	r1, [r3, r2]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	225a      	movs	r2, #90	@ 0x5a
 8003570:	5a9b      	ldrh	r3, [r3, r2]
 8003572:	b29a      	uxth	r2, r3
 8003574:	208e      	movs	r0, #142	@ 0x8e
 8003576:	183b      	adds	r3, r7, r0
 8003578:	1a8a      	subs	r2, r1, r2
 800357a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	225a      	movs	r2, #90	@ 0x5a
 8003580:	5a9b      	ldrh	r3, [r3, r2]
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d100      	bne.n	800358a <HAL_UART_IRQHandler+0x446>
 8003588:	e09a      	b.n	80036c0 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800358a:	183b      	adds	r3, r7, r0
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d100      	bne.n	8003594 <HAL_UART_IRQHandler+0x450>
 8003592:	e095      	b.n	80036c0 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	60fb      	str	r3, [r7, #12]
  return(result);
 800359a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800359c:	2488      	movs	r4, #136	@ 0x88
 800359e:	193a      	adds	r2, r7, r4
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	2301      	movs	r3, #1
 80035a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			@ (mov r8, r8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4945      	ldr	r1, [pc, #276]	@ (80036d0 <HAL_UART_IRQHandler+0x58c>)
 80035ba:	400a      	ands	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035d2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	2484      	movs	r4, #132	@ 0x84
 80035d6:	193a      	adds	r2, r7, r4
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	2301      	movs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f383 8810 	msr	PRIMASK, r3
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2101      	movs	r1, #1
 80035f2:	438a      	bics	r2, r1
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	f383 8810 	msr	PRIMASK, r3
}
 8003602:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2280      	movs	r2, #128	@ 0x80
 8003608:	2120      	movs	r1, #32
 800360a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003618:	f3ef 8310 	mrs	r3, PRIMASK
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	2480      	movs	r4, #128	@ 0x80
 8003622:	193a      	adds	r2, r7, r4
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	2301      	movs	r3, #1
 8003628:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2110      	movs	r1, #16
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	193b      	adds	r3, r7, r4
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003656:	183b      	adds	r3, r7, r0
 8003658:	881a      	ldrh	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0011      	movs	r1, r2
 800365e:	0018      	movs	r0, r3
 8003660:	f7fd f834 	bl	80006cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003664:	e02c      	b.n	80036c0 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003666:	23a4      	movs	r3, #164	@ 0xa4
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2280      	movs	r2, #128	@ 0x80
 800366e:	4013      	ands	r3, r2
 8003670:	d00f      	beq.n	8003692 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003672:	23a0      	movs	r3, #160	@ 0xa0
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2280      	movs	r2, #128	@ 0x80
 800367a:	4013      	ands	r3, r2
 800367c:	d009      	beq.n	8003692 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	0010      	movs	r0, r2
 800368e:	4798      	blx	r3
    }
    return;
 8003690:	e018      	b.n	80036c4 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003692:	23a4      	movs	r3, #164	@ 0xa4
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2240      	movs	r2, #64	@ 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_UART_IRQHandler+0x582>
 800369e:	23a0      	movs	r3, #160	@ 0xa0
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2240      	movs	r2, #64	@ 0x40
 80036a6:	4013      	ands	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0018      	movs	r0, r3
 80036ae:	f000 fc66 	bl	8003f7e <UART_EndTransmit_IT>
    return;
 80036b2:	e008      	b.n	80036c6 <HAL_UART_IRQHandler+0x582>
      return;
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	e006      	b.n	80036c6 <HAL_UART_IRQHandler+0x582>
    return;
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	e004      	b.n	80036c6 <HAL_UART_IRQHandler+0x582>
      return;
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	e002      	b.n	80036c6 <HAL_UART_IRQHandler+0x582>
      return;
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	e000      	b.n	80036c6 <HAL_UART_IRQHandler+0x582>
    return;
 80036c4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b02b      	add	sp, #172	@ 0xac
 80036ca:	bd90      	pop	{r4, r7, pc}
 80036cc:	fffffeff 	.word	0xfffffeff
 80036d0:	fffffedf 	.word	0xfffffedf

080036d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800370c:	231e      	movs	r3, #30
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a8d      	ldr	r2, [pc, #564]	@ (8003968 <UART_SetConfig+0x264>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	430a      	orrs	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4a88      	ldr	r2, [pc, #544]	@ (800396c <UART_SetConfig+0x268>)
 800374a:	4013      	ands	r3, r2
 800374c:	0019      	movs	r1, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	4a7f      	ldr	r2, [pc, #508]	@ (8003970 <UART_SetConfig+0x26c>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a7b      	ldr	r2, [pc, #492]	@ (8003974 <UART_SetConfig+0x270>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d127      	bne.n	80037da <UART_SetConfig+0xd6>
 800378a:	4b7b      	ldr	r3, [pc, #492]	@ (8003978 <UART_SetConfig+0x274>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	2203      	movs	r2, #3
 8003790:	4013      	ands	r3, r2
 8003792:	2b03      	cmp	r3, #3
 8003794:	d00d      	beq.n	80037b2 <UART_SetConfig+0xae>
 8003796:	d81b      	bhi.n	80037d0 <UART_SetConfig+0xcc>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d014      	beq.n	80037c6 <UART_SetConfig+0xc2>
 800379c:	d818      	bhi.n	80037d0 <UART_SetConfig+0xcc>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <UART_SetConfig+0xa4>
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00a      	beq.n	80037bc <UART_SetConfig+0xb8>
 80037a6:	e013      	b.n	80037d0 <UART_SetConfig+0xcc>
 80037a8:	231f      	movs	r3, #31
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e021      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037b2:	231f      	movs	r3, #31
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	e01c      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037bc:	231f      	movs	r3, #31
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2204      	movs	r2, #4
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e017      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037c6:	231f      	movs	r3, #31
 80037c8:	18fb      	adds	r3, r7, r3
 80037ca:	2208      	movs	r2, #8
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e012      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037d0:	231f      	movs	r3, #31
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	2210      	movs	r2, #16
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a67      	ldr	r2, [pc, #412]	@ (800397c <UART_SetConfig+0x278>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d104      	bne.n	80037ee <UART_SetConfig+0xea>
 80037e4:	231f      	movs	r3, #31
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e003      	b.n	80037f6 <UART_SetConfig+0xf2>
 80037ee:	231f      	movs	r3, #31
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2210      	movs	r2, #16
 80037f4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69da      	ldr	r2, [r3, #28]
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	429a      	cmp	r2, r3
 8003800:	d15c      	bne.n	80038bc <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003802:	231f      	movs	r3, #31
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d015      	beq.n	8003838 <UART_SetConfig+0x134>
 800380c:	dc18      	bgt.n	8003840 <UART_SetConfig+0x13c>
 800380e:	2b04      	cmp	r3, #4
 8003810:	d00d      	beq.n	800382e <UART_SetConfig+0x12a>
 8003812:	dc15      	bgt.n	8003840 <UART_SetConfig+0x13c>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <UART_SetConfig+0x11a>
 8003818:	2b02      	cmp	r3, #2
 800381a:	d005      	beq.n	8003828 <UART_SetConfig+0x124>
 800381c:	e010      	b.n	8003840 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381e:	f7ff f805 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 8003822:	0003      	movs	r3, r0
 8003824:	61bb      	str	r3, [r7, #24]
        break;
 8003826:	e012      	b.n	800384e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003828:	4b55      	ldr	r3, [pc, #340]	@ (8003980 <UART_SetConfig+0x27c>)
 800382a:	61bb      	str	r3, [r7, #24]
        break;
 800382c:	e00f      	b.n	800384e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800382e:	f7fe ff9d 	bl	800276c <HAL_RCC_GetSysClockFreq>
 8003832:	0003      	movs	r3, r0
 8003834:	61bb      	str	r3, [r7, #24]
        break;
 8003836:	e00a      	b.n	800384e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003838:	2380      	movs	r3, #128	@ 0x80
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	61bb      	str	r3, [r7, #24]
        break;
 800383e:	e006      	b.n	800384e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003844:	231e      	movs	r3, #30
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
        break;
 800384c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d100      	bne.n	8003856 <UART_SetConfig+0x152>
 8003854:	e07a      	b.n	800394c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	005a      	lsls	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	085b      	lsrs	r3, r3, #1
 8003860:	18d2      	adds	r2, r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	0019      	movs	r1, r3
 8003868:	0010      	movs	r0, r2
 800386a:	f7fc fc4d 	bl	8000108 <__udivsi3>
 800386e:	0003      	movs	r3, r0
 8003870:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	d91c      	bls.n	80038b2 <UART_SetConfig+0x1ae>
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	2380      	movs	r3, #128	@ 0x80
 800387c:	025b      	lsls	r3, r3, #9
 800387e:	429a      	cmp	r2, r3
 8003880:	d217      	bcs.n	80038b2 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	b29a      	uxth	r2, r3
 8003886:	200e      	movs	r0, #14
 8003888:	183b      	adds	r3, r7, r0
 800388a:	210f      	movs	r1, #15
 800388c:	438a      	bics	r2, r1
 800388e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	b29b      	uxth	r3, r3
 8003896:	2207      	movs	r2, #7
 8003898:	4013      	ands	r3, r2
 800389a:	b299      	uxth	r1, r3
 800389c:	183b      	adds	r3, r7, r0
 800389e:	183a      	adds	r2, r7, r0
 80038a0:	8812      	ldrh	r2, [r2, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	183a      	adds	r2, r7, r0
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	e04c      	b.n	800394c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80038b2:	231e      	movs	r3, #30
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e047      	b.n	800394c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038bc:	231f      	movs	r3, #31
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d015      	beq.n	80038f2 <UART_SetConfig+0x1ee>
 80038c6:	dc18      	bgt.n	80038fa <UART_SetConfig+0x1f6>
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d00d      	beq.n	80038e8 <UART_SetConfig+0x1e4>
 80038cc:	dc15      	bgt.n	80038fa <UART_SetConfig+0x1f6>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <UART_SetConfig+0x1d4>
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d005      	beq.n	80038e2 <UART_SetConfig+0x1de>
 80038d6:	e010      	b.n	80038fa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038d8:	f7fe ffa8 	bl	800282c <HAL_RCC_GetPCLK1Freq>
 80038dc:	0003      	movs	r3, r0
 80038de:	61bb      	str	r3, [r7, #24]
        break;
 80038e0:	e012      	b.n	8003908 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038e2:	4b27      	ldr	r3, [pc, #156]	@ (8003980 <UART_SetConfig+0x27c>)
 80038e4:	61bb      	str	r3, [r7, #24]
        break;
 80038e6:	e00f      	b.n	8003908 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038e8:	f7fe ff40 	bl	800276c <HAL_RCC_GetSysClockFreq>
 80038ec:	0003      	movs	r3, r0
 80038ee:	61bb      	str	r3, [r7, #24]
        break;
 80038f0:	e00a      	b.n	8003908 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	61bb      	str	r3, [r7, #24]
        break;
 80038f8:	e006      	b.n	8003908 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038fe:	231e      	movs	r3, #30
 8003900:	18fb      	adds	r3, r7, r3
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
        break;
 8003906:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01e      	beq.n	800394c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	085a      	lsrs	r2, r3, #1
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	18d2      	adds	r2, r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0019      	movs	r1, r3
 800391e:	0010      	movs	r0, r2
 8003920:	f7fc fbf2 	bl	8000108 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b0f      	cmp	r3, #15
 800392c:	d90a      	bls.n	8003944 <UART_SetConfig+0x240>
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	2380      	movs	r3, #128	@ 0x80
 8003932:	025b      	lsls	r3, r3, #9
 8003934:	429a      	cmp	r2, r3
 8003936:	d205      	bcs.n	8003944 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	b29a      	uxth	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	60da      	str	r2, [r3, #12]
 8003942:	e003      	b.n	800394c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003944:	231e      	movs	r3, #30
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003958:	231e      	movs	r3, #30
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	781b      	ldrb	r3, [r3, #0]
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b008      	add	sp, #32
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	ffff69f3 	.word	0xffff69f3
 800396c:	ffffcfff 	.word	0xffffcfff
 8003970:	fffff4ff 	.word	0xfffff4ff
 8003974:	40013800 	.word	0x40013800
 8003978:	40021000 	.word	0x40021000
 800397c:	40004400 	.word	0x40004400
 8003980:	007a1200 	.word	0x007a1200

08003984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	2208      	movs	r2, #8
 8003992:	4013      	ands	r3, r2
 8003994:	d00b      	beq.n	80039ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ac8 <UART_AdvFeatureConfig+0x144>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	2201      	movs	r2, #1
 80039b4:	4013      	ands	r3, r2
 80039b6:	d00b      	beq.n	80039d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <UART_AdvFeatureConfig+0x148>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2202      	movs	r2, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ad0 <UART_AdvFeatureConfig+0x14c>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	2204      	movs	r2, #4
 80039f8:	4013      	ands	r3, r2
 80039fa:	d00b      	beq.n	8003a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	4a34      	ldr	r2, [pc, #208]	@ (8003ad4 <UART_AdvFeatureConfig+0x150>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	0019      	movs	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a18:	2210      	movs	r2, #16
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d00b      	beq.n	8003a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad8 <UART_AdvFeatureConfig+0x154>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	0019      	movs	r1, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d00b      	beq.n	8003a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	4a25      	ldr	r2, [pc, #148]	@ (8003adc <UART_AdvFeatureConfig+0x158>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	2240      	movs	r2, #64	@ 0x40
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d01d      	beq.n	8003a9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <UART_AdvFeatureConfig+0x15c>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a7e:	2380      	movs	r3, #128	@ 0x80
 8003a80:	035b      	lsls	r3, r3, #13
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d10b      	bne.n	8003a9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <UART_AdvFeatureConfig+0x160>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2280      	movs	r2, #128	@ 0x80
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae8 <UART_AdvFeatureConfig+0x164>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	ffff7fff 	.word	0xffff7fff
 8003acc:	fffdffff 	.word	0xfffdffff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	fffbffff 	.word	0xfffbffff
 8003ad8:	ffffefff 	.word	0xffffefff
 8003adc:	ffffdfff 	.word	0xffffdfff
 8003ae0:	ffefffff 	.word	0xffefffff
 8003ae4:	ff9fffff 	.word	0xff9fffff
 8003ae8:	fff7ffff 	.word	0xfff7ffff

08003aec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b092      	sub	sp, #72	@ 0x48
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2284      	movs	r2, #132	@ 0x84
 8003af8:	2100      	movs	r1, #0
 8003afa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003afc:	f7fd f9b8 	bl	8000e70 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d12c      	bne.n	8003b6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b14:	2280      	movs	r2, #128	@ 0x80
 8003b16:	0391      	lsls	r1, r2, #14
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4a46      	ldr	r2, [pc, #280]	@ (8003c34 <UART_CheckIdleState+0x148>)
 8003b1c:	9200      	str	r2, [sp, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f000 f88c 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d021      	beq.n	8003b6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b28:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b32:	2301      	movs	r3, #1
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2180      	movs	r1, #128	@ 0x80
 8003b4a:	438a      	bics	r2, r1
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	f383 8810 	msr	PRIMASK, r3
}
 8003b58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2278      	movs	r2, #120	@ 0x78
 8003b64:	2100      	movs	r1, #0
 8003b66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e05f      	b.n	8003c2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2204      	movs	r2, #4
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d146      	bne.n	8003c08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	03d1      	lsls	r1, r2, #15
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	@ (8003c34 <UART_CheckIdleState+0x148>)
 8003b84:	9200      	str	r2, [sp, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f000 f858 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003b8c:	1e03      	subs	r3, r0, #0
 8003b8e:	d03b      	beq.n	8003c08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b90:	f3ef 8310 	mrs	r3, PRIMASK
 8003b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4921      	ldr	r1, [pc, #132]	@ (8003c38 <UART_CheckIdleState+0x14c>)
 8003bb2:	400a      	ands	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bcc:	2301      	movs	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2101      	movs	r1, #1
 8003be4:	438a      	bics	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2280      	movs	r2, #128	@ 0x80
 8003bf8:	2120      	movs	r1, #32
 8003bfa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2278      	movs	r2, #120	@ 0x78
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e011      	b.n	8003c2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2280      	movs	r2, #128	@ 0x80
 8003c12:	2120      	movs	r1, #32
 8003c14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2278      	movs	r2, #120	@ 0x78
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b010      	add	sp, #64	@ 0x40
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	01ffffff 	.word	0x01ffffff
 8003c38:	fffffedf 	.word	0xfffffedf

08003c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	1dfb      	adds	r3, r7, #7
 8003c4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	e051      	b.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3301      	adds	r3, #1
 8003c52:	d04e      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c54:	f7fd f90c 	bl	8000e70 <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d302      	bcc.n	8003c6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e051      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2204      	movs	r2, #4
 8003c76:	4013      	ands	r3, r2
 8003c78:	d03b      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b80      	cmp	r3, #128	@ 0x80
 8003c7e:	d038      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b40      	cmp	r3, #64	@ 0x40
 8003c84:	d035      	beq.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d111      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2208      	movs	r2, #8
 8003c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f8f2 	bl	8003e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2284      	movs	r2, #132	@ 0x84
 8003ca8:	2108      	movs	r1, #8
 8003caa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2278      	movs	r2, #120	@ 0x78
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e02c      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	401a      	ands	r2, r3
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d112      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2280      	movs	r2, #128	@ 0x80
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 f8d5 	bl	8003e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2284      	movs	r2, #132	@ 0x84
 8003ce2:	2120      	movs	r1, #32
 8003ce4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2278      	movs	r2, #120	@ 0x78
 8003cea:	2100      	movs	r1, #0
 8003cec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e00f      	b.n	8003d12 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	425a      	negs	r2, r3
 8003d02:	4153      	adcs	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d09e      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b004      	add	sp, #16
 8003d18:	bd80      	pop	{r7, pc}
	...

08003d1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	@ 0x40
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	1dbb      	adds	r3, r7, #6
 8003d28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	1dba      	adds	r2, r7, #6
 8003d34:	2158      	movs	r1, #88	@ 0x58
 8003d36:	8812      	ldrh	r2, [r2, #0]
 8003d38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1dba      	adds	r2, r7, #6
 8003d3e:	215a      	movs	r1, #90	@ 0x5a
 8003d40:	8812      	ldrh	r2, [r2, #0]
 8003d42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	2380      	movs	r3, #128	@ 0x80
 8003d50:	015b      	lsls	r3, r3, #5
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d10d      	bne.n	8003d72 <UART_Start_Receive_IT+0x56>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <UART_Start_Receive_IT+0x4c>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	225c      	movs	r2, #92	@ 0x5c
 8003d62:	4946      	ldr	r1, [pc, #280]	@ (8003e7c <UART_Start_Receive_IT+0x160>)
 8003d64:	5299      	strh	r1, [r3, r2]
 8003d66:	e01a      	b.n	8003d9e <UART_Start_Receive_IT+0x82>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	225c      	movs	r2, #92	@ 0x5c
 8003d6c:	21ff      	movs	r1, #255	@ 0xff
 8003d6e:	5299      	strh	r1, [r3, r2]
 8003d70:	e015      	b.n	8003d9e <UART_Start_Receive_IT+0x82>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <UART_Start_Receive_IT+0x7a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d104      	bne.n	8003d8c <UART_Start_Receive_IT+0x70>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	225c      	movs	r2, #92	@ 0x5c
 8003d86:	21ff      	movs	r1, #255	@ 0xff
 8003d88:	5299      	strh	r1, [r3, r2]
 8003d8a:	e008      	b.n	8003d9e <UART_Start_Receive_IT+0x82>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	225c      	movs	r2, #92	@ 0x5c
 8003d90:	217f      	movs	r1, #127	@ 0x7f
 8003d92:	5299      	strh	r1, [r3, r2]
 8003d94:	e003      	b.n	8003d9e <UART_Start_Receive_IT+0x82>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	225c      	movs	r2, #92	@ 0x5c
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2284      	movs	r2, #132	@ 0x84
 8003da2:	2100      	movs	r1, #0
 8003da4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	2122      	movs	r1, #34	@ 0x22
 8003dac:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dae:	f3ef 8310 	mrs	r3, PRIMASK
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003db8:	2301      	movs	r3, #1
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	f383 8810 	msr	PRIMASK, r3
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	015b      	lsls	r3, r3, #5
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <UART_Start_Receive_IT+0xe0>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d103      	bne.n	8003dfc <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a22      	ldr	r2, [pc, #136]	@ (8003e80 <UART_Start_Receive_IT+0x164>)
 8003df8:	669a      	str	r2, [r3, #104]	@ 0x68
 8003dfa:	e002      	b.n	8003e02 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	@ (8003e84 <UART_Start_Receive_IT+0x168>)
 8003e00:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d019      	beq.n	8003e3e <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e10:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e14:	2301      	movs	r3, #1
 8003e16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f383 8810 	msr	PRIMASK, r3
}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2190      	movs	r1, #144	@ 0x90
 8003e2c:	0049      	lsls	r1, r1, #1
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e34:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	e018      	b.n	8003e70 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e42:	613b      	str	r3, [r7, #16]
  return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e48:	2301      	movs	r3, #1
 8003e4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2120      	movs	r1, #32
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f383 8810 	msr	PRIMASK, r3
}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b010      	add	sp, #64	@ 0x40
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	000001ff 	.word	0x000001ff
 8003e80:	0800418d 	.word	0x0800418d
 8003e84:	08003fd5 	.word	0x08003fd5

08003e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08e      	sub	sp, #56	@ 0x38
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	617b      	str	r3, [r7, #20]
  return(result);
 8003e96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			@ (mov r8, r8)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4926      	ldr	r1, [pc, #152]	@ (8003f4c <UART_EndRxTransfer+0xc4>)
 8003eb2:	400a      	ands	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ecc:	2301      	movs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d118      	bne.n	8003f2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efc:	f3ef 8310 	mrs	r3, PRIMASK
 8003f00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f06:	2301      	movs	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			@ (mov r8, r8)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	438a      	bics	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2280      	movs	r2, #128	@ 0x80
 8003f32:	2120      	movs	r1, #32
 8003f34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b00e      	add	sp, #56	@ 0x38
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	fffffedf 	.word	0xfffffedf

08003f50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	225a      	movs	r2, #90	@ 0x5a
 8003f62:	2100      	movs	r1, #0
 8003f64:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2252      	movs	r2, #82	@ 0x52
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7ff fbbf 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b086      	sub	sp, #24
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	2301      	movs	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2140      	movs	r1, #64	@ 0x40
 8003fa8:	438a      	bics	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7ff fb84 	bl	80036d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b006      	add	sp, #24
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b094      	sub	sp, #80	@ 0x50
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003fdc:	204e      	movs	r0, #78	@ 0x4e
 8003fde:	183b      	adds	r3, r7, r0
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	215c      	movs	r1, #92	@ 0x5c
 8003fe4:	5a52      	ldrh	r2, [r2, r1]
 8003fe6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	589b      	ldr	r3, [r3, r2]
 8003fee:	2b22      	cmp	r3, #34	@ 0x22
 8003ff0:	d000      	beq.n	8003ff4 <UART_RxISR_8BIT+0x20>
 8003ff2:	e0ba      	b.n	800416a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	214c      	movs	r1, #76	@ 0x4c
 8003ffa:	187b      	adds	r3, r7, r1
 8003ffc:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8003ffe:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004000:	187b      	adds	r3, r7, r1
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	183b      	adds	r3, r7, r0
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b2d9      	uxtb	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	400a      	ands	r2, r1
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	225a      	movs	r2, #90	@ 0x5a
 8004024:	5a9b      	ldrh	r3, [r3, r2]
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b299      	uxth	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	225a      	movs	r2, #90	@ 0x5a
 8004030:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	225a      	movs	r2, #90	@ 0x5a
 8004036:	5a9b      	ldrh	r3, [r3, r2]
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d000      	beq.n	8004040 <UART_RxISR_8BIT+0x6c>
 800403e:	e09c      	b.n	800417a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800404a:	2301      	movs	r3, #1
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4948      	ldr	r1, [pc, #288]	@ (8004184 <UART_RxISR_8BIT+0x1b0>)
 8004062:	400a      	ands	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004072:	f3ef 8310 	mrs	r3, PRIMASK
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407a:	647b      	str	r3, [r7, #68]	@ 0x44
 800407c:	2301      	movs	r3, #1
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004082:	f383 8810 	msr	PRIMASK, r3
}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	f383 8810 	msr	PRIMASK, r3
}
 80040a2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2280      	movs	r2, #128	@ 0x80
 80040a8:	2120      	movs	r1, #32
 80040aa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	4013      	ands	r3, r2
 80040c4:	d018      	beq.n	80040f8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80040cc:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80040d0:	2301      	movs	r3, #1
 80040d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f383 8810 	msr	PRIMASK, r3
}
 80040da:	46c0      	nop			@ (mov r8, r8)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4928      	ldr	r1, [pc, #160]	@ (8004188 <UART_RxISR_8BIT+0x1b4>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d12f      	bne.n	8004160 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004106:	f3ef 8310 	mrs	r3, PRIMASK
 800410a:	60fb      	str	r3, [r7, #12]
  return(result);
 800410c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004110:	2301      	movs	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f383 8810 	msr	PRIMASK, r3
}
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2110      	movs	r1, #16
 8004128:	438a      	bics	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	2210      	movs	r2, #16
 8004140:	4013      	ands	r3, r2
 8004142:	2b10      	cmp	r3, #16
 8004144:	d103      	bne.n	800414e <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2210      	movs	r2, #16
 800414c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2258      	movs	r2, #88	@ 0x58
 8004152:	5a9a      	ldrh	r2, [r3, r2]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0011      	movs	r1, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f7fc fab7 	bl	80006cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800415e:	e00c      	b.n	800417a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	0018      	movs	r0, r3
 8004164:	f7ff fabe 	bl	80036e4 <HAL_UART_RxCpltCallback>
}
 8004168:	e007      	b.n	800417a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2108      	movs	r1, #8
 8004176:	430a      	orrs	r2, r1
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	46bd      	mov	sp, r7
 800417e:	b014      	add	sp, #80	@ 0x50
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	fffffedf 	.word	0xfffffedf
 8004188:	fbffffff 	.word	0xfbffffff

0800418c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b094      	sub	sp, #80	@ 0x50
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004194:	204e      	movs	r0, #78	@ 0x4e
 8004196:	183b      	adds	r3, r7, r0
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	215c      	movs	r1, #92	@ 0x5c
 800419c:	5a52      	ldrh	r2, [r2, r1]
 800419e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2280      	movs	r2, #128	@ 0x80
 80041a4:	589b      	ldr	r3, [r3, r2]
 80041a6:	2b22      	cmp	r3, #34	@ 0x22
 80041a8:	d000      	beq.n	80041ac <UART_RxISR_16BIT+0x20>
 80041aa:	e0ba      	b.n	8004322 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	214c      	movs	r1, #76	@ 0x4c
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80041b6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	183a      	adds	r2, r7, r0
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	4013      	ands	r3, r2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	225a      	movs	r2, #90	@ 0x5a
 80041dc:	5a9b      	ldrh	r3, [r3, r2]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b299      	uxth	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	225a      	movs	r2, #90	@ 0x5a
 80041e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	225a      	movs	r2, #90	@ 0x5a
 80041ee:	5a9b      	ldrh	r3, [r3, r2]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d000      	beq.n	80041f8 <UART_RxISR_16BIT+0x6c>
 80041f6:	e09c      	b.n	8004332 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f8:	f3ef 8310 	mrs	r3, PRIMASK
 80041fc:	623b      	str	r3, [r7, #32]
  return(result);
 80041fe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004200:	647b      	str	r3, [r7, #68]	@ 0x44
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	f383 8810 	msr	PRIMASK, r3
}
 800420c:	46c0      	nop			@ (mov r8, r8)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4948      	ldr	r1, [pc, #288]	@ (800433c <UART_RxISR_16BIT+0x1b0>)
 800421a:	400a      	ands	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004224:	f383 8810 	msr	PRIMASK, r3
}
 8004228:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	643b      	str	r3, [r7, #64]	@ 0x40
 8004234:	2301      	movs	r3, #1
 8004236:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2101      	movs	r1, #1
 800424c:	438a      	bics	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	2120      	movs	r1, #32
 8004262:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	4013      	ands	r3, r2
 800427c:	d018      	beq.n	80042b0 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427e:	f3ef 8310 	mrs	r3, PRIMASK
 8004282:	617b      	str	r3, [r7, #20]
  return(result);
 8004284:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004288:	2301      	movs	r3, #1
 800428a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4928      	ldr	r1, [pc, #160]	@ (8004340 <UART_RxISR_16BIT+0x1b4>)
 80042a0:	400a      	ands	r2, r1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f383 8810 	msr	PRIMASK, r3
}
 80042ae:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d12f      	bne.n	8004318 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042be:	f3ef 8310 	mrs	r3, PRIMASK
 80042c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042c8:	2301      	movs	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f383 8810 	msr	PRIMASK, r3
}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2110      	movs	r1, #16
 80042e0:	438a      	bics	r2, r1
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2210      	movs	r2, #16
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d103      	bne.n	8004306 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2258      	movs	r2, #88	@ 0x58
 800430a:	5a9a      	ldrh	r2, [r3, r2]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0011      	movs	r1, r2
 8004310:	0018      	movs	r0, r3
 8004312:	f7fc f9db 	bl	80006cc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004316:	e00c      	b.n	8004332 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff f9e2 	bl	80036e4 <HAL_UART_RxCpltCallback>
}
 8004320:	e007      	b.n	8004332 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699a      	ldr	r2, [r3, #24]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2108      	movs	r1, #8
 800432e:	430a      	orrs	r2, r1
 8004330:	619a      	str	r2, [r3, #24]
}
 8004332:	46c0      	nop			@ (mov r8, r8)
 8004334:	46bd      	mov	sp, r7
 8004336:	b014      	add	sp, #80	@ 0x50
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	fffffedf 	.word	0xfffffedf
 8004340:	fbffffff 	.word	0xfbffffff

08004344 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	@ 0x28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	1dbb      	adds	r3, r7, #6
 8004350:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004352:	2327      	movs	r3, #39	@ 0x27
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2280      	movs	r2, #128	@ 0x80
 800435e:	589b      	ldr	r3, [r3, r2]
 8004360:	2b20      	cmp	r3, #32
 8004362:	d14e      	bne.n	8004402 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 800436a:	1dbb      	adds	r3, r7, #6
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e046      	b.n	8004404 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	2380      	movs	r3, #128	@ 0x80
 800437c:	015b      	lsls	r3, r3, #5
 800437e:	429a      	cmp	r2, r3
 8004380:	d109      	bne.n	8004396 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	d001      	beq.n	8004396 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e036      	b.n	8004404 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2201      	movs	r2, #1
 800439a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	68b9      	ldr	r1, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f7ff fcb6 	bl	8003d1c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d11c      	bne.n	80043f2 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c0:	f3ef 8310 	mrs	r3, PRIMASK
 80043c4:	617b      	str	r3, [r7, #20]
  return(result);
 80043c6:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	2301      	movs	r3, #1
 80043cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f383 8810 	msr	PRIMASK, r3
}
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2110      	movs	r1, #16
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f383 8810 	msr	PRIMASK, r3
}
 80043f0:	e003      	b.n	80043fa <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80043f2:	2327      	movs	r3, #39	@ 0x27
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2201      	movs	r2, #1
 80043f8:	701a      	strb	r2, [r3, #0]
    }

    return status;
 80043fa:	2327      	movs	r3, #39	@ 0x27
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	e000      	b.n	8004404 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b00a      	add	sp, #40	@ 0x28
 800440a:	bd80      	pop	{r7, pc}

0800440c <memset>:
 800440c:	0003      	movs	r3, r0
 800440e:	1882      	adds	r2, r0, r2
 8004410:	4293      	cmp	r3, r2
 8004412:	d100      	bne.n	8004416 <memset+0xa>
 8004414:	4770      	bx	lr
 8004416:	7019      	strb	r1, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	e7f9      	b.n	8004410 <memset+0x4>

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	2600      	movs	r6, #0
 8004420:	4c0c      	ldr	r4, [pc, #48]	@ (8004454 <__libc_init_array+0x38>)
 8004422:	4d0d      	ldr	r5, [pc, #52]	@ (8004458 <__libc_init_array+0x3c>)
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	2600      	movs	r6, #0
 800442e:	f000 f819 	bl	8004464 <_init>
 8004432:	4c0a      	ldr	r4, [pc, #40]	@ (800445c <__libc_init_array+0x40>)
 8004434:	4d0a      	ldr	r5, [pc, #40]	@ (8004460 <__libc_init_array+0x44>)
 8004436:	1b64      	subs	r4, r4, r5
 8004438:	10a4      	asrs	r4, r4, #2
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	00b3      	lsls	r3, r6, #2
 8004442:	58eb      	ldr	r3, [r5, r3]
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	00b3      	lsls	r3, r6, #2
 800444c:	58eb      	ldr	r3, [r5, r3]
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	08004718 	.word	0x08004718
 8004458:	08004718 	.word	0x08004718
 800445c:	0800471c 	.word	0x0800471c
 8004460:	08004718 	.word	0x08004718

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	46c0      	nop			@ (mov r8, r8)
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	46c0      	nop			@ (mov r8, r8)
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
