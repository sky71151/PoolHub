
BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058d0  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005ac0  08005ac0  00006ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da8  08005da8  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  08005da8  08005da8  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da8  08005da8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00006da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005db0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d10  20000060  08005e10  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d70  08005e10  00007d70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171fa  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032fb  00000000  00000000  0001e283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00021580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f50  00000000  00000000  00022920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000314c  00000000  00000000  00023870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b1e  00000000  00000000  000269bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26b5  00000000  00000000  0003d4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfb8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005520  00000000  00000000  000dfbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e50f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08005aa8 	.word	0x08005aa8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08005aa8 	.word	0x08005aa8

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 fc72 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f840 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8da 	bl	80003f4 <MX_GPIO_Init>
  MX_UART4_Init();
 8000240:	f000 f884 	bl	800034c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f8ac 	bl	80003a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, uart4_rx_buffer, 32);
 8000248:	2220      	movs	r2, #32
 800024a:	4911      	ldr	r1, [pc, #68]	@ (8000290 <main+0x60>)
 800024c:	4811      	ldr	r0, [pc, #68]	@ (8000294 <main+0x64>)
 800024e:	f002 f828 	bl	80022a2 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000252:	f002 fe01 	bl	8002e58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000256:	4a10      	ldr	r2, [pc, #64]	@ (8000298 <main+0x68>)
 8000258:	2100      	movs	r1, #0
 800025a:	4810      	ldr	r0, [pc, #64]	@ (800029c <main+0x6c>)
 800025c:	f002 fe62 	bl	8002f24 <osThreadNew>
 8000260:	4603      	mov	r3, r0
 8000262:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <main+0x70>)
 8000264:	6013      	str	r3, [r2, #0]

  /* creation of modbusTask */
  modbusTaskHandle = osThreadNew(StartModbusTask, NULL, &modbusTask_attributes);
 8000266:	4a0f      	ldr	r2, [pc, #60]	@ (80002a4 <main+0x74>)
 8000268:	2100      	movs	r1, #0
 800026a:	480f      	ldr	r0, [pc, #60]	@ (80002a8 <main+0x78>)
 800026c:	f002 fe5a 	bl	8002f24 <osThreadNew>
 8000270:	4603      	mov	r3, r0
 8000272:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <main+0x7c>)
 8000274:	6013      	str	r3, [r2, #0]

  /* creation of EspTask */
  EspTaskHandle = osThreadNew(StartEspTask, NULL, &EspTask_attributes);
 8000276:	4a0e      	ldr	r2, [pc, #56]	@ (80002b0 <main+0x80>)
 8000278:	2100      	movs	r1, #0
 800027a:	480e      	ldr	r0, [pc, #56]	@ (80002b4 <main+0x84>)
 800027c:	f002 fe52 	bl	8002f24 <osThreadNew>
 8000280:	4603      	mov	r3, r0
 8000282:	4a0d      	ldr	r2, [pc, #52]	@ (80002b8 <main+0x88>)
 8000284:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000286:	f002 fe19 	bl	8002ebc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028a:	bf00      	nop
 800028c:	e7fd      	b.n	800028a <main+0x5a>
 800028e:	bf00      	nop
 8000290:	2000007c 	.word	0x2000007c
 8000294:	20000168 	.word	0x20000168
 8000298:	08005b10 	.word	0x08005b10
 800029c:	080006d5 	.word	0x080006d5
 80002a0:	200001f8 	.word	0x200001f8
 80002a4:	08005b34 	.word	0x08005b34
 80002a8:	08000701 	.word	0x08000701
 80002ac:	200001fc 	.word	0x200001fc
 80002b0:	08005b58 	.word	0x08005b58
 80002b4:	0800071d 	.word	0x0800071d
 80002b8:	20000200 	.word	0x20000200

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b090      	sub	sp, #64	@ 0x40
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	f107 0318 	add.w	r3, r7, #24
 80002c6:	2228      	movs	r2, #40	@ 0x28
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f005 fafe 	bl	80058cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]
 80002dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	2301      	movs	r3, #1
 80002e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0318 	add.w	r3, r7, #24
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f823 	bl	8001350 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000310:	f000 fa26 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2102      	movs	r1, #2
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fa90 	bl	8001854 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033a:	f000 fa11 	bl	8000760 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800033e:	f001 fb73 	bl	8001a28 <HAL_RCC_EnableCSS>
}
 8000342:	bf00      	nop
 8000344:	3740      	adds	r7, #64	@ 0x40
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000352:	4a12      	ldr	r2, [pc, #72]	@ (800039c <MX_UART4_Init+0x50>)
 8000354:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000356:	4b10      	ldr	r3, [pc, #64]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000358:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800035c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800035e:	4b0e      	ldr	r3, [pc, #56]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000364:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000366:	2200      	movs	r2, #0
 8000368:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <MX_UART4_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000370:	4b09      	ldr	r3, [pc, #36]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000372:	220c      	movs	r2, #12
 8000374:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000376:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <MX_UART4_Init+0x4c>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000382:	4805      	ldr	r0, [pc, #20]	@ (8000398 <MX_UART4_Init+0x4c>)
 8000384:	f001 feba 	bl	80020fc <HAL_UART_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800038e:	f000 f9e7 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	20000168 	.word	0x20000168
 800039c:	40004c00 	.word	0x40004c00

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b11      	ldr	r3, [pc, #68]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <MX_USART1_UART_Init+0x50>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003aa:	4b10      	ldr	r3, [pc, #64]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b0e      	ldr	r3, [pc, #56]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <MX_USART1_UART_Init+0x4c>)
 80003d8:	f001 fe90 	bl	80020fc <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f9bd 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200001b0 	.word	0x200001b0
 80003f0:	40013800 	.word	0x40013800

080003f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
 8000406:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a2c      	ldr	r2, [pc, #176]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0320 	and.w	r3, r3, #32
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a26      	ldr	r2, [pc, #152]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a20      	ldr	r2, [pc, #128]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b1b      	ldr	r3, [pc, #108]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a1a      	ldr	r2, [pc, #104]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <MX_GPIO_Init+0xcc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Relay0_Pin|Relay1_Pin|Relay2_Pin|Relay3_Pin
 8000468:	2200      	movs	r2, #0
 800046a:	21cf      	movs	r1, #207	@ 0xcf
 800046c:	4815      	ldr	r0, [pc, #84]	@ (80004c4 <MX_GPIO_Init+0xd0>)
 800046e:	f000 ff3d 	bl	80012ec <HAL_GPIO_WritePin>
                          |led2_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rs485Control_GPIO_Port, Rs485Control_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000478:	4813      	ldr	r0, [pc, #76]	@ (80004c8 <MX_GPIO_Init+0xd4>)
 800047a:	f000 ff37 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Relay0_Pin Relay1_Pin Relay2_Pin Relay3_Pin
                           led2_Pin led1_Pin */
  GPIO_InitStruct.Pin = Relay0_Pin|Relay1_Pin|Relay2_Pin|Relay3_Pin
 800047e:	23cf      	movs	r3, #207	@ 0xcf
 8000480:	613b      	str	r3, [r7, #16]
                          |led2_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	480b      	ldr	r0, [pc, #44]	@ (80004c4 <MX_GPIO_Init+0xd0>)
 8000496:	f000 fd95 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Rs485Control_Pin */
  GPIO_InitStruct.Pin = Rs485Control_Pin;
 800049a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800049e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a0:	2301      	movs	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2302      	movs	r3, #2
 80004aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Rs485Control_GPIO_Port, &GPIO_InitStruct);
 80004ac:	f107 0310 	add.w	r3, r7, #16
 80004b0:	4619      	mov	r1, r3
 80004b2:	4805      	ldr	r0, [pc, #20]	@ (80004c8 <MX_GPIO_Init+0xd4>)
 80004b4:	f000 fd86 	bl	8000fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010800 	.word	0x40010800

080004cc <sendData>:

/* USER CODE BEGIN 4 */
void sendData(uint8_t* data) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Rs485Control_GPIO_Port, Rs485Control_Pin, GPIO_PIN_SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004da:	4809      	ldr	r0, [pc, #36]	@ (8000500 <sendData+0x34>)
 80004dc:	f000 ff06 	bl	80012ec <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart4, TxData, 8, 100);
 80004e0:	2364      	movs	r3, #100	@ 0x64
 80004e2:	2208      	movs	r2, #8
 80004e4:	4907      	ldr	r1, [pc, #28]	@ (8000504 <sendData+0x38>)
 80004e6:	4808      	ldr	r0, [pc, #32]	@ (8000508 <sendData+0x3c>)
 80004e8:	f001 fe58 	bl	800219c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(Rs485Control_GPIO_Port, Rs485Control_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <sendData+0x34>)
 80004f4:	f000 fefa 	bl	80012ec <HAL_GPIO_WritePin>
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010800 	.word	0x40010800
 8000504:	200000e0 	.word	0x200000e0
 8000508:	20000168 	.word	0x20000168

0800050c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART4) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a3f      	ldr	r2, [pc, #252]	@ (800061c <HAL_UARTEx_RxEventCallback+0x110>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d178      	bne.n	8000614 <HAL_UARTEx_RxEventCallback+0x108>

		uint16_t crc = crc16(uart4_rx_buffer, Size - 2);
 8000522:	887b      	ldrh	r3, [r7, #2]
 8000524:	3b02      	subs	r3, #2
 8000526:	b29b      	uxth	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	483d      	ldr	r0, [pc, #244]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 800052c:	f000 f91e 	bl	800076c <crc16>
 8000530:	4603      	mov	r3, r0
 8000532:	81fb      	strh	r3, [r7, #14]

		if (uart4_rx_buffer[Size - 2] != (crc & 0xFF) || uart4_rx_buffer[Size - 1] != ((crc >> 8) & 0xFF)) {
 8000534:	887b      	ldrh	r3, [r7, #2]
 8000536:	3b02      	subs	r3, #2
 8000538:	4a39      	ldr	r2, [pc, #228]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	461a      	mov	r2, r3
 800053e:	89fb      	ldrh	r3, [r7, #14]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	429a      	cmp	r2, r3
 8000544:	d10a      	bne.n	800055c <HAL_UARTEx_RxEventCallback+0x50>
 8000546:	887b      	ldrh	r3, [r7, #2]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a35      	ldr	r2, [pc, #212]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	461a      	mov	r2, r3
 8000550:	89fb      	ldrh	r3, [r7, #14]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b29b      	uxth	r3, r3
 8000556:	b2db      	uxtb	r3, r3
 8000558:	429a      	cmp	r2, r3
 800055a:	d009      	beq.n	8000570 <HAL_UARTEx_RxEventCallback+0x64>
			fault = 1;
 800055c:	4b31      	ldr	r3, [pc, #196]	@ (8000624 <HAL_UARTEx_RxEventCallback+0x118>)
 800055e:	2201      	movs	r2, #1
 8000560:	601a      	str	r2, [r3, #0]
			HAL_UARTEx_ReceiveToIdle_IT(&huart4, uart4_rx_buffer, 1000);
 8000562:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000566:	492e      	ldr	r1, [pc, #184]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 8000568:	482f      	ldr	r0, [pc, #188]	@ (8000628 <HAL_UARTEx_RxEventCallback+0x11c>)
 800056a:	f001 fe9a 	bl	80022a2 <HAL_UARTEx_ReceiveToIdle_IT>
			return;
 800056e:	e051      	b.n	8000614 <HAL_UARTEx_RxEventCallback+0x108>
		}

		if (uart4_rx_buffer[4] != 1 || uart4_rx_buffer[6] != 1)
 8000570:	4b2b      	ldr	r3, [pc, #172]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d103      	bne.n	8000580 <HAL_UARTEx_RxEventCallback+0x74>
 8000578:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 800057a:	799b      	ldrb	r3, [r3, #6]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d006      	beq.n	800058e <HAL_UARTEx_RxEventCallback+0x82>
		{
			HAL_UARTEx_ReceiveToIdle_IT(&huart4, uart4_rx_buffer, 1000);
 8000580:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000584:	4926      	ldr	r1, [pc, #152]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 8000586:	4828      	ldr	r0, [pc, #160]	@ (8000628 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000588:	f001 fe8b 	bl	80022a2 <HAL_UARTEx_ReceiveToIdle_IT>
			return;
 800058c:	e042      	b.n	8000614 <HAL_UARTEx_RxEventCallback+0x108>
		}

		esp.WiFi = uart4_rx_buffer[4];
 800058e:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 8000590:	791a      	ldrb	r2, [r3, #4]
 8000592:	4b26      	ldr	r3, [pc, #152]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 8000594:	701a      	strb	r2, [r3, #0]
		esp.Mqtt = uart4_rx_buffer[6];
 8000596:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 8000598:	799a      	ldrb	r2, [r3, #6]
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 800059c:	705a      	strb	r2, [r3, #1]
		esp.Time.Hour = uart4_rx_buffer[8];
 800059e:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005a0:	7a1a      	ldrb	r2, [r3, #8]
 80005a2:	4b22      	ldr	r3, [pc, #136]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005a4:	70da      	strb	r2, [r3, #3]
		esp.Time.Minutes = uart4_rx_buffer[10];
 80005a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005a8:	7a9a      	ldrb	r2, [r3, #10]
 80005aa:	4b20      	ldr	r3, [pc, #128]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005ac:	711a      	strb	r2, [r3, #4]
		esp.Date.Day = uart4_rx_buffer[12];
 80005ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005b0:	7b1a      	ldrb	r2, [r3, #12]
 80005b2:	4b1e      	ldr	r3, [pc, #120]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005b4:	721a      	strb	r2, [r3, #8]
		esp.Outputs.Relay1 = uart4_rx_buffer[14];
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005b8:	7b9a      	ldrb	r2, [r3, #14]
 80005ba:	4b1c      	ldr	r3, [pc, #112]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005bc:	741a      	strb	r2, [r3, #16]
		esp.Outputs.Relay2 = uart4_rx_buffer[16];
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005c0:	7c1a      	ldrb	r2, [r3, #16]
 80005c2:	4b1a      	ldr	r3, [pc, #104]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005c4:	745a      	strb	r2, [r3, #17]
		esp.D_temp =uart4_rx_buffer[18];
 80005c6:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005c8:	7c9a      	ldrb	r2, [r3, #18]
 80005ca:	4b18      	ldr	r3, [pc, #96]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005cc:	751a      	strb	r2, [r3, #20]


		HAL_UARTEx_ReceiveToIdle_IT(&huart4, uart4_rx_buffer, 1000);
 80005ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005d2:	4913      	ldr	r1, [pc, #76]	@ (8000620 <HAL_UARTEx_RxEventCallback+0x114>)
 80005d4:	4814      	ldr	r0, [pc, #80]	@ (8000628 <HAL_UARTEx_RxEventCallback+0x11c>)
 80005d6:	f001 fe64 	bl	80022a2 <HAL_UARTEx_ReceiveToIdle_IT>


		HAL_GPIO_WritePin(Relay0_GPIO_Port, Relay0_Pin, esp.Outputs.Relay1);
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005dc:	7c1b      	ldrb	r3, [r3, #16]
 80005de:	461a      	mov	r2, r3
 80005e0:	2101      	movs	r1, #1
 80005e2:	4813      	ldr	r0, [pc, #76]	@ (8000630 <HAL_UARTEx_RxEventCallback+0x124>)
 80005e4:	f000 fe82 	bl	80012ec <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(Relay1_GPIO_Port, Relay1_Pin, esp.Outputs.Relay2);
 80005e8:	4b10      	ldr	r3, [pc, #64]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005ea:	7c5b      	ldrb	r3, [r3, #17]
 80005ec:	461a      	mov	r2, r3
 80005ee:	2102      	movs	r1, #2
 80005f0:	480f      	ldr	r0, [pc, #60]	@ (8000630 <HAL_UARTEx_RxEventCallback+0x124>)
 80005f2:	f000 fe7b 	bl	80012ec <HAL_GPIO_WritePin>

		if (esp.D_temp <= 28)
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <HAL_UARTEx_RxEventCallback+0x120>)
 80005f8:	7d1b      	ldrb	r3, [r3, #20]
 80005fa:	2b1c      	cmp	r3, #28
 80005fc:	d805      	bhi.n	800060a <HAL_UARTEx_RxEventCallback+0xfe>
		{
			HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2104      	movs	r1, #4
 8000602:	480b      	ldr	r0, [pc, #44]	@ (8000630 <HAL_UARTEx_RxEventCallback+0x124>)
 8000604:	f000 fe72 	bl	80012ec <HAL_GPIO_WritePin>
 8000608:	e004      	b.n	8000614 <HAL_UARTEx_RxEventCallback+0x108>
		}else{
			HAL_GPIO_WritePin(Relay2_GPIO_Port, Relay2_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2104      	movs	r1, #4
 800060e:	4808      	ldr	r0, [pc, #32]	@ (8000630 <HAL_UARTEx_RxEventCallback+0x124>)
 8000610:	f000 fe6c 	bl	80012ec <HAL_GPIO_WritePin>




	}
}
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40004c00 	.word	0x40004c00
 8000620:	2000007c 	.word	0x2000007c
 8000624:	200000e8 	.word	0x200000e8
 8000628:	20000168 	.word	0x20000168
 800062c:	20000150 	.word	0x20000150
 8000630:	40011000 	.word	0x40011000

08000634 <Modbus>:

void Modbus(uint8_t slave, uint8_t function, uint16_t address, uint16_t data) {
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	4604      	mov	r4, r0
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	461a      	mov	r2, r3
 8000642:	4623      	mov	r3, r4
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	4603      	mov	r3, r0
 8000648:	71bb      	strb	r3, [r7, #6]
 800064a:	460b      	mov	r3, r1
 800064c:	80bb      	strh	r3, [r7, #4]
 800064e:	4613      	mov	r3, r2
 8000650:	807b      	strh	r3, [r7, #2]

	TxData[0] = slave;
 8000652:	4a18      	ldr	r2, [pc, #96]	@ (80006b4 <Modbus+0x80>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	7013      	strb	r3, [r2, #0]
	TxData[1] = function;
 8000658:	4a16      	ldr	r2, [pc, #88]	@ (80006b4 <Modbus+0x80>)
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	7053      	strb	r3, [r2, #1]
	TxData[2] = address >> 8;
 800065e:	88bb      	ldrh	r3, [r7, #4]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b29b      	uxth	r3, r3
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <Modbus+0x80>)
 8000668:	709a      	strb	r2, [r3, #2]
	TxData[3] = address;
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <Modbus+0x80>)
 8000670:	70da      	strb	r2, [r3, #3]
	TxData[4] = data >> 8;
 8000672:	887b      	ldrh	r3, [r7, #2]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	b29b      	uxth	r3, r3
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <Modbus+0x80>)
 800067c:	711a      	strb	r2, [r3, #4]
	TxData[5] = data;
 800067e:	887b      	ldrh	r3, [r7, #2]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b0c      	ldr	r3, [pc, #48]	@ (80006b4 <Modbus+0x80>)
 8000684:	715a      	strb	r2, [r3, #5]

	uint16_t crc = crc16(TxData, 6);
 8000686:	2106      	movs	r1, #6
 8000688:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <Modbus+0x80>)
 800068a:	f000 f86f 	bl	800076c <crc16>
 800068e:	4603      	mov	r3, r0
 8000690:	81fb      	strh	r3, [r7, #14]
	TxData[6] = 0x44;//crc&0xFF;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <Modbus+0x80>)
 8000694:	2244      	movs	r2, #68	@ 0x44
 8000696:	719a      	strb	r2, [r3, #6]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 8000698:	89fb      	ldrh	r3, [r7, #14]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <Modbus+0x80>)
 80006a2:	71da      	strb	r2, [r3, #7]
	sendData(TxData);
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <Modbus+0x80>)
 80006a6:	f7ff ff11 	bl	80004cc <sendData>
}
 80006aa:	bf00      	nop
 80006ac:	3714      	adds	r7, #20
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd90      	pop	{r4, r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000e0 	.word	0x200000e0

080006b8 <Debug_message>:
	//	Data[4] = RxData[11]<<8 | RxData[12];*/
	}
}


void Debug_message(const char *src) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	strcpy(fault_message, src);
 80006c0:	6879      	ldr	r1, [r7, #4]
 80006c2:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <Debug_message+0x18>)
 80006c4:	f005 f986 	bl	80059d4 <strcpy>

}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000ec 	.word	0x200000ec

080006d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	4807      	ldr	r0, [pc, #28]	@ (80006fc <StartDefaultTask+0x28>)
 80006e0:	f000 fe1c 	bl	800131c <HAL_GPIO_TogglePin>
	  osDelay(200);
 80006e4:	20c8      	movs	r0, #200	@ 0xc8
 80006e6:	f002 fcc7 	bl	8003078 <osDelay>
	  HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80006ea:	2140      	movs	r1, #64	@ 0x40
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <StartDefaultTask+0x28>)
 80006ee:	f000 fe15 	bl	800131c <HAL_GPIO_TogglePin>
	  osDelay(200);
 80006f2:	20c8      	movs	r0, #200	@ 0xc8
 80006f4:	f002 fcc0 	bl	8003078 <osDelay>
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80006f8:	bf00      	nop
 80006fa:	e7ef      	b.n	80006dc <StartDefaultTask+0x8>
 80006fc:	40011000 	.word	0x40011000

08000700 <StartModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask */
	Debug_message("Modbus Task Started\n");
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <StartModbusTask+0x18>)
 800070a:	f7ff ffd5 	bl	80006b8 <Debug_message>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800070e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000712:	f002 fcb1 	bl	8003078 <osDelay>
 8000716:	e7fa      	b.n	800070e <StartModbusTask+0xe>
 8000718:	08005ae0 	.word	0x08005ae0

0800071c <StartEspTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEspTask */
void StartEspTask(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEspTask */
  /* Infinite loop */
  for(;;)
  {
	Modbus(0x01, 0x03, 0x00, 0x08);
 8000724:	2308      	movs	r3, #8
 8000726:	2200      	movs	r2, #0
 8000728:	2103      	movs	r1, #3
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff ff82 	bl	8000634 <Modbus>
    osDelay(1000);
 8000730:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000734:	f002 fca0 	bl	8003078 <osDelay>
	Modbus(0x01, 0x03, 0x00, 0x08);
 8000738:	bf00      	nop
 800073a:	e7f3      	b.n	8000724 <StartEspTask+0x8>

0800073c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a04      	ldr	r2, [pc, #16]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d101      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074e:	f000 f9fb 	bl	8000b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40001000 	.word	0x40001000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000778:	23ff      	movs	r3, #255	@ 0xff
 800077a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 800077c:	23ff      	movs	r3, #255	@ 0xff
 800077e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000780:	e013      	b.n	80007aa <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	7bbb      	ldrb	r3, [r7, #14]
 800078c:	4053      	eors	r3, r2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <crc16+0x64>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4413      	add	r3, r2
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4053      	eors	r3, r2
 800079e:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80007a0:	4a0c      	ldr	r2, [pc, #48]	@ (80007d4 <crc16+0x68>)
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	807a      	strh	r2, [r7, #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1e6      	bne.n	8000782 <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	b21b      	sxth	r3, r3
 80007be:	4313      	orrs	r3, r2
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	b29b      	uxth	r3, r3
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	08005b7c 	.word	0x08005b7c
 80007d4:	08005c7c 	.word	0x08005c7c

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <HAL_MspInit+0x68>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <HAL_MspInit+0x68>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <HAL_MspInit+0x68>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_MspInit+0x68>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <HAL_MspInit+0x68>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x68>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 fa68 	bl	8000cea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800081a:	4b0a      	ldr	r3, [pc, #40]	@ (8000844 <HAL_MspInit+0x6c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_MspInit+0x6c>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	40010000 	.word	0x40010000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a3c      	ldr	r2, [pc, #240]	@ (8000954 <HAL_UART_MspInit+0x10c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d13a      	bne.n	80008de <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000868:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <HAL_UART_MspInit+0x110>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	4a3a      	ldr	r2, [pc, #232]	@ (8000958 <HAL_UART_MspInit+0x110>)
 800086e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000872:	61d3      	str	r3, [r2, #28]
 8000874:	4b38      	ldr	r3, [pc, #224]	@ (8000958 <HAL_UART_MspInit+0x110>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000880:	4b35      	ldr	r3, [pc, #212]	@ (8000958 <HAL_UART_MspInit+0x110>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a34      	ldr	r2, [pc, #208]	@ (8000958 <HAL_UART_MspInit+0x110>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b32      	ldr	r3, [pc, #200]	@ (8000958 <HAL_UART_MspInit+0x110>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800089c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a6:	f107 0318 	add.w	r3, r7, #24
 80008aa:	4619      	mov	r1, r3
 80008ac:	482b      	ldr	r0, [pc, #172]	@ (800095c <HAL_UART_MspInit+0x114>)
 80008ae:	f000 fb89 	bl	8000fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4825      	ldr	r0, [pc, #148]	@ (800095c <HAL_UART_MspInit+0x114>)
 80008c8:	f000 fb7c 	bl	8000fc4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2105      	movs	r1, #5
 80008d0:	2034      	movs	r0, #52	@ 0x34
 80008d2:	f000 fa0a 	bl	8000cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80008d6:	2034      	movs	r0, #52	@ 0x34
 80008d8:	f000 fa23 	bl	8000d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008dc:	e036      	b.n	800094c <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART1)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000960 <HAL_UART_MspInit+0x118>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d131      	bne.n	800094c <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <HAL_UART_MspInit+0x110>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000958 <HAL_UART_MspInit+0x110>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b18      	ldr	r3, [pc, #96]	@ (8000958 <HAL_UART_MspInit+0x110>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <HAL_UART_MspInit+0x110>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	4a14      	ldr	r2, [pc, #80]	@ (8000958 <HAL_UART_MspInit+0x110>)
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	6193      	str	r3, [r2, #24]
 800090c:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_UART_MspInit+0x110>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4619      	mov	r1, r3
 800092c:	480d      	ldr	r0, [pc, #52]	@ (8000964 <HAL_UART_MspInit+0x11c>)
 800092e:	f000 fb49 	bl	8000fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000932:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	@ (8000964 <HAL_UART_MspInit+0x11c>)
 8000948:	f000 fb3c 	bl	8000fc4 <HAL_GPIO_Init>
}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004c00 	.word	0x40004c00
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000
 8000960:	40013800 	.word	0x40013800
 8000964:	40010800 	.word	0x40010800

08000968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	@ 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800097e:	4b34      	ldr	r3, [pc, #208]	@ (8000a50 <HAL_InitTick+0xe8>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a33      	ldr	r2, [pc, #204]	@ (8000a50 <HAL_InitTick+0xe8>)
 8000984:	f043 0310 	orr.w	r3, r3, #16
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b31      	ldr	r3, [pc, #196]	@ (8000a50 <HAL_InitTick+0xe8>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000996:	f107 0210 	add.w	r2, r7, #16
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 f8d3 	bl	8001b4c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d103      	bne.n	80009b8 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009b0:	f001 f8a4 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80009b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80009b6:	e004      	b.n	80009c2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009b8:	f001 f8a0 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 80009bc:	4603      	mov	r3, r0
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009c4:	4a23      	ldr	r2, [pc, #140]	@ (8000a54 <HAL_InitTick+0xec>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d0:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009d2:	4a22      	ldr	r2, [pc, #136]	@ (8000a5c <HAL_InitTick+0xf4>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009de:	4a1e      	ldr	r2, [pc, #120]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009f6:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <HAL_InitTick+0xf0>)
 80009f8:	f001 f910 	bl	8001c1c <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d11b      	bne.n	8000a42 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a0a:	4813      	ldr	r0, [pc, #76]	@ (8000a58 <HAL_InitTick+0xf0>)
 8000a0c:	f001 f95e 	bl	8001ccc <HAL_TIM_Base_Start_IT>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d111      	bne.n	8000a42 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000a1e:	2036      	movs	r0, #54	@ 0x36
 8000a20:	f000 f97f 	bl	8000d22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b0f      	cmp	r3, #15
 8000a28:	d808      	bhi.n	8000a3c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	6879      	ldr	r1, [r7, #4]
 8000a2e:	2036      	movs	r0, #54	@ 0x36
 8000a30:	f000 f95b 	bl	8000cea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a34:	4a0a      	ldr	r2, [pc, #40]	@ (8000a60 <HAL_InitTick+0xf8>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
 8000a3a:	e002      	b.n	8000a42 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a42:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3738      	adds	r7, #56	@ 0x38
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	431bde83 	.word	0x431bde83
 8000a58:	20000204 	.word	0x20000204
 8000a5c:	40001000 	.word	0x40001000
 8000a60:	20000004 	.word	0x20000004

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000a68:	f001 f8a0 	bl	8001bac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x8>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000aa0:	4802      	ldr	r0, [pc, #8]	@ (8000aac <UART4_IRQHandler+0x10>)
 8000aa2:	f001 fc5b 	bl	800235c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000168 	.word	0x20000168

08000ab0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab4:	4802      	ldr	r0, [pc, #8]	@ (8000ac0 <TIM6_IRQHandler+0x10>)
 8000ab6:	f001 f969 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000204 	.word	0x20000204

08000ac4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad0:	f7ff fff8 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad4:	480b      	ldr	r0, [pc, #44]	@ (8000b04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ad6:	490c      	ldr	r1, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000adc:	e002      	b.n	8000ae4 <LoopCopyDataInit>

08000ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae2:	3304      	adds	r3, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae8:	d3f9      	bcc.n	8000ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aea:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000aec:	4c09      	ldr	r4, [pc, #36]	@ (8000b14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af0:	e001      	b.n	8000af6 <LoopFillZerobss>

08000af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af4:	3204      	adds	r2, #4

08000af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af8:	d3fb      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afa:	f004 ff45 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afe:	f7ff fb97 	bl	8000230 <main>
  bx lr
 8000b02:	4770      	bx	lr
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b0c:	08005db0 	.word	0x08005db0
  ldr r2, =_sbss
 8000b10:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b14:	20001d70 	.word	0x20001d70

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <HAL_Init+0x28>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	@ (8000b44 <HAL_Init+0x28>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f8d1 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b32:	200f      	movs	r0, #15
 8000b34:	f7ff ff18 	bl	8000968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b38:	f7ff fe4e 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a03      	ldr	r2, [pc, #12]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2000024c 	.word	0x2000024c

08000b6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b02      	ldr	r3, [pc, #8]	@ (8000b7c <HAL_GetTick+0x10>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	2000024c 	.word	0x2000024c

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	@ (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4906      	ldr	r1, [pc, #24]	@ (8000c18 <__NVIC_EnableIRQ+0x34>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff4f 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff64 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ffb2 	bl	8000c70 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff81 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff57 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b085      	sub	sp, #20
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d008      	beq.n	8000d68 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2204      	movs	r2, #4
 8000d5a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e020      	b.n	8000daa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f022 020e 	bic.w	r2, r2, #14
 8000d76:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 0201 	bic.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d005      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2204      	movs	r2, #4
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	e0d6      	b.n	8000f86 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f022 020e 	bic.w	r2, r2, #14
 8000de6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 0201 	bic.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b64      	ldr	r3, [pc, #400]	@ (8000f90 <HAL_DMA_Abort_IT+0x1dc>)
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d958      	bls.n	8000eb6 <HAL_DMA_Abort_IT+0x102>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a62      	ldr	r2, [pc, #392]	@ (8000f94 <HAL_DMA_Abort_IT+0x1e0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d04f      	beq.n	8000eae <HAL_DMA_Abort_IT+0xfa>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a61      	ldr	r2, [pc, #388]	@ (8000f98 <HAL_DMA_Abort_IT+0x1e4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d048      	beq.n	8000eaa <HAL_DMA_Abort_IT+0xf6>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a5f      	ldr	r2, [pc, #380]	@ (8000f9c <HAL_DMA_Abort_IT+0x1e8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d040      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0xf0>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa0 <HAL_DMA_Abort_IT+0x1ec>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d038      	beq.n	8000e9e <HAL_DMA_Abort_IT+0xea>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa4 <HAL_DMA_Abort_IT+0x1f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d030      	beq.n	8000e98 <HAL_DMA_Abort_IT+0xe4>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8000fa8 <HAL_DMA_Abort_IT+0x1f4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d028      	beq.n	8000e92 <HAL_DMA_Abort_IT+0xde>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a52      	ldr	r2, [pc, #328]	@ (8000f90 <HAL_DMA_Abort_IT+0x1dc>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d020      	beq.n	8000e8c <HAL_DMA_Abort_IT+0xd8>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a57      	ldr	r2, [pc, #348]	@ (8000fac <HAL_DMA_Abort_IT+0x1f8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d019      	beq.n	8000e88 <HAL_DMA_Abort_IT+0xd4>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a55      	ldr	r2, [pc, #340]	@ (8000fb0 <HAL_DMA_Abort_IT+0x1fc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d012      	beq.n	8000e84 <HAL_DMA_Abort_IT+0xd0>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a54      	ldr	r2, [pc, #336]	@ (8000fb4 <HAL_DMA_Abort_IT+0x200>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00a      	beq.n	8000e7e <HAL_DMA_Abort_IT+0xca>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a52      	ldr	r2, [pc, #328]	@ (8000fb8 <HAL_DMA_Abort_IT+0x204>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <HAL_DMA_Abort_IT+0xc4>
 8000e72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e76:	e01b      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e7c:	e018      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e82:	e015      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e84:	2310      	movs	r3, #16
 8000e86:	e013      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e011      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e90:	e00e      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e92:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e96:	e00b      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e9c:	e008      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea2:	e005      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000ea4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea8:	e002      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000eaa:	2310      	movs	r3, #16
 8000eac:	e000      	b.n	8000eb0 <HAL_DMA_Abort_IT+0xfc>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4a42      	ldr	r2, [pc, #264]	@ (8000fbc <HAL_DMA_Abort_IT+0x208>)
 8000eb2:	6053      	str	r3, [r2, #4]
 8000eb4:	e057      	b.n	8000f66 <HAL_DMA_Abort_IT+0x1b2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a36      	ldr	r2, [pc, #216]	@ (8000f94 <HAL_DMA_Abort_IT+0x1e0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d04f      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1ac>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <HAL_DMA_Abort_IT+0x1e4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d048      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x1a8>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a33      	ldr	r2, [pc, #204]	@ (8000f9c <HAL_DMA_Abort_IT+0x1e8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d040      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x1a2>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a31      	ldr	r2, [pc, #196]	@ (8000fa0 <HAL_DMA_Abort_IT+0x1ec>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d038      	beq.n	8000f50 <HAL_DMA_Abort_IT+0x19c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a30      	ldr	r2, [pc, #192]	@ (8000fa4 <HAL_DMA_Abort_IT+0x1f0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d030      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x196>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a2e      	ldr	r2, [pc, #184]	@ (8000fa8 <HAL_DMA_Abort_IT+0x1f4>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d028      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x190>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a26      	ldr	r2, [pc, #152]	@ (8000f90 <HAL_DMA_Abort_IT+0x1dc>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d020      	beq.n	8000f3e <HAL_DMA_Abort_IT+0x18a>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	@ (8000fac <HAL_DMA_Abort_IT+0x1f8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_DMA_Abort_IT+0x186>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a29      	ldr	r2, [pc, #164]	@ (8000fb0 <HAL_DMA_Abort_IT+0x1fc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d012      	beq.n	8000f36 <HAL_DMA_Abort_IT+0x182>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a27      	ldr	r2, [pc, #156]	@ (8000fb4 <HAL_DMA_Abort_IT+0x200>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00a      	beq.n	8000f30 <HAL_DMA_Abort_IT+0x17c>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a26      	ldr	r2, [pc, #152]	@ (8000fb8 <HAL_DMA_Abort_IT+0x204>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d102      	bne.n	8000f2a <HAL_DMA_Abort_IT+0x176>
 8000f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f28:	e01b      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f2e:	e018      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f34:	e015      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f36:	2310      	movs	r3, #16
 8000f38:	e013      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e011      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f42:	e00e      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f44:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f48:	e00b      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f4e:	e008      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f54:	e005      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f5a:	e002      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	e000      	b.n	8000f62 <HAL_DMA_Abort_IT+0x1ae>
 8000f60:	2301      	movs	r3, #1
 8000f62:	4a17      	ldr	r2, [pc, #92]	@ (8000fc0 <HAL_DMA_Abort_IT+0x20c>)
 8000f64:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	4798      	blx	r3
    } 
  }
  return status;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020080 	.word	0x40020080
 8000f94:	40020008 	.word	0x40020008
 8000f98:	4002001c 	.word	0x4002001c
 8000f9c:	40020030 	.word	0x40020030
 8000fa0:	40020044 	.word	0x40020044
 8000fa4:	40020058 	.word	0x40020058
 8000fa8:	4002006c 	.word	0x4002006c
 8000fac:	40020408 	.word	0x40020408
 8000fb0:	4002041c 	.word	0x4002041c
 8000fb4:	40020430 	.word	0x40020430
 8000fb8:	40020444 	.word	0x40020444
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b08b      	sub	sp, #44	@ 0x2c
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	e179      	b.n	80012cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8168 	bne.w	80012c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	4a96      	ldr	r2, [pc, #600]	@ (8001254 <HAL_GPIO_Init+0x290>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d05e      	beq.n	80010be <HAL_GPIO_Init+0xfa>
 8001000:	4a94      	ldr	r2, [pc, #592]	@ (8001254 <HAL_GPIO_Init+0x290>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d875      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 8001006:	4a94      	ldr	r2, [pc, #592]	@ (8001258 <HAL_GPIO_Init+0x294>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d058      	beq.n	80010be <HAL_GPIO_Init+0xfa>
 800100c:	4a92      	ldr	r2, [pc, #584]	@ (8001258 <HAL_GPIO_Init+0x294>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d86f      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 8001012:	4a92      	ldr	r2, [pc, #584]	@ (800125c <HAL_GPIO_Init+0x298>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d052      	beq.n	80010be <HAL_GPIO_Init+0xfa>
 8001018:	4a90      	ldr	r2, [pc, #576]	@ (800125c <HAL_GPIO_Init+0x298>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d869      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 800101e:	4a90      	ldr	r2, [pc, #576]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d04c      	beq.n	80010be <HAL_GPIO_Init+0xfa>
 8001024:	4a8e      	ldr	r2, [pc, #568]	@ (8001260 <HAL_GPIO_Init+0x29c>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d863      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 800102a:	4a8e      	ldr	r2, [pc, #568]	@ (8001264 <HAL_GPIO_Init+0x2a0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d046      	beq.n	80010be <HAL_GPIO_Init+0xfa>
 8001030:	4a8c      	ldr	r2, [pc, #560]	@ (8001264 <HAL_GPIO_Init+0x2a0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d85d      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 8001036:	2b12      	cmp	r3, #18
 8001038:	d82a      	bhi.n	8001090 <HAL_GPIO_Init+0xcc>
 800103a:	2b12      	cmp	r3, #18
 800103c:	d859      	bhi.n	80010f2 <HAL_GPIO_Init+0x12e>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <HAL_GPIO_Init+0x80>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	080010bf 	.word	0x080010bf
 8001048:	08001099 	.word	0x08001099
 800104c:	080010ab 	.word	0x080010ab
 8001050:	080010ed 	.word	0x080010ed
 8001054:	080010f3 	.word	0x080010f3
 8001058:	080010f3 	.word	0x080010f3
 800105c:	080010f3 	.word	0x080010f3
 8001060:	080010f3 	.word	0x080010f3
 8001064:	080010f3 	.word	0x080010f3
 8001068:	080010f3 	.word	0x080010f3
 800106c:	080010f3 	.word	0x080010f3
 8001070:	080010f3 	.word	0x080010f3
 8001074:	080010f3 	.word	0x080010f3
 8001078:	080010f3 	.word	0x080010f3
 800107c:	080010f3 	.word	0x080010f3
 8001080:	080010f3 	.word	0x080010f3
 8001084:	080010f3 	.word	0x080010f3
 8001088:	080010a1 	.word	0x080010a1
 800108c:	080010b5 	.word	0x080010b5
 8001090:	4a75      	ldr	r2, [pc, #468]	@ (8001268 <HAL_GPIO_Init+0x2a4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001096:	e02c      	b.n	80010f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e029      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	3304      	adds	r3, #4
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e024      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	3308      	adds	r3, #8
 80010b0:	623b      	str	r3, [r7, #32]
          break;
 80010b2:	e01f      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	330c      	adds	r3, #12
 80010ba:	623b      	str	r3, [r7, #32]
          break;
 80010bc:	e01a      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010c6:	2304      	movs	r3, #4
 80010c8:	623b      	str	r3, [r7, #32]
          break;
 80010ca:	e013      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d105      	bne.n	80010e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d4:	2308      	movs	r3, #8
 80010d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	611a      	str	r2, [r3, #16]
          break;
 80010de:	e009      	b.n	80010f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010e0:	2308      	movs	r3, #8
 80010e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69fa      	ldr	r2, [r7, #28]
 80010e8:	615a      	str	r2, [r3, #20]
          break;
 80010ea:	e003      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
          break;
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x130>
          break;
 80010f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	2bff      	cmp	r3, #255	@ 0xff
 80010f8:	d801      	bhi.n	80010fe <HAL_GPIO_Init+0x13a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	e001      	b.n	8001102 <HAL_GPIO_Init+0x13e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3304      	adds	r3, #4
 8001102:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2bff      	cmp	r3, #255	@ 0xff
 8001108:	d802      	bhi.n	8001110 <HAL_GPIO_Init+0x14c>
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	e002      	b.n	8001116 <HAL_GPIO_Init+0x152>
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	3b08      	subs	r3, #8
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	210f      	movs	r1, #15
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	401a      	ands	r2, r3
 8001128:	6a39      	ldr	r1, [r7, #32]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80c1 	beq.w	80012c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001144:	4b49      	ldr	r3, [pc, #292]	@ (800126c <HAL_GPIO_Init+0x2a8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a48      	ldr	r2, [pc, #288]	@ (800126c <HAL_GPIO_Init+0x2a8>)
 800114a:	f043 0301 	orr.w	r3, r3, #1
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b46      	ldr	r3, [pc, #280]	@ (800126c <HAL_GPIO_Init+0x2a8>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800115c:	4a44      	ldr	r2, [pc, #272]	@ (8001270 <HAL_GPIO_Init+0x2ac>)
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3c      	ldr	r2, [pc, #240]	@ (8001274 <HAL_GPIO_Init+0x2b0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d01f      	beq.n	80011c8 <HAL_GPIO_Init+0x204>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3b      	ldr	r2, [pc, #236]	@ (8001278 <HAL_GPIO_Init+0x2b4>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d019      	beq.n	80011c4 <HAL_GPIO_Init+0x200>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3a      	ldr	r2, [pc, #232]	@ (800127c <HAL_GPIO_Init+0x2b8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d013      	beq.n	80011c0 <HAL_GPIO_Init+0x1fc>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a39      	ldr	r2, [pc, #228]	@ (8001280 <HAL_GPIO_Init+0x2bc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d00d      	beq.n	80011bc <HAL_GPIO_Init+0x1f8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a38      	ldr	r2, [pc, #224]	@ (8001284 <HAL_GPIO_Init+0x2c0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d007      	beq.n	80011b8 <HAL_GPIO_Init+0x1f4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a37      	ldr	r2, [pc, #220]	@ (8001288 <HAL_GPIO_Init+0x2c4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d101      	bne.n	80011b4 <HAL_GPIO_Init+0x1f0>
 80011b0:	2305      	movs	r3, #5
 80011b2:	e00a      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011b4:	2306      	movs	r3, #6
 80011b6:	e008      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011b8:	2304      	movs	r3, #4
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011bc:	2303      	movs	r3, #3
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x206>
 80011c8:	2300      	movs	r3, #0
 80011ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011da:	4925      	ldr	r1, [pc, #148]	@ (8001270 <HAL_GPIO_Init+0x2ac>)
 80011dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011f4:	4b25      	ldr	r3, [pc, #148]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	4924      	ldr	r1, [pc, #144]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4920      	ldr	r1, [pc, #128]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 800120c:	4013      	ands	r3, r2
 800120e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	491a      	ldr	r1, [pc, #104]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	60cb      	str	r3, [r1, #12]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4916      	ldr	r1, [pc, #88]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 8001234:	4013      	ands	r3, r2
 8001236:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d025      	beq.n	8001290 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	4910      	ldr	r1, [pc, #64]	@ (800128c <HAL_GPIO_Init+0x2c8>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e025      	b.n	800129e <HAL_GPIO_Init+0x2da>
 8001252:	bf00      	nop
 8001254:	10320000 	.word	0x10320000
 8001258:	10310000 	.word	0x10310000
 800125c:	10220000 	.word	0x10220000
 8001260:	10210000 	.word	0x10210000
 8001264:	10120000 	.word	0x10120000
 8001268:	10110000 	.word	0x10110000
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00
 800127c:	40011000 	.word	0x40011000
 8001280:	40011400 	.word	0x40011400
 8001284:	40011800 	.word	0x40011800
 8001288:	40011c00 	.word	0x40011c00
 800128c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	4913      	ldr	r1, [pc, #76]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800129a:	4013      	ands	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d006      	beq.n	80012b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	490e      	ldr	r1, [pc, #56]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	43db      	mvns	r3, r3
 80012c0:	4909      	ldr	r1, [pc, #36]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	3301      	adds	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f47f ae7e 	bne.w	8000fd8 <HAL_GPIO_Init+0x14>
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	372c      	adds	r7, #44	@ 0x2c
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	611a      	str	r2, [r3, #16]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4013      	ands	r3, r2
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43d9      	mvns	r1, r3
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	400b      	ands	r3, r1
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	611a      	str	r2, [r3, #16]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
	...

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e272      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8087 	beq.w	800147e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001370:	4b92      	ldr	r3, [pc, #584]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b04      	cmp	r3, #4
 800137a:	d00c      	beq.n	8001396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137c:	4b8f      	ldr	r3, [pc, #572]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d112      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
 8001388:	4b8c      	ldr	r3, [pc, #560]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b89      	ldr	r3, [pc, #548]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d06c      	beq.n	800147c <HAL_RCC_OscConfig+0x12c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d168      	bne.n	800147c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e24c      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x76>
 80013b8:	4b80      	ldr	r3, [pc, #512]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a7f      	ldr	r2, [pc, #508]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e02e      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x98>
 80013ce:	4b7b      	ldr	r3, [pc, #492]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a7a      	ldr	r2, [pc, #488]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b78      	ldr	r3, [pc, #480]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a77      	ldr	r2, [pc, #476]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0xbc>
 80013f2:	4b72      	ldr	r3, [pc, #456]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a71      	ldr	r2, [pc, #452]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6f      	ldr	r3, [pc, #444]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6e      	ldr	r2, [pc, #440]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xd4>
 800140c:	4b6b      	ldr	r3, [pc, #428]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a6a      	ldr	r2, [pc, #424]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a67      	ldr	r2, [pc, #412]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fb9e 	bl	8000b6c <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fb9a 	bl	8000b6c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	@ 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e200      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5d      	ldr	r3, [pc, #372]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xe4>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fb8a 	bl	8000b6c <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fb86 	bl	8000b6c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1ec      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b53      	ldr	r3, [pc, #332]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0x10c>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148a:	4b4c      	ldr	r3, [pc, #304]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001496:	4b49      	ldr	r3, [pc, #292]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
 80014a2:	4b46      	ldr	r3, [pc, #280]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b43      	ldr	r3, [pc, #268]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c0      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3d      	ldr	r3, [pc, #244]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4939      	ldr	r1, [pc, #228]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b36      	ldr	r3, [pc, #216]	@ (80015c0 <HAL_RCC_OscConfig+0x270>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb3f 	bl	8000b6c <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fb3b 	bl	8000b6c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a1      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4927      	ldr	r1, [pc, #156]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <HAL_RCC_OscConfig+0x270>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fb1e 	bl	8000b6c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fb1a 	bl	8000b6c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e180      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03a      	beq.n	80015d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d019      	beq.n	800159a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <HAL_RCC_OscConfig+0x274>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156c:	f7ff fafe 	bl	8000b6c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fafa 	bl	8000b6c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e160      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <HAL_RCC_OscConfig+0x26c>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001592:	2001      	movs	r0, #1
 8001594:	f000 fb1e 	bl	8001bd4 <RCC_Delay>
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159a:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <HAL_RCC_OscConfig+0x274>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a0:	f7ff fae4 	bl	8000b6c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a6:	e00f      	b.n	80015c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fae0 	bl	8000b6c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d908      	bls.n	80015c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e146      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	42420000 	.word	0x42420000
 80015c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b92      	ldr	r3, [pc, #584]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e9      	bne.n	80015a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a6 	beq.w	800172e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b88      	ldr	r3, [pc, #544]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a87      	ldr	r2, [pc, #540]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b85      	ldr	r3, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160e:	4b82      	ldr	r3, [pc, #520]	@ (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d118      	bne.n	800164c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161a:	4b7f      	ldr	r3, [pc, #508]	@ (8001818 <HAL_RCC_OscConfig+0x4c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a7e      	ldr	r2, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001620:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001626:	f7ff faa1 	bl	8000b6c <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162e:	f7ff fa9d 	bl	8000b6c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	@ 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e103      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <HAL_RCC_OscConfig+0x4c8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d106      	bne.n	8001662 <HAL_RCC_OscConfig+0x312>
 8001654:	4b6f      	ldr	r3, [pc, #444]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a6e      	ldr	r2, [pc, #440]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6213      	str	r3, [r2, #32]
 8001660:	e02d      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x334>
 800166a:	4b6a      	ldr	r3, [pc, #424]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a69      	ldr	r2, [pc, #420]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	4b67      	ldr	r3, [pc, #412]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4a66      	ldr	r2, [pc, #408]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	6213      	str	r3, [r2, #32]
 8001682:	e01c      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x356>
 800168c:	4b61      	ldr	r3, [pc, #388]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a60      	ldr	r2, [pc, #384]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b5e      	ldr	r3, [pc, #376]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a5d      	ldr	r2, [pc, #372]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x36e>
 80016a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b58      	ldr	r3, [pc, #352]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a57      	ldr	r2, [pc, #348]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d015      	beq.n	80016f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fa51 	bl	8000b6c <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff fa4d 	bl	8000b6c <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e0b1      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0ee      	beq.n	80016ce <HAL_RCC_OscConfig+0x37e>
 80016f0:	e014      	b.n	800171c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f2:	f7ff fa3b 	bl	8000b6c <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	e00a      	b.n	8001710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff fa37 	bl	8000b6c <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e09b      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	4b40      	ldr	r3, [pc, #256]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1ee      	bne.n	80016fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001722:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800172c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8087 	beq.w	8001846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d061      	beq.n	8001808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d146      	bne.n	80017da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800174c:	4b33      	ldr	r3, [pc, #204]	@ (800181c <HAL_RCC_OscConfig+0x4cc>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff fa0b 	bl	8000b6c <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175a:	f7ff fa07 	bl	8000b6c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e06d      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800176c:	4b29      	ldr	r3, [pc, #164]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001780:	d108      	bne.n	8001794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001782:	4b24      	ldr	r3, [pc, #144]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	4921      	ldr	r1, [pc, #132]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a19      	ldr	r1, [r3, #32]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	430b      	orrs	r3, r1
 80017a6:	491b      	ldr	r1, [pc, #108]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b2:	f7ff f9db 	bl	8000b6c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ba:	f7ff f9d7 	bl	8000b6c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e03d      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x46a>
 80017d8:	e035      	b.n	8001846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff f9c4 	bl	8000b6c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff f9c0 	bl	8000b6c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e026      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x498>
 8001806:	e01e      	b.n	8001846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d107      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e019      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
 8001814:	40021000 	.word	0x40021000
 8001818:	40007000 	.word	0x40007000
 800181c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_RCC_OscConfig+0x500>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	429a      	cmp	r2, r3
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0d0      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001868:	4b6a      	ldr	r3, [pc, #424]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	429a      	cmp	r2, r3
 8001874:	d910      	bls.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001876:	4b67      	ldr	r3, [pc, #412]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	4965      	ldr	r1, [pc, #404]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a58      	ldr	r2, [pc, #352]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80018ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d040      	beq.n	8001974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d115      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d107      	bne.n	8001922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e073      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001922:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001932:	4b39      	ldr	r3, [pc, #228]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 0203 	bic.w	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4936      	ldr	r1, [pc, #216]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff f912 	bl	8000b6c <HAL_GetTick>
 8001948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194a:	e00a      	b.n	8001962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194c:	f7ff f90e 	bl	8000b6c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e053      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001962:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 020c 	and.w	r2, r3, #12
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	429a      	cmp	r2, r3
 8001972:	d1eb      	bne.n	800194c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001974:	4b27      	ldr	r3, [pc, #156]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d210      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4922      	ldr	r1, [pc, #136]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ce:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f82d 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019e6:	4602      	mov	r2, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	490a      	ldr	r1, [pc, #40]	@ (8001a1c <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	5ccb      	ldrb	r3, [r1, r3]
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_RCC_ClockConfig+0x1cc>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_ClockConfig+0x1d0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ffb0 	bl	8000968 <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40022000 	.word	0x40022000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08005d7c 	.word	0x08005d7c
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <HAL_RCC_EnableCSS+0x14>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	4242004c 	.word	0x4242004c

08001a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 030c 	and.w	r3, r3, #12
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d002      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x30>
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x36>
 8001a6e:	e027      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a72:	613b      	str	r3, [r7, #16]
      break;
 8001a74:	e027      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	0c9b      	lsrs	r3, r3, #18
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d010      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	0c5b      	lsrs	r3, r3, #17
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	4a11      	ldr	r2, [pc, #68]	@ (8001ae0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aa2:	fb03 f202 	mul.w	r2, r3, r2
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e004      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ab4:	fb02 f303 	mul.w	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	613b      	str	r3, [r7, #16]
      break;
 8001abe:	e002      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac2:	613b      	str	r3, [r7, #16]
      break;
 8001ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac6:	693b      	ldr	r3, [r7, #16]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	007a1200 	.word	0x007a1200
 8001adc:	08005d94 	.word	0x08005d94
 8001ae0:	08005da4 	.word	0x08005da4
 8001ae4:	003d0900 	.word	0x003d0900

08001ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aec:	4b02      	ldr	r3, [pc, #8]	@ (8001af8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000000 	.word	0x20000000

08001afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b00:	f7ff fff2 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b04:	4602      	mov	r2, r0
 8001b06:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	4903      	ldr	r1, [pc, #12]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b12:	5ccb      	ldrb	r3, [r1, r3]
 8001b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08005d8c 	.word	0x08005d8c

08001b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0adb      	lsrs	r3, r3, #11
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	@ (8001b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08005d8c 	.word	0x08005d8c

08001b4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x58>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0207 	and.w	r2, r3, #7
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40022000 	.word	0x40022000

08001bac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_NMI_IRQHandler+0x20>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb8:	2b80      	cmp	r3, #128	@ 0x80
 8001bba:	d104      	bne.n	8001bc6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001bbc:	f000 f828 	bl	8001c10 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001bc2:	2280      	movs	r2, #128	@ 0x80
 8001bc4:	701a      	strb	r2, [r3, #0]
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	4002100a 	.word	0x4002100a

08001bd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <RCC_Delay+0x34>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <RCC_Delay+0x38>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a5b      	lsrs	r3, r3, #9
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf0:	bf00      	nop
  }
  while (Delay --);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	60fa      	str	r2, [r7, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f9      	bne.n	8001bf0 <RCC_Delay+0x1c>
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	10624dd3 	.word	0x10624dd3

08001c10 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f839 	bl	8001cba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 f9c2 	bl	8001fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d001      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e044      	b.n	8001d6e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_TIM_Base_Start_IT+0xac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d018      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_TIM_Base_Start_IT+0xb0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d013      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d18:	d00e      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a18      	ldr	r2, [pc, #96]	@ (8001d80 <HAL_TIM_Base_Start_IT+0xb4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d009      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_TIM_Base_Start_IT+0x6c>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d111      	bne.n	8001d5c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d010      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5a:	e007      	b.n	8001d6c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0201 	orr.w	r2, r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40012c00 	.word	0x40012c00
 8001d7c:	40013400 	.word	0x40013400
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000800 	.word	0x40000800
 8001d88:	40000c00 	.word	0x40000c00

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d122      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d11b      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0202 	mvn.w	r2, #2
 8001db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8ed 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8e0 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8ef 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0204 	mvn.w	r2, #4
 8001e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f8c3 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8b6 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8c5 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0208 	mvn.w	r2, #8
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2204      	movs	r2, #4
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f899 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f88c 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f89b 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0210 	mvn.w	r2, #16
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2208      	movs	r2, #8
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f86f 	bl	8001fae <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f862 	bl	8001f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f871 	bl	8001fc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10e      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0201 	mvn.w	r2, #1
 8001f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7fe fc16 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	2b80      	cmp	r3, #128	@ 0x80
 8001f1c:	d10e      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b80      	cmp	r3, #128	@ 0x80
 8001f2a:	d107      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8d7 	bl	80020ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f46:	2b40      	cmp	r3, #64	@ 0x40
 8001f48:	d10e      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f54:	2b40      	cmp	r3, #64	@ 0x40
 8001f56:	d107      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f835 	bl	8001fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b20      	cmp	r3, #32
 8001f82:	d107      	bne.n	8001f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0220 	mvn.w	r2, #32
 8001f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f8a2 	bl	80020d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr

08001fae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a33      	ldr	r2, [pc, #204]	@ (80020c4 <TIM_Base_SetConfig+0xe0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d013      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a32      	ldr	r2, [pc, #200]	@ (80020c8 <TIM_Base_SetConfig+0xe4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00f      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <TIM_Base_SetConfig+0xe8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a2e      	ldr	r2, [pc, #184]	@ (80020d0 <TIM_Base_SetConfig+0xec>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <TIM_Base_SetConfig+0xf0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a22      	ldr	r2, [pc, #136]	@ (80020c4 <TIM_Base_SetConfig+0xe0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <TIM_Base_SetConfig+0x82>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <TIM_Base_SetConfig+0xe4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TIM_Base_SetConfig+0x82>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204c:	d00b      	beq.n	8002066 <TIM_Base_SetConfig+0x82>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1e      	ldr	r2, [pc, #120]	@ (80020cc <TIM_Base_SetConfig+0xe8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TIM_Base_SetConfig+0x82>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1d      	ldr	r2, [pc, #116]	@ (80020d0 <TIM_Base_SetConfig+0xec>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0x82>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1c      	ldr	r2, [pc, #112]	@ (80020d4 <TIM_Base_SetConfig+0xf0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800206c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <TIM_Base_SetConfig+0xe0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0xc8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <TIM_Base_SetConfig+0xe4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d103      	bne.n	80020b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40013400 	.word	0x40013400
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00

080020d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e042      	b.n	8002194 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fb90 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	@ 0x24
 800212c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800213e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 fdfb 	bl	8002d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002154:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002164:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002174:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	@ 0x28
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d16d      	bne.n	8002298 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_UART_Transmit+0x2c>
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e066      	b.n	800229a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	@ 0x21
 80021d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021da:	f7fe fcc7 	bl	8000b6c <HAL_GetTick>
 80021de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	88fa      	ldrh	r2, [r7, #6]
 80021e4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021f4:	d108      	bne.n	8002208 <HAL_UART_Transmit+0x6c>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	e003      	b.n	8002210 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002210:	e02a      	b.n	8002268 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	2180      	movs	r1, #128	@ 0x80
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fb4a 	bl	80028b6 <UART_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e036      	b.n	800229a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10b      	bne.n	800224a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002240:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	3302      	adds	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	e007      	b.n	800225a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3301      	adds	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800225e:	b29b      	uxth	r3, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1cf      	bne.n	8002212 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	2140      	movs	r1, #64	@ 0x40
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb1a 	bl	80028b6 <UART_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e006      	b.n	800229a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	e000      	b.n	800229a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002298:	2302      	movs	r3, #2
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	3720      	adds	r7, #32
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08c      	sub	sp, #48	@ 0x30
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d14a      	bne.n	8002352 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e043      	b.n	8002354 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2201      	movs	r2, #1
 80022d0:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80022d8:	88fb      	ldrh	r3, [r7, #6]
 80022da:	461a      	mov	r2, r3
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb57 	bl	8002992 <UART_Start_Receive_IT>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80022ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d12c      	bne.n	800234c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d125      	bne.n	8002346 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	617b      	str	r3, [r7, #20]
   return(result);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f043 0310 	orr.w	r3, r3, #16
 8002326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002330:	627a      	str	r2, [r7, #36]	@ 0x24
 8002332:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002334:	6a39      	ldr	r1, [r7, #32]
 8002336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002338:	e841 2300 	strex	r3, r2, [r1]
 800233c:	61fb      	str	r3, [r7, #28]
   return(result);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e5      	bne.n	8002310 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002344:	e002      	b.n	800234c <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800234c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002350:	e000      	b.n	8002354 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3730      	adds	r7, #48	@ 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b0ba      	sub	sp, #232	@ 0xe8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800238e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800239a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_UART_IRQHandler+0x66>
 80023ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fbff 	bl	8002bbe <UART_Receive_IT>
      return;
 80023c0:	e25b      	b.n	800287a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80de 	beq.w	8002588 <HAL_UART_IRQHandler+0x22c>
 80023cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80d1 	beq.w	8002588 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <HAL_UART_IRQHandler+0xae>
 80023f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	f043 0201 	orr.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800240a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_UART_IRQHandler+0xd2>
 8002416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800242e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_UART_IRQHandler+0xf6>
 800243a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f043 0204 	orr.w	r2, r3, #4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d011      	beq.n	8002482 <HAL_UART_IRQHandler+0x126>
 800245e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800246a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f043 0208 	orr.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 81f2 	beq.w	8002870 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_UART_IRQHandler+0x14e>
 8002498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fb8a 	bl	8002bbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <HAL_UART_IRQHandler+0x17a>
 80024ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04f      	beq.n	8002576 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fa94 	bl	8002a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d041      	beq.n	800256e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3314      	adds	r3, #20
 80024f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002500:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002508:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	3314      	adds	r3, #20
 8002512:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002516:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800251a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002522:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002526:	e841 2300 	strex	r3, r2, [r1]
 800252a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800252e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1d9      	bne.n	80024ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d013      	beq.n	8002566 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002542:	4a7e      	ldr	r2, [pc, #504]	@ (800273c <HAL_UART_IRQHandler+0x3e0>)
 8002544:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fc32 	bl	8000db4 <HAL_DMA_Abort_IT>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002560:	4610      	mov	r0, r2
 8002562:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e00e      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f99c 	bl	80028a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256c:	e00a      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f998 	bl	80028a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	e006      	b.n	8002584 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f994 	bl	80028a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002582:	e175      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002584:	bf00      	nop
    return;
 8002586:	e173      	b.n	8002870 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	2b01      	cmp	r3, #1
 800258e:	f040 814f 	bne.w	8002830 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 8148 	beq.w	8002830 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8141 	beq.w	8002830 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 80b6 	beq.w	8002740 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8145 	beq.w	8002874 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025f2:	429a      	cmp	r2, r3
 80025f4:	f080 813e 	bcs.w	8002874 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	2b20      	cmp	r3, #32
 8002608:	f000 8088 	beq.w	800271c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002616:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002622:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002626:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800262a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002638:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800263c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002640:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002644:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002650:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1d9      	bne.n	800260c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3314      	adds	r3, #20
 800265e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800267c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002680:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002684:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002688:	e841 2300 	strex	r3, r2, [r1]
 800268c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800268e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e1      	bne.n	8002658 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3314      	adds	r3, #20
 800269a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800269e:	e853 3f00 	ldrex	r3, [r3]
 80026a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80026a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3314      	adds	r3, #20
 80026b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1e3      	bne.n	8002694 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	330c      	adds	r3, #12
 80026e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026e4:	e853 3f00 	ldrex	r3, [r3]
 80026e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026ec:	f023 0310 	bic.w	r3, r3, #16
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002700:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002702:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002704:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002706:	e841 2300 	strex	r3, r2, [r1]
 800270a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800270c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1e3      	bne.n	80026da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fb11 	bl	8000d3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800272a:	b29b      	uxth	r3, r3
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	4619      	mov	r1, r3
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fd feea 	bl	800050c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002738:	e09c      	b.n	8002874 <HAL_UART_IRQHandler+0x518>
 800273a:	bf00      	nop
 800273c:	08002ac9 	.word	0x08002ac9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002748:	b29b      	uxth	r3, r3
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 808e 	beq.w	8002878 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800275c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8089 	beq.w	8002878 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002778:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800277c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800278a:	647a      	str	r2, [r7, #68]	@ 0x44
 800278c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002790:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002792:	e841 2300 	strex	r3, r2, [r1]
 8002796:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e3      	bne.n	8002766 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3314      	adds	r3, #20
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	623b      	str	r3, [r7, #32]
   return(result);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3314      	adds	r3, #20
 80027be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ca:	e841 2300 	strex	r3, r2, [r1]
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e3      	bne.n	800279e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	330c      	adds	r3, #12
 80027ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	e853 3f00 	ldrex	r3, [r3]
 80027f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0310 	bic.w	r3, r3, #16
 80027fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	69b9      	ldr	r1, [r7, #24]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	617b      	str	r3, [r7, #20]
   return(result);
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e3      	bne.n	80027e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002822:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002826:	4619      	mov	r1, r3
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7fd fe6f 	bl	800050c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800282e:	e023      	b.n	8002878 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d009      	beq.n	8002850 <HAL_UART_IRQHandler+0x4f4>
 800283c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f951 	bl	8002af0 <UART_Transmit_IT>
    return;
 800284e:	e014      	b.n	800287a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00e      	beq.n	800287a <HAL_UART_IRQHandler+0x51e>
 800285c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f990 	bl	8002b8e <UART_EndTransmit_IT>
    return;
 800286e:	e004      	b.n	800287a <HAL_UART_IRQHandler+0x51e>
    return;
 8002870:	bf00      	nop
 8002872:	e002      	b.n	800287a <HAL_UART_IRQHandler+0x51e>
      return;
 8002874:	bf00      	nop
 8002876:	e000      	b.n	800287a <HAL_UART_IRQHandler+0x51e>
      return;
 8002878:	bf00      	nop
  }
}
 800287a:	37e8      	adds	r7, #232	@ 0xe8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b090      	sub	sp, #64	@ 0x40
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	603b      	str	r3, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c6:	e050      	b.n	800296a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d04c      	beq.n	800296a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80028d6:	f7fe f949 	bl	8000b6c <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d241      	bcs.n	800296a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80028fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	330c      	adds	r3, #12
 8002904:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002906:	637a      	str	r2, [r7, #52]	@ 0x34
 8002908:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800290c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800290e:	e841 2300 	strex	r3, r2, [r1]
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	613b      	str	r3, [r7, #16]
   return(result);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	3314      	adds	r3, #20
 8002938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800293a:	623a      	str	r2, [r7, #32]
 800293c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	69f9      	ldr	r1, [r7, #28]
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	61bb      	str	r3, [r7, #24]
   return(result);
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d09f      	beq.n	80028c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3740      	adds	r7, #64	@ 0x40
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	4613      	mov	r3, r2
 800299e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	88fa      	ldrh	r2, [r7, #6]
 80029b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2222      	movs	r2, #34	@ 0x22
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0220 	orr.w	r2, r2, #32
 80029f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b095      	sub	sp, #84	@ 0x54
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e5      	bne.n	8002a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d119      	bne.n	8002ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	330c      	adds	r3, #12
 8002a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	e853 3f00 	ldrex	r3, [r3]
 8002a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f023 0310 	bic.w	r3, r3, #16
 8002a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a9c:	61ba      	str	r2, [r7, #24]
 8002a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	6979      	ldr	r1, [r7, #20]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e5      	bne.n	8002a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002abe:	bf00      	nop
 8002ac0:	3754      	adds	r7, #84	@ 0x54
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f7ff fede 	bl	80028a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b21      	cmp	r3, #33	@ 0x21
 8002b02:	d13e      	bne.n	8002b82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0c:	d114      	bne.n	8002b38 <UART_Transmit_IT+0x48>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d110      	bne.n	8002b38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	881b      	ldrh	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	1c9a      	adds	r2, r3, #2
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]
 8002b36:	e008      	b.n	8002b4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	1c59      	adds	r1, r3, #1
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6211      	str	r1, [r2, #32]
 8002b42:	781a      	ldrb	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4619      	mov	r1, r3
 8002b58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10f      	bne.n	8002b7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff fe66 	bl	8002880 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08c      	sub	sp, #48	@ 0x30
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b22      	cmp	r3, #34	@ 0x22
 8002bd0:	f040 80ae 	bne.w	8002d30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bdc:	d117      	bne.n	8002c0e <UART_Receive_IT+0x50>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d113      	bne.n	8002c0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c06:	1c9a      	adds	r2, r3, #2
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c0c:	e026      	b.n	8002c5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c20:	d007      	beq.n	8002c32 <UART_Receive_IT+0x74>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <UART_Receive_IT+0x82>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e008      	b.n	8002c52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d15d      	bne.n	8002d2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0220 	bic.w	r2, r2, #32
 8002c7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d135      	bne.n	8002d22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	e853 3f00 	ldrex	r3, [r3]
 8002cca:	613b      	str	r3, [r7, #16]
   return(result);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f023 0310 	bic.w	r3, r3, #16
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cdc:	623a      	str	r2, [r7, #32]
 8002cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	69f9      	ldr	r1, [r7, #28]
 8002ce2:	6a3a      	ldr	r2, [r7, #32]
 8002ce4:	e841 2300 	strex	r3, r2, [r1]
 8002ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e5      	bne.n	8002cbc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d10a      	bne.n	8002d14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d18:	4619      	mov	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fbf6 	bl	800050c <HAL_UARTEx_RxEventCallback>
 8002d20:	e002      	b.n	8002d28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff fdb5 	bl	8002892 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e002      	b.n	8002d32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3730      	adds	r7, #48	@ 0x30
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d76:	f023 030c 	bic.w	r3, r3, #12
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	430b      	orrs	r3, r1
 8002d82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e50 <UART_SetConfig+0x114>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002da4:	f7fe febe 	bl	8001b24 <HAL_RCC_GetPCLK2Freq>
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	e002      	b.n	8002db2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7fe fea6 	bl	8001afc <HAL_RCC_GetPCLK1Freq>
 8002db0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009a      	lsls	r2, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	4a22      	ldr	r2, [pc, #136]	@ (8002e54 <UART_SetConfig+0x118>)
 8002dca:	fba2 2303 	umull	r2, r3, r2, r3
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	0119      	lsls	r1, r3, #4
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	009a      	lsls	r2, r3, #2
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <UART_SetConfig+0x118>)
 8002dea:	fba3 0302 	umull	r0, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2064      	movs	r0, #100	@ 0x64
 8002df2:	fb00 f303 	mul.w	r3, r0, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	3332      	adds	r3, #50	@ 0x32
 8002dfc:	4a15      	ldr	r2, [pc, #84]	@ (8002e54 <UART_SetConfig+0x118>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e08:	4419      	add	r1, r3
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	009a      	lsls	r2, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <UART_SetConfig+0x118>)
 8002e22:	fba3 0302 	umull	r0, r3, r3, r2
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2064      	movs	r0, #100	@ 0x64
 8002e2a:	fb00 f303 	mul.w	r3, r0, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	3332      	adds	r3, #50	@ 0x32
 8002e34:	4a07      	ldr	r2, [pc, #28]	@ (8002e54 <UART_SetConfig+0x118>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	440a      	add	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e48:	bf00      	nop
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40013800 	.word	0x40013800
 8002e54:	51eb851f 	.word	0x51eb851f

08002e58 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e5e:	f3ef 8305 	mrs	r3, IPSR
 8002e62:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <osKernelInitialize+0x32>
 8002e76:	4b10      	ldr	r3, [pc, #64]	@ (8002eb8 <osKernelInitialize+0x60>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d109      	bne.n	8002e92 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8002e82:	603b      	str	r3, [r7, #0]
  return(result);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e8a:	f06f 0305 	mvn.w	r3, #5
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	e00c      	b.n	8002eac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e92:	4b09      	ldr	r3, [pc, #36]	@ (8002eb8 <osKernelInitialize+0x60>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <osKernelInitialize+0x60>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e002      	b.n	8002eac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000250 	.word	0x20000250

08002ebc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ec2:	f3ef 8305 	mrs	r3, IPSR
 8002ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ece:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <osKernelStart+0x32>
 8002eda:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <osKernelStart+0x64>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d109      	bne.n	8002ef6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002eee:	f06f 0305 	mvn.w	r3, #5
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e00e      	b.n	8002f14 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <osKernelStart+0x64>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002efe:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <osKernelStart+0x64>)
 8002f00:	2202      	movs	r2, #2
 8002f02:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002f04:	f001 f8a8 	bl	8004058 <vTaskStartScheduler>
      stat = osOK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	e002      	b.n	8002f14 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000250 	.word	0x20000250

08002f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b092      	sub	sp, #72	@ 0x48
 8002f28:	af04      	add	r7, sp, #16
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f34:	f3ef 8305 	mrs	r3, IPSR
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f040 8094 	bne.w	800306a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f42:	f3ef 8310 	mrs	r3, PRIMASK
 8002f46:	623b      	str	r3, [r7, #32]
  return(result);
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f040 808d 	bne.w	800306a <osThreadNew+0x146>
 8002f50:	4b48      	ldr	r3, [pc, #288]	@ (8003074 <osThreadNew+0x150>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d106      	bne.n	8002f66 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f58:	f3ef 8311 	mrs	r3, BASEPRI
 8002f5c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f040 8082 	bne.w	800306a <osThreadNew+0x146>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d07e      	beq.n	800306a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002f70:	2318      	movs	r3, #24
 8002f72:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8002f74:	2300      	movs	r3, #0
 8002f76:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002f78:	f107 031b 	add.w	r3, r7, #27
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d045      	beq.n	8003016 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <osThreadNew+0x74>
        name = attr->name;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <osThreadNew+0x9a>
 8002fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fae:	2b38      	cmp	r3, #56	@ 0x38
 8002fb0:	d805      	bhi.n	8002fbe <osThreadNew+0x9a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <osThreadNew+0x9e>
        return (NULL);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e054      	b.n	800306c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <osThreadNew+0xd4>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2ba7      	cmp	r3, #167	@ 0xa7
 8002fe0:	d90a      	bls.n	8002ff8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d006      	beq.n	8002ff8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <osThreadNew+0xd4>
        mem = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	e010      	b.n	800301a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <osThreadNew+0xf6>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d108      	bne.n	800301a <osThreadNew+0xf6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d104      	bne.n	800301a <osThreadNew+0xf6>
          mem = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003014:	e001      	b.n	800301a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	2b01      	cmp	r3, #1
 800301e:	d110      	bne.n	8003042 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003028:	9202      	str	r2, [sp, #8]
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003034:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fe24 	bl	8003c84 <xTaskCreateStatic>
 800303c:	4603      	mov	r3, r0
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e013      	b.n	800306a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d110      	bne.n	800306a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304a:	b29a      	uxth	r2, r3
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fe71 	bl	8003d42 <xTaskCreate>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <osThreadNew+0x146>
          hTask = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800306a:	697b      	ldr	r3, [r7, #20]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3738      	adds	r7, #56	@ 0x38
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	20000250 	.word	0x20000250

08003078 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003080:	f3ef 8305 	mrs	r3, IPSR
 8003084:	613b      	str	r3, [r7, #16]
  return(result);
 8003086:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10f      	bne.n	80030ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	60fb      	str	r3, [r7, #12]
  return(result);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <osDelay+0x34>
 8003098:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <osDelay+0x58>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d109      	bne.n	80030b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030a0:	f3ef 8311 	mrs	r3, BASEPRI
 80030a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <osDelay+0x3c>
    stat = osErrorISR;
 80030ac:	f06f 0305 	mvn.w	r3, #5
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e007      	b.n	80030c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 ff94 	bl	8003fec <vTaskDelay>
    }
  }

  return (stat);
 80030c4:	697b      	ldr	r3, [r7, #20]
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000250 	.word	0x20000250

080030d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a06      	ldr	r2, [pc, #24]	@ (80030fc <vApplicationGetIdleTaskMemory+0x28>)
 80030e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4a05      	ldr	r2, [pc, #20]	@ (8003100 <vApplicationGetIdleTaskMemory+0x2c>)
 80030ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	20000254 	.word	0x20000254
 8003100:	200002fc 	.word	0x200002fc

08003104 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <vApplicationGetTimerTaskMemory+0x2c>)
 8003114:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4a06      	ldr	r2, [pc, #24]	@ (8003134 <vApplicationGetTimerTaskMemory+0x30>)
 800311a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003122:	601a      	str	r2, [r3, #0]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	200004fc 	.word	0x200004fc
 8003134:	200005a4 	.word	0x200005a4

08003138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f103 0208 	add.w	r2, r3, #8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f04f 32ff 	mov.w	r2, #4294967295
 8003150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f103 0208 	add.w	r2, r3, #8
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f103 0208 	add.w	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ea:	d103      	bne.n	80031f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e00c      	b.n	800320e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3308      	adds	r3, #8
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e002      	b.n	8003202 <vListInsert+0x2e>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d2f6      	bcs.n	80031fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6892      	ldr	r2, [r2, #8]
 800325a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d103      	bne.n	8003278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1e5a      	subs	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
	...

08003298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032c4:	f002 f822 	bl	800530c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	68f9      	ldr	r1, [r7, #12]
 80032d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	441a      	add	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	3b01      	subs	r3, #1
 80032f6:	68f9      	ldr	r1, [r7, #12]
 80032f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	22ff      	movs	r2, #255	@ 0xff
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	22ff      	movs	r2, #255	@ 0xff
 8003310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d114      	bne.n	8003344 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	3310      	adds	r3, #16
 8003326:	4618      	mov	r0, r3
 8003328:	f001 f936 	bl	8004598 <xTaskRemoveFromEventList>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003332:	4b0d      	ldr	r3, [pc, #52]	@ (8003368 <xQueueGenericReset+0xd0>)
 8003334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	e009      	b.n	8003358 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3310      	adds	r3, #16
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fef5 	bl	8003138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3324      	adds	r3, #36	@ 0x24
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fef0 	bl	8003138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003358:	f002 f808 	bl	800536c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	@ 0x38
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800339e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	e7fd      	b.n	80033b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <xQueueGenericCreateStatic+0x56>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <xQueueGenericCreateStatic+0x5a>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <xQueueGenericCreateStatic+0x5c>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10b      	bne.n	80033e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80033cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	623b      	str	r3, [r7, #32]
}
 80033de:	bf00      	nop
 80033e0:	bf00      	nop
 80033e2:	e7fd      	b.n	80033e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <xQueueGenericCreateStatic+0x84>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <xQueueGenericCreateStatic+0x88>
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <xQueueGenericCreateStatic+0x8a>
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	61fb      	str	r3, [r7, #28]
}
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003412:	2350      	movs	r3, #80	@ 0x50
 8003414:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b50      	cmp	r3, #80	@ 0x50
 800341a:	d00b      	beq.n	8003434 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800341c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	61bb      	str	r3, [r7, #24]
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800343e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003446:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	4613      	mov	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f805 	bl	8003464 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800345a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800345c:	4618      	mov	r0, r3
 800345e:	3730      	adds	r7, #48	@ 0x30
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d103      	bne.n	8003480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e002      	b.n	8003486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003492:	2101      	movs	r1, #1
 8003494:	69b8      	ldr	r0, [r7, #24]
 8003496:	f7ff feff 	bl	8003298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08e      	sub	sp, #56	@ 0x38
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034ba:	2300      	movs	r3, #0
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <xQueueGenericSend+0x34>
	__asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	e7fd      	b.n	80034dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <xQueueGenericSend+0x42>
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <xQueueGenericSend+0x46>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <xQueueGenericSend+0x48>
 80034f2:	2300      	movs	r3, #0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10b      	bne.n	8003510 <xQueueGenericSend+0x64>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x72>
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <xQueueGenericSend+0x76>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSend+0x78>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <xQueueGenericSend+0x94>
	__asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	e7fd      	b.n	800353c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003540:	f001 f9f4 	bl	800492c <xTaskGetSchedulerState>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d102      	bne.n	8003550 <xQueueGenericSend+0xa4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <xQueueGenericSend+0xa8>
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <xQueueGenericSend+0xaa>
 8003554:	2300      	movs	r3, #0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <xQueueGenericSend+0xc6>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	61fb      	str	r3, [r7, #28]
}
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003572:	f001 fecb 	bl	800530c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003578:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <xQueueGenericSend+0xdc>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d129      	bne.n	80035dc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800358e:	f000 fa0d 	bl	80039ac <prvCopyDataToQueue>
 8003592:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3324      	adds	r3, #36	@ 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fff9 	bl	8004598 <xTaskRemoveFromEventList>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035ac:	4b3f      	ldr	r3, [pc, #252]	@ (80036ac <xQueueGenericSend+0x200>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	e00a      	b.n	80035d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035c4:	4b39      	ldr	r3, [pc, #228]	@ (80036ac <xQueueGenericSend+0x200>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035d4:	f001 feca 	bl	800536c <vPortExitCritical>
				return pdPASS;
 80035d8:	2301      	movs	r3, #1
 80035da:	e063      	b.n	80036a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035e2:	f001 fec3 	bl	800536c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e05c      	b.n	80036a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 f833 	bl	8004660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035fa:	2301      	movs	r3, #1
 80035fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035fe:	f001 feb5 	bl	800536c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003602:	f000 fd99 	bl	8004138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003606:	f001 fe81 	bl	800530c <vPortEnterCritical>
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003610:	b25b      	sxtb	r3, r3
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <xQueueGenericSend+0x174>
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003626:	b25b      	sxtb	r3, r3
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d103      	bne.n	8003636 <xQueueGenericSend+0x18a>
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003636:	f001 fe99 	bl	800536c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800363a:	1d3a      	adds	r2, r7, #4
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f822 	bl	800468c <xTaskCheckForTimeOut>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d124      	bne.n	8003698 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800364e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003650:	f000 faa4 	bl	8003b9c <prvIsQueueFull>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d018      	beq.n	800368c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800365a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365c:	3310      	adds	r3, #16
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f000 ff46 	bl	80044f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800366a:	f000 fa2f 	bl	8003acc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800366e:	f000 fd71 	bl	8004154 <xTaskResumeAll>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	f47f af7c 	bne.w	8003572 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <xQueueGenericSend+0x200>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	e772      	b.n	8003572 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800368c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800368e:	f000 fa1d 	bl	8003acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003692:	f000 fd5f 	bl	8004154 <xTaskResumeAll>
 8003696:	e76c      	b.n	8003572 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369a:	f000 fa17 	bl	8003acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800369e:	f000 fd59 	bl	8004154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036a2:	2300      	movs	r3, #0
		}
	}
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3738      	adds	r7, #56	@ 0x38
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08e      	sub	sp, #56	@ 0x38
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80036c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	e7fd      	b.n	80036dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d103      	bne.n	80036ee <xQueueGenericSendFromISR+0x3e>
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericSendFromISR+0x42>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericSendFromISR+0x44>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	623b      	str	r3, [r7, #32]
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d103      	bne.n	800371e <xQueueGenericSendFromISR+0x6e>
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <xQueueGenericSendFromISR+0x72>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSendFromISR+0x74>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	61fb      	str	r3, [r7, #28]
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003740:	f001 fea6 	bl	8005490 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003744:	f3ef 8211 	mrs	r2, BASEPRI
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	61ba      	str	r2, [r7, #24]
 800375a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800375c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <xQueueGenericSendFromISR+0xc2>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d12c      	bne.n	80037cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003778:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003782:	f000 f913 	bl	80039ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003786:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d112      	bne.n	80037b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	3324      	adds	r3, #36	@ 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fefb 	bl	8004598 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	b25a      	sxtb	r2, r3
 80037c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037c6:	2301      	movs	r3, #1
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80037ca:	e001      	b.n	80037d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80037d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3738      	adds	r7, #56	@ 0x38
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	@ 0x30
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <xQueueReceive+0x32>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	623b      	str	r3, [r7, #32]
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	e7fd      	b.n	8003816 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d103      	bne.n	8003828 <xQueueReceive+0x40>
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <xQueueReceive+0x44>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <xQueueReceive+0x46>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10b      	bne.n	800384a <xQueueReceive+0x62>
	__asm volatile
 8003832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	61fb      	str	r3, [r7, #28]
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	e7fd      	b.n	8003846 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384a:	f001 f86f 	bl	800492c <xTaskGetSchedulerState>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d102      	bne.n	800385a <xQueueReceive+0x72>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <xQueueReceive+0x76>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueReceive+0x78>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10b      	bne.n	800387c <xQueueReceive+0x94>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61bb      	str	r3, [r7, #24]
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800387c:	f001 fd46 	bl	800530c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d01f      	beq.n	80038cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003890:	f000 f8f6 	bl	8003a80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003896:	1e5a      	subs	r2, r3, #1
 8003898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800389c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00f      	beq.n	80038c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	3310      	adds	r3, #16
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fe75 	bl	8004598 <xTaskRemoveFromEventList>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038b4:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <xQueueReceive+0x1c0>)
 80038b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80038c4:	f001 fd52 	bl	800536c <vPortExitCritical>
				return pdPASS;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e069      	b.n	80039a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038d2:	f001 fd4b 	bl	800536c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038d6:	2300      	movs	r3, #0
 80038d8:	e062      	b.n	80039a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038e0:	f107 0310 	add.w	r3, r7, #16
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 febb 	bl	8004660 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038ea:	2301      	movs	r3, #1
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038ee:	f001 fd3d 	bl	800536c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038f2:	f000 fc21 	bl	8004138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038f6:	f001 fd09 	bl	800530c <vPortEnterCritical>
 80038fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003900:	b25b      	sxtb	r3, r3
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d103      	bne.n	8003910 <xQueueReceive+0x128>
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003912:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003916:	b25b      	sxtb	r3, r3
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d103      	bne.n	8003926 <xQueueReceive+0x13e>
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003926:	f001 fd21 	bl	800536c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800392a:	1d3a      	adds	r2, r7, #4
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f000 feaa 	bl	800468c <xTaskCheckForTimeOut>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d123      	bne.n	8003986 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800393e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003940:	f000 f916 	bl	8003b70 <prvIsQueueEmpty>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d017      	beq.n	800397a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800394a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394c:	3324      	adds	r3, #36	@ 0x24
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fdce 	bl	80044f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800395a:	f000 f8b7 	bl	8003acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800395e:	f000 fbf9 	bl	8004154 <xTaskResumeAll>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d189      	bne.n	800387c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <xQueueReceive+0x1c0>)
 800396a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	f3bf 8f6f 	isb	sy
 8003978:	e780      	b.n	800387c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800397a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800397c:	f000 f8a6 	bl	8003acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003980:	f000 fbe8 	bl	8004154 <xTaskResumeAll>
 8003984:	e77a      	b.n	800387c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003988:	f000 f8a0 	bl	8003acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800398c:	f000 fbe2 	bl	8004154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003992:	f000 f8ed 	bl	8003b70 <prvIsQueueEmpty>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	f43f af6f 	beq.w	800387c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800399e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3730      	adds	r7, #48	@ 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d14d      	bne.n	8003a6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 ffc6 	bl	8004968 <xTaskPriorityDisinherit>
 80039dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	e043      	b.n	8003a6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d119      	bne.n	8003a20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6898      	ldr	r0, [r3, #8]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	461a      	mov	r2, r3
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	f001 fff4 	bl	80059e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a04:	441a      	add	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d32b      	bcc.n	8003a6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	e026      	b.n	8003a6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68d8      	ldr	r0, [r3, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	f001 ffda 	bl	80059e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	425b      	negs	r3, r3
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d207      	bcs.n	8003a5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	425b      	negs	r3, r3
 8003a56:	441a      	add	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d105      	bne.n	8003a6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003a76:	697b      	ldr	r3, [r7, #20]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d018      	beq.n	8003ac4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	441a      	add	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d303      	bcc.n	8003ab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abc:	461a      	mov	r2, r3
 8003abe:	6838      	ldr	r0, [r7, #0]
 8003ac0:	f001 ff90 	bl	80059e4 <memcpy>
	}
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ad4:	f001 fc1a 	bl	800530c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ae0:	e011      	b.n	8003b06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3324      	adds	r3, #36	@ 0x24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 fd52 	bl	8004598 <xTaskRemoveFromEventList>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003afa:	f000 fe2b 	bl	8004754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	dce9      	bgt.n	8003ae2 <prvUnlockQueue+0x16>
 8003b0e:	e000      	b.n	8003b12 <prvUnlockQueue+0x46>
					break;
 8003b10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	22ff      	movs	r2, #255	@ 0xff
 8003b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003b1a:	f001 fc27 	bl	800536c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003b1e:	f001 fbf5 	bl	800530c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b2a:	e011      	b.n	8003b50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d012      	beq.n	8003b5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fd2d 	bl	8004598 <xTaskRemoveFromEventList>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b44:	f000 fe06 	bl	8004754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b48:	7bbb      	ldrb	r3, [r7, #14]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dce9      	bgt.n	8003b2c <prvUnlockQueue+0x60>
 8003b58:	e000      	b.n	8003b5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	22ff      	movs	r2, #255	@ 0xff
 8003b60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003b64:	f001 fc02 	bl	800536c <vPortExitCritical>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b78:	f001 fbc8 	bl	800530c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b84:	2301      	movs	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b8e:	f001 fbed 	bl	800536c <vPortExitCritical>

	return xReturn;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ba4:	f001 fbb2 	bl	800530c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d102      	bne.n	8003bba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	e001      	b.n	8003bbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003bbe:	f001 fbd5 	bl	800536c <vPortExitCritical>

	return xReturn;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	e014      	b.n	8003c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003c18 <vQueueAddToRegistry+0x4c>)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003be8:	490b      	ldr	r1, [pc, #44]	@ (8003c18 <vQueueAddToRegistry+0x4c>)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bf2:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <vQueueAddToRegistry+0x4c>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bfe:	e006      	b.n	8003c0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b07      	cmp	r3, #7
 8003c0a:	d9e7      	bls.n	8003bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	200009a4 	.word	0x200009a4

08003c1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c2c:	f001 fb6e 	bl	800530c <vPortEnterCritical>
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c36:	b25b      	sxtb	r3, r3
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3c:	d103      	bne.n	8003c46 <vQueueWaitForMessageRestricted+0x2a>
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c4c:	b25b      	sxtb	r3, r3
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d103      	bne.n	8003c5c <vQueueWaitForMessageRestricted+0x40>
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c5c:	f001 fb86 	bl	800536c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d106      	bne.n	8003c76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3324      	adds	r3, #36	@ 0x24
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 fc65 	bl	8004540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c76:	6978      	ldr	r0, [r7, #20]
 8003c78:	f7ff ff28 	bl	8003acc <prvUnlockQueue>
	}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	@ 0x38
 8003c88:	af04      	add	r7, sp, #16
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	623b      	str	r3, [r7, #32]
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <xTaskCreateStatic+0x4a>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	61fb      	str	r3, [r7, #28]
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	e7fd      	b.n	8003cca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003cce:	23a8      	movs	r3, #168	@ 0xa8
 8003cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2ba8      	cmp	r3, #168	@ 0xa8
 8003cd6:	d00b      	beq.n	8003cf0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	61bb      	str	r3, [r7, #24]
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d01e      	beq.n	8003d34 <xTaskCreateStatic+0xb0>
 8003cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003d0e:	2300      	movs	r3, #0
 8003d10:	9303      	str	r3, [sp, #12]
 8003d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d14:	9302      	str	r3, [sp, #8]
 8003d16:	f107 0314 	add.w	r3, r7, #20
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 f850 	bl	8003dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d2e:	f000 f8ed 	bl	8003f0c <prvAddNewTaskToReadyList>
 8003d32:	e001      	b.n	8003d38 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d38:	697b      	ldr	r3, [r7, #20]
	}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3728      	adds	r7, #40	@ 0x28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b08c      	sub	sp, #48	@ 0x30
 8003d46:	af04      	add	r7, sp, #16
 8003d48:	60f8      	str	r0, [r7, #12]
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 fbda 	bl	8005510 <pvPortMalloc>
 8003d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00e      	beq.n	8003d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d64:	20a8      	movs	r0, #168	@ 0xa8
 8003d66:	f001 fbd3 	bl	8005510 <pvPortMalloc>
 8003d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d78:	e005      	b.n	8003d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d7a:	6978      	ldr	r0, [r7, #20]
 8003d7c:	f001 fc90 	bl	80056a0 <vPortFree>
 8003d80:	e001      	b.n	8003d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d017      	beq.n	8003dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d94:	88fa      	ldrh	r2, [r7, #6]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9303      	str	r3, [sp, #12]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	9302      	str	r3, [sp, #8]
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68b9      	ldr	r1, [r7, #8]
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f80e 	bl	8003dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003db0:	69f8      	ldr	r0, [r7, #28]
 8003db2:	f000 f8ab 	bl	8003f0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003db6:	2301      	movs	r3, #1
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e002      	b.n	8003dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	461a      	mov	r2, r3
 8003de4:	21a5      	movs	r1, #165	@ 0xa5
 8003de6:	f001 fd71 	bl	80058cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df4:	3b01      	subs	r3, #1
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f023 0307 	bic.w	r3, r3, #7
 8003e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	617b      	str	r3, [r7, #20]
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	e7fd      	b.n	8003e22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e012      	b.n	8003e52 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	4413      	add	r3, r2
 8003e32:	7819      	ldrb	r1, [r3, #0]
 8003e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	4413      	add	r3, r2
 8003e3a:	3334      	adds	r3, #52	@ 0x34
 8003e3c:	460a      	mov	r2, r1
 8003e3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4413      	add	r3, r2
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d006      	beq.n	8003e5a <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d9e9      	bls.n	8003e2c <prvInitialiseNewTask+0x60>
 8003e58:	e000      	b.n	8003e5c <prvInitialiseNewTask+0x90>
		{
			break;
 8003e5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e66:	2b37      	cmp	r3, #55	@ 0x37
 8003e68:	d901      	bls.n	8003e6e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e6a:	2337      	movs	r3, #55	@ 0x37
 8003e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f976 	bl	8003176 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e8c:	3318      	adds	r3, #24
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff f971 	bl	8003176 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eac:	2200      	movs	r2, #0
 8003eae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebc:	3354      	adds	r3, #84	@ 0x54
 8003ebe:	224c      	movs	r2, #76	@ 0x4c
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f001 fd02 	bl	80058cc <memset>
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <prvInitialiseNewTask+0x134>)
 8003ecc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f04 <prvInitialiseNewTask+0x138>)
 8003ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8003f08 <prvInitialiseNewTask+0x13c>)
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	68f9      	ldr	r1, [r7, #12]
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f001 f926 	bl	8005130 <pxPortInitialiseStack>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20001c30 	.word	0x20001c30
 8003f04:	20001c98 	.word	0x20001c98
 8003f08:	20001d00 	.word	0x20001d00

08003f0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003f14:	f001 f9fa 	bl	800530c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003f18:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd0 <prvAddNewTaskToReadyList+0xc4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <prvAddNewTaskToReadyList+0xc4>)
 8003f20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003f22:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd4 <prvAddNewTaskToReadyList+0xc8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd4 <prvAddNewTaskToReadyList+0xc8>)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003f30:	4b27      	ldr	r3, [pc, #156]	@ (8003fd0 <prvAddNewTaskToReadyList+0xc4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d110      	bne.n	8003f5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f38:	f000 fc30 	bl	800479c <prvInitialiseTaskLists>
 8003f3c:	e00d      	b.n	8003f5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f3e:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <prvAddNewTaskToReadyList+0xcc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f46:	4b23      	ldr	r3, [pc, #140]	@ (8003fd4 <prvAddNewTaskToReadyList+0xc8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d802      	bhi.n	8003f5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f54:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd4 <prvAddNewTaskToReadyList+0xc8>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f5a:	4b20      	ldr	r3, [pc, #128]	@ (8003fdc <prvAddNewTaskToReadyList+0xd0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a1e      	ldr	r2, [pc, #120]	@ (8003fdc <prvAddNewTaskToReadyList+0xd0>)
 8003f62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <prvAddNewTaskToReadyList+0xd0>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <prvAddNewTaskToReadyList+0xd4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d903      	bls.n	8003f80 <prvAddNewTaskToReadyList+0x74>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	4a18      	ldr	r2, [pc, #96]	@ (8003fe0 <prvAddNewTaskToReadyList+0xd4>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a15      	ldr	r2, [pc, #84]	@ (8003fe4 <prvAddNewTaskToReadyList+0xd8>)
 8003f8e:	441a      	add	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7ff f8f9 	bl	800318e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f9c:	f001 f9e6 	bl	800536c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd8 <prvAddNewTaskToReadyList+0xcc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00e      	beq.n	8003fc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <prvAddNewTaskToReadyList+0xc8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d207      	bcs.n	8003fc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <prvAddNewTaskToReadyList+0xdc>)
 8003fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000eb8 	.word	0x20000eb8
 8003fd4:	200009e4 	.word	0x200009e4
 8003fd8:	20000ec4 	.word	0x20000ec4
 8003fdc:	20000ed4 	.word	0x20000ed4
 8003fe0:	20000ec0 	.word	0x20000ec0
 8003fe4:	200009e8 	.word	0x200009e8
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d018      	beq.n	8004030 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ffe:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <vTaskDelay+0x64>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <vTaskDelay+0x32>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	60bb      	str	r3, [r7, #8]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800401e:	f000 f88b 	bl	8004138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004022:	2100      	movs	r1, #0
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fd0f 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800402a:	f000 f893 	bl	8004154 <xTaskResumeAll>
 800402e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004036:	4b07      	ldr	r3, [pc, #28]	@ (8004054 <vTaskDelay+0x68>)
 8004038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000ee0 	.word	0x20000ee0
 8004054:	e000ed04 	.word	0xe000ed04

08004058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	@ 0x28
 800405c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004062:	2300      	movs	r3, #0
 8004064:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004066:	463a      	mov	r2, r7
 8004068:	1d39      	adds	r1, r7, #4
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff f830 	bl	80030d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	9202      	str	r2, [sp, #8]
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	2300      	movs	r3, #0
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	2300      	movs	r3, #0
 8004084:	460a      	mov	r2, r1
 8004086:	4924      	ldr	r1, [pc, #144]	@ (8004118 <vTaskStartScheduler+0xc0>)
 8004088:	4824      	ldr	r0, [pc, #144]	@ (800411c <vTaskStartScheduler+0xc4>)
 800408a:	f7ff fdfb 	bl	8003c84 <xTaskCreateStatic>
 800408e:	4603      	mov	r3, r0
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <vTaskStartScheduler+0xc8>)
 8004092:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004094:	4b22      	ldr	r3, [pc, #136]	@ (8004120 <vTaskStartScheduler+0xc8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e001      	b.n	80040a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d102      	bne.n	80040b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80040ac:	f000 fd20 	bl	8004af0 <xTimerCreateTimerTask>
 80040b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d11b      	bne.n	80040f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	613b      	str	r3, [r7, #16]
}
 80040ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80040cc:	4b15      	ldr	r3, [pc, #84]	@ (8004124 <vTaskStartScheduler+0xcc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3354      	adds	r3, #84	@ 0x54
 80040d2:	4a15      	ldr	r2, [pc, #84]	@ (8004128 <vTaskStartScheduler+0xd0>)
 80040d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80040d6:	4b15      	ldr	r3, [pc, #84]	@ (800412c <vTaskStartScheduler+0xd4>)
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295
 80040dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040de:	4b14      	ldr	r3, [pc, #80]	@ (8004130 <vTaskStartScheduler+0xd8>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040e4:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <vTaskStartScheduler+0xdc>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040ea:	f001 f89d 	bl	8005228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040ee:	e00f      	b.n	8004110 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d10b      	bne.n	8004110 <vTaskStartScheduler+0xb8>
	__asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
}
 800410a:	bf00      	nop
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <vTaskStartScheduler+0xb4>
}
 8004110:	bf00      	nop
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	08005af8 	.word	0x08005af8
 800411c:	0800476d 	.word	0x0800476d
 8004120:	20000edc 	.word	0x20000edc
 8004124:	200009e4 	.word	0x200009e4
 8004128:	20000010 	.word	0x20000010
 800412c:	20000ed8 	.word	0x20000ed8
 8004130:	20000ec4 	.word	0x20000ec4
 8004134:	20000ebc 	.word	0x20000ebc

08004138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800413c:	4b04      	ldr	r3, [pc, #16]	@ (8004150 <vTaskSuspendAll+0x18>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3301      	adds	r3, #1
 8004142:	4a03      	ldr	r2, [pc, #12]	@ (8004150 <vTaskSuspendAll+0x18>)
 8004144:	6013      	str	r3, [r2, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000ee0 	.word	0x20000ee0

08004154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004162:	4b42      	ldr	r3, [pc, #264]	@ (800426c <xTaskResumeAll+0x118>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <xTaskResumeAll+0x2e>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	603b      	str	r3, [r7, #0]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004182:	f001 f8c3 	bl	800530c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004186:	4b39      	ldr	r3, [pc, #228]	@ (800426c <xTaskResumeAll+0x118>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a37      	ldr	r2, [pc, #220]	@ (800426c <xTaskResumeAll+0x118>)
 800418e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004190:	4b36      	ldr	r3, [pc, #216]	@ (800426c <xTaskResumeAll+0x118>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d162      	bne.n	800425e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004198:	4b35      	ldr	r3, [pc, #212]	@ (8004270 <xTaskResumeAll+0x11c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d05e      	beq.n	800425e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041a0:	e02f      	b.n	8004202 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80041a2:	4b34      	ldr	r3, [pc, #208]	@ (8004274 <xTaskResumeAll+0x120>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3318      	adds	r3, #24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff f848 	bl	8003244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f843 	bl	8003244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004278 <xTaskResumeAll+0x124>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d903      	bls.n	80041d2 <xTaskResumeAll+0x7e>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004278 <xTaskResumeAll+0x124>)
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4a27      	ldr	r2, [pc, #156]	@ (800427c <xTaskResumeAll+0x128>)
 80041e0:	441a      	add	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f7fe ffd0 	bl	800318e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041f2:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <xTaskResumeAll+0x12c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80041fc:	4b21      	ldr	r3, [pc, #132]	@ (8004284 <xTaskResumeAll+0x130>)
 80041fe:	2201      	movs	r2, #1
 8004200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004202:	4b1c      	ldr	r3, [pc, #112]	@ (8004274 <xTaskResumeAll+0x120>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1cb      	bne.n	80041a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004210:	f000 fb68 	bl	80048e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004214:	4b1c      	ldr	r3, [pc, #112]	@ (8004288 <xTaskResumeAll+0x134>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004220:	f000 f844 	bl	80042ac <xTaskIncrementTick>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <xTaskResumeAll+0x130>)
 800422c:	2201      	movs	r2, #1
 800422e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3b01      	subs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f1      	bne.n	8004220 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800423c:	4b12      	ldr	r3, [pc, #72]	@ (8004288 <xTaskResumeAll+0x134>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <xTaskResumeAll+0x130>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800424e:	4b0f      	ldr	r3, [pc, #60]	@ (800428c <xTaskResumeAll+0x138>)
 8004250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f001 f885 	bl	800536c <vPortExitCritical>

	return xAlreadyYielded;
 8004262:	68bb      	ldr	r3, [r7, #8]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000ee0 	.word	0x20000ee0
 8004270:	20000eb8 	.word	0x20000eb8
 8004274:	20000e78 	.word	0x20000e78
 8004278:	20000ec0 	.word	0x20000ec0
 800427c:	200009e8 	.word	0x200009e8
 8004280:	200009e4 	.word	0x200009e4
 8004284:	20000ecc 	.word	0x20000ecc
 8004288:	20000ec8 	.word	0x20000ec8
 800428c:	e000ed04 	.word	0xe000ed04

08004290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004296:	4b04      	ldr	r3, [pc, #16]	@ (80042a8 <xTaskGetTickCount+0x18>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800429c:	687b      	ldr	r3, [r7, #4]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	20000ebc 	.word	0x20000ebc

080042ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b6:	4b52      	ldr	r3, [pc, #328]	@ (8004400 <xTaskIncrementTick+0x154>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 808f 	bne.w	80043de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80042c0:	4b50      	ldr	r3, [pc, #320]	@ (8004404 <xTaskIncrementTick+0x158>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80042c8:	4a4e      	ldr	r2, [pc, #312]	@ (8004404 <xTaskIncrementTick+0x158>)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d121      	bne.n	8004318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80042d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004408 <xTaskIncrementTick+0x15c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	603b      	str	r3, [r7, #0]
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	e7fd      	b.n	80042f2 <xTaskIncrementTick+0x46>
 80042f6:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <xTaskIncrementTick+0x15c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	4b43      	ldr	r3, [pc, #268]	@ (800440c <xTaskIncrementTick+0x160>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a41      	ldr	r2, [pc, #260]	@ (8004408 <xTaskIncrementTick+0x15c>)
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4a41      	ldr	r2, [pc, #260]	@ (800440c <xTaskIncrementTick+0x160>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b41      	ldr	r3, [pc, #260]	@ (8004410 <xTaskIncrementTick+0x164>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3301      	adds	r3, #1
 8004310:	4a3f      	ldr	r2, [pc, #252]	@ (8004410 <xTaskIncrementTick+0x164>)
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	f000 fae6 	bl	80048e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004318:	4b3e      	ldr	r3, [pc, #248]	@ (8004414 <xTaskIncrementTick+0x168>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	429a      	cmp	r2, r3
 8004320:	d34e      	bcc.n	80043c0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004322:	4b39      	ldr	r3, [pc, #228]	@ (8004408 <xTaskIncrementTick+0x15c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <xTaskIncrementTick+0x84>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <xTaskIncrementTick+0x86>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d004      	beq.n	8004340 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004336:	4b37      	ldr	r3, [pc, #220]	@ (8004414 <xTaskIncrementTick+0x168>)
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	601a      	str	r2, [r3, #0]
					break;
 800433e:	e03f      	b.n	80043c0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004340:	4b31      	ldr	r3, [pc, #196]	@ (8004408 <xTaskIncrementTick+0x15c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d203      	bcs.n	8004360 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004358:	4a2e      	ldr	r2, [pc, #184]	@ (8004414 <xTaskIncrementTick+0x168>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
						break;
 800435e:	e02f      	b.n	80043c0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe ff6d 	bl	8003244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3318      	adds	r3, #24
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe ff64 	bl	8003244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004380:	4b25      	ldr	r3, [pc, #148]	@ (8004418 <xTaskIncrementTick+0x16c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d903      	bls.n	8004390 <xTaskIncrementTick+0xe4>
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438c:	4a22      	ldr	r2, [pc, #136]	@ (8004418 <xTaskIncrementTick+0x16c>)
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <xTaskIncrementTick+0x170>)
 800439e:	441a      	add	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	3304      	adds	r3, #4
 80043a4:	4619      	mov	r1, r3
 80043a6:	4610      	mov	r0, r2
 80043a8:	f7fe fef1 	bl	800318e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <xTaskIncrementTick+0x174>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3b3      	bcc.n	8004322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043be:	e7b0      	b.n	8004322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043c0:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <xTaskIncrementTick+0x174>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c6:	4915      	ldr	r1, [pc, #84]	@ (800441c <xTaskIncrementTick+0x170>)
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d907      	bls.n	80043e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80043d8:	2301      	movs	r3, #1
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e004      	b.n	80043e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043de:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <xTaskIncrementTick+0x178>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3301      	adds	r3, #1
 80043e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004424 <xTaskIncrementTick+0x178>)
 80043e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <xTaskIncrementTick+0x17c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000ee0 	.word	0x20000ee0
 8004404:	20000ebc 	.word	0x20000ebc
 8004408:	20000e70 	.word	0x20000e70
 800440c:	20000e74 	.word	0x20000e74
 8004410:	20000ed0 	.word	0x20000ed0
 8004414:	20000ed8 	.word	0x20000ed8
 8004418:	20000ec0 	.word	0x20000ec0
 800441c:	200009e8 	.word	0x200009e8
 8004420:	200009e4 	.word	0x200009e4
 8004424:	20000ec8 	.word	0x20000ec8
 8004428:	20000ecc 	.word	0x20000ecc

0800442c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004432:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <vTaskSwitchContext+0xb0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800443a:	4b29      	ldr	r3, [pc, #164]	@ (80044e0 <vTaskSwitchContext+0xb4>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004440:	e047      	b.n	80044d2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004442:	4b27      	ldr	r3, [pc, #156]	@ (80044e0 <vTaskSwitchContext+0xb4>)
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004448:	4b26      	ldr	r3, [pc, #152]	@ (80044e4 <vTaskSwitchContext+0xb8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e011      	b.n	8004474 <vTaskSwitchContext+0x48>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <vTaskSwitchContext+0x42>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	607b      	str	r3, [r7, #4]
}
 8004468:	bf00      	nop
 800446a:	bf00      	nop
 800446c:	e7fd      	b.n	800446a <vTaskSwitchContext+0x3e>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3b01      	subs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	491c      	ldr	r1, [pc, #112]	@ (80044e8 <vTaskSwitchContext+0xbc>)
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	4613      	mov	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0e3      	beq.n	8004450 <vTaskSwitchContext+0x24>
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4a15      	ldr	r2, [pc, #84]	@ (80044e8 <vTaskSwitchContext+0xbc>)
 8004494:	4413      	add	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3308      	adds	r3, #8
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d104      	bne.n	80044b8 <vTaskSwitchContext+0x8c>
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	605a      	str	r2, [r3, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	4a0b      	ldr	r2, [pc, #44]	@ (80044ec <vTaskSwitchContext+0xc0>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <vTaskSwitchContext+0xb8>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044c8:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <vTaskSwitchContext+0xc0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3354      	adds	r3, #84	@ 0x54
 80044ce:	4a08      	ldr	r2, [pc, #32]	@ (80044f0 <vTaskSwitchContext+0xc4>)
 80044d0:	6013      	str	r3, [r2, #0]
}
 80044d2:	bf00      	nop
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	20000ee0 	.word	0x20000ee0
 80044e0:	20000ecc 	.word	0x20000ecc
 80044e4:	20000ec0 	.word	0x20000ec0
 80044e8:	200009e8 	.word	0x200009e8
 80044ec:	200009e4 	.word	0x200009e4
 80044f0:	20000010 	.word	0x20000010

080044f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	60fb      	str	r3, [r7, #12]
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800451c:	4b07      	ldr	r3, [pc, #28]	@ (800453c <vTaskPlaceOnEventList+0x48>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3318      	adds	r3, #24
 8004522:	4619      	mov	r1, r3
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe fe55 	bl	80031d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800452a:	2101      	movs	r1, #1
 800452c:	6838      	ldr	r0, [r7, #0]
 800452e:	f000 fa8b 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
}
 8004532:	bf00      	nop
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	200009e4 	.word	0x200009e4

08004540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	617b      	str	r3, [r7, #20]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800456a:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <vTaskPlaceOnEventListRestricted+0x54>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3318      	adds	r3, #24
 8004570:	4619      	mov	r1, r3
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7fe fe0b 	bl	800318e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	f000 fa5e 	bl	8004a48 <prvAddCurrentTaskToDelayedList>
	}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200009e4 	.word	0x200009e4

08004598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	60fb      	str	r3, [r7, #12]
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3318      	adds	r3, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fe fe3a 	bl	8003244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004648 <xTaskRemoveFromEventList+0xb0>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11d      	bne.n	8004614 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fe31 	bl	8003244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e6:	4b19      	ldr	r3, [pc, #100]	@ (800464c <xTaskRemoveFromEventList+0xb4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d903      	bls.n	80045f6 <xTaskRemoveFromEventList+0x5e>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	4a16      	ldr	r2, [pc, #88]	@ (800464c <xTaskRemoveFromEventList+0xb4>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4a13      	ldr	r2, [pc, #76]	@ (8004650 <xTaskRemoveFromEventList+0xb8>)
 8004604:	441a      	add	r2, r3
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3304      	adds	r3, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fe fdbe 	bl	800318e <vListInsertEnd>
 8004612:	e005      	b.n	8004620 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	3318      	adds	r3, #24
 8004618:	4619      	mov	r1, r3
 800461a:	480e      	ldr	r0, [pc, #56]	@ (8004654 <xTaskRemoveFromEventList+0xbc>)
 800461c:	f7fe fdb7 	bl	800318e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <xTaskRemoveFromEventList+0xc0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	429a      	cmp	r2, r3
 800462c:	d905      	bls.n	800463a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <xTaskRemoveFromEventList+0xc4>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e001      	b.n	800463e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800463e:	697b      	ldr	r3, [r7, #20]
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000ee0 	.word	0x20000ee0
 800464c:	20000ec0 	.word	0x20000ec0
 8004650:	200009e8 	.word	0x200009e8
 8004654:	20000e78 	.word	0x20000e78
 8004658:	200009e4 	.word	0x200009e4
 800465c:	20000ecc 	.word	0x20000ecc

08004660 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004668:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <vTaskInternalSetTimeOutState+0x24>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <vTaskInternalSetTimeOutState+0x28>)
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	605a      	str	r2, [r3, #4]
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000ed0 	.word	0x20000ed0
 8004688:	20000ebc 	.word	0x20000ebc

0800468c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	613b      	str	r3, [r7, #16]
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60fb      	str	r3, [r7, #12]
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	e7fd      	b.n	80046ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80046d2:	f000 fe1b 	bl	800530c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80046d6:	4b1d      	ldr	r3, [pc, #116]	@ (800474c <xTaskCheckForTimeOut+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d102      	bne.n	80046f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e023      	b.n	800473e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b15      	ldr	r3, [pc, #84]	@ (8004750 <xTaskCheckForTimeOut+0xc4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d007      	beq.n	8004712 <xTaskCheckForTimeOut+0x86>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	429a      	cmp	r2, r3
 800470a:	d302      	bcc.n	8004712 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800470c:	2301      	movs	r3, #1
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	e015      	b.n	800473e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	d20b      	bcs.n	8004734 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff ff99 	bl	8004660 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	e004      	b.n	800473e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800473a:	2301      	movs	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800473e:	f000 fe15 	bl	800536c <vPortExitCritical>

	return xReturn;
 8004742:	69fb      	ldr	r3, [r7, #28]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	20000ebc 	.word	0x20000ebc
 8004750:	20000ed0 	.word	0x20000ed0

08004754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004758:	4b03      	ldr	r3, [pc, #12]	@ (8004768 <vTaskMissedYield+0x14>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000ecc 	.word	0x20000ecc

0800476c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004774:	f000 f852 	bl	800481c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004778:	4b06      	ldr	r3, [pc, #24]	@ (8004794 <prvIdleTask+0x28>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d9f9      	bls.n	8004774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004780:	4b05      	ldr	r3, [pc, #20]	@ (8004798 <prvIdleTask+0x2c>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004790:	e7f0      	b.n	8004774 <prvIdleTask+0x8>
 8004792:	bf00      	nop
 8004794:	200009e8 	.word	0x200009e8
 8004798:	e000ed04 	.word	0xe000ed04

0800479c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047a2:	2300      	movs	r3, #0
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e00c      	b.n	80047c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <prvInitialiseTaskLists+0x60>)
 80047b4:	4413      	add	r3, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fcbe 	bl	8003138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3301      	adds	r3, #1
 80047c0:	607b      	str	r3, [r7, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b37      	cmp	r3, #55	@ 0x37
 80047c6:	d9ef      	bls.n	80047a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047c8:	480d      	ldr	r0, [pc, #52]	@ (8004800 <prvInitialiseTaskLists+0x64>)
 80047ca:	f7fe fcb5 	bl	8003138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047ce:	480d      	ldr	r0, [pc, #52]	@ (8004804 <prvInitialiseTaskLists+0x68>)
 80047d0:	f7fe fcb2 	bl	8003138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047d4:	480c      	ldr	r0, [pc, #48]	@ (8004808 <prvInitialiseTaskLists+0x6c>)
 80047d6:	f7fe fcaf 	bl	8003138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047da:	480c      	ldr	r0, [pc, #48]	@ (800480c <prvInitialiseTaskLists+0x70>)
 80047dc:	f7fe fcac 	bl	8003138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047e0:	480b      	ldr	r0, [pc, #44]	@ (8004810 <prvInitialiseTaskLists+0x74>)
 80047e2:	f7fe fca9 	bl	8003138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <prvInitialiseTaskLists+0x78>)
 80047e8:	4a05      	ldr	r2, [pc, #20]	@ (8004800 <prvInitialiseTaskLists+0x64>)
 80047ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <prvInitialiseTaskLists+0x7c>)
 80047ee:	4a05      	ldr	r2, [pc, #20]	@ (8004804 <prvInitialiseTaskLists+0x68>)
 80047f0:	601a      	str	r2, [r3, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200009e8 	.word	0x200009e8
 8004800:	20000e48 	.word	0x20000e48
 8004804:	20000e5c 	.word	0x20000e5c
 8004808:	20000e78 	.word	0x20000e78
 800480c:	20000e8c 	.word	0x20000e8c
 8004810:	20000ea4 	.word	0x20000ea4
 8004814:	20000e70 	.word	0x20000e70
 8004818:	20000e74 	.word	0x20000e74

0800481c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004822:	e019      	b.n	8004858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004824:	f000 fd72 	bl	800530c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004828:	4b10      	ldr	r3, [pc, #64]	@ (800486c <prvCheckTasksWaitingTermination+0x50>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe fd05 	bl	8003244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <prvCheckTasksWaitingTermination+0x54>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3b01      	subs	r3, #1
 8004840:	4a0b      	ldr	r2, [pc, #44]	@ (8004870 <prvCheckTasksWaitingTermination+0x54>)
 8004842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <prvCheckTasksWaitingTermination+0x58>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3b01      	subs	r3, #1
 800484a:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <prvCheckTasksWaitingTermination+0x58>)
 800484c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800484e:	f000 fd8d 	bl	800536c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f810 	bl	8004878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <prvCheckTasksWaitingTermination+0x58>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e1      	bne.n	8004824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000e8c 	.word	0x20000e8c
 8004870:	20000eb8 	.word	0x20000eb8
 8004874:	20000ea0 	.word	0x20000ea0

08004878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3354      	adds	r3, #84	@ 0x54
 8004884:	4618      	mov	r0, r3
 8004886:	f001 f829 	bl	80058dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004890:	2b00      	cmp	r3, #0
 8004892:	d108      	bne.n	80048a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	4618      	mov	r0, r3
 800489a:	f000 ff01 	bl	80056a0 <vPortFree>
				vPortFree( pxTCB );
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fefe 	bl	80056a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048a4:	e019      	b.n	80048da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d103      	bne.n	80048b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fef5 	bl	80056a0 <vPortFree>
	}
 80048b6:	e010      	b.n	80048da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d00b      	beq.n	80048da <prvDeleteTCB+0x62>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	60fb      	str	r3, [r7, #12]
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop
 80048d8:	e7fd      	b.n	80048d6 <prvDeleteTCB+0x5e>
	}
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004924 <prvResetNextTaskUnblockTime+0x40>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <prvResetNextTaskUnblockTime+0x14>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <prvResetNextTaskUnblockTime+0x16>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <prvResetNextTaskUnblockTime+0x44>)
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004906:	e008      	b.n	800491a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004908:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <prvResetNextTaskUnblockTime+0x40>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4a04      	ldr	r2, [pc, #16]	@ (8004928 <prvResetNextTaskUnblockTime+0x44>)
 8004918:	6013      	str	r3, [r2, #0]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	20000e70 	.word	0x20000e70
 8004928:	20000ed8 	.word	0x20000ed8

0800492c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <xTaskGetSchedulerState+0x34>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800493a:	2301      	movs	r3, #1
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e008      	b.n	8004952 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004940:	4b08      	ldr	r3, [pc, #32]	@ (8004964 <xTaskGetSchedulerState+0x38>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d102      	bne.n	800494e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004948:	2302      	movs	r3, #2
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	e001      	b.n	8004952 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004952:	687b      	ldr	r3, [r7, #4]
	}
 8004954:	4618      	mov	r0, r3
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20000ec4 	.word	0x20000ec4
 8004964:	20000ee0 	.word	0x20000ee0

08004968 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b086      	sub	sp, #24
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d058      	beq.n	8004a30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <xTaskPriorityDisinherit+0xd4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d00b      	beq.n	80049a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	60fb      	str	r3, [r7, #12]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60bb      	str	r3, [r7, #8]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049c4:	1e5a      	subs	r2, r3, #1
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d02c      	beq.n	8004a30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d128      	bne.n	8004a30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	3304      	adds	r3, #4
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fc2e 	bl	8003244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4b0f      	ldr	r3, [pc, #60]	@ (8004a40 <xTaskPriorityDisinherit+0xd8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d903      	bls.n	8004a10 <xTaskPriorityDisinherit+0xa8>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <xTaskPriorityDisinherit+0xd8>)
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4a09      	ldr	r2, [pc, #36]	@ (8004a44 <xTaskPriorityDisinherit+0xdc>)
 8004a1e:	441a      	add	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe fbb1 	bl	800318e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a30:	697b      	ldr	r3, [r7, #20]
	}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200009e4 	.word	0x200009e4
 8004a40:	20000ec0 	.word	0x20000ec0
 8004a44:	200009e8 	.word	0x200009e8

08004a48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a52:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a58:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x94>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fbf0 	bl	8003244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6a:	d10a      	bne.n	8004a82 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a72:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x94>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3304      	adds	r3, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4819      	ldr	r0, [pc, #100]	@ (8004ae0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a7c:	f7fe fb87 	bl	800318e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a80:	e026      	b.n	8004ad0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4413      	add	r3, r2
 8004a88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a8a:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x94>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d209      	bcs.n	8004aae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ae4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4610      	mov	r0, r2
 8004aa8:	f7fe fb94 	bl	80031d4 <vListInsert>
}
 8004aac:	e010      	b.n	8004ad0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8004adc <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fe fb8a 	bl	80031d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d202      	bcs.n	8004ad0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004aca:	4a08      	ldr	r2, [pc, #32]	@ (8004aec <prvAddCurrentTaskToDelayedList+0xa4>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	6013      	str	r3, [r2, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000ebc 	.word	0x20000ebc
 8004adc:	200009e4 	.word	0x200009e4
 8004ae0:	20000ea4 	.word	0x20000ea4
 8004ae4:	20000e74 	.word	0x20000e74
 8004ae8:	20000e70 	.word	0x20000e70
 8004aec:	20000ed8 	.word	0x20000ed8

08004af0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004afa:	f000 fad9 	bl	80050b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004afe:	4b1d      	ldr	r3, [pc, #116]	@ (8004b74 <xTimerCreateTimerTask+0x84>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d021      	beq.n	8004b4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b0e:	1d3a      	adds	r2, r7, #4
 8004b10:	f107 0108 	add.w	r1, r7, #8
 8004b14:	f107 030c 	add.w	r3, r7, #12
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe faf3 	bl	8003104 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	9202      	str	r2, [sp, #8]
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2302      	movs	r3, #2
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	460a      	mov	r2, r1
 8004b30:	4911      	ldr	r1, [pc, #68]	@ (8004b78 <xTimerCreateTimerTask+0x88>)
 8004b32:	4812      	ldr	r0, [pc, #72]	@ (8004b7c <xTimerCreateTimerTask+0x8c>)
 8004b34:	f7ff f8a6 	bl	8003c84 <xTaskCreateStatic>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <xTimerCreateTimerTask+0x90>)
 8004b3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <xTimerCreateTimerTask+0x90>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b46:	2301      	movs	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	613b      	str	r3, [r7, #16]
}
 8004b62:	bf00      	nop
 8004b64:	bf00      	nop
 8004b66:	e7fd      	b.n	8004b64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b68:	697b      	ldr	r3, [r7, #20]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000f14 	.word	0x20000f14
 8004b78:	08005b00 	.word	0x08005b00
 8004b7c:	08004ca5 	.word	0x08004ca5
 8004b80:	20000f18 	.word	0x20000f18

08004b84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	@ 0x28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	623b      	str	r3, [r7, #32]
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004bb4:	4b19      	ldr	r3, [pc, #100]	@ (8004c1c <xTimerGenericCommand+0x98>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02a      	beq.n	8004c12 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b05      	cmp	r3, #5
 8004bcc:	dc18      	bgt.n	8004c00 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bce:	f7ff fead 	bl	800492c <xTaskGetSchedulerState>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d109      	bne.n	8004bec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bd8:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <xTimerGenericCommand+0x98>)
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	f107 0110 	add.w	r1, r7, #16
 8004be0:	2300      	movs	r3, #0
 8004be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be4:	f7fe fc62 	bl	80034ac <xQueueGenericSend>
 8004be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bea:	e012      	b.n	8004c12 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <xTimerGenericCommand+0x98>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	f107 0110 	add.w	r1, r7, #16
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f7fe fc58 	bl	80034ac <xQueueGenericSend>
 8004bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004bfe:	e008      	b.n	8004c12 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <xTimerGenericCommand+0x98>)
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	f107 0110 	add.w	r1, r7, #16
 8004c08:	2300      	movs	r3, #0
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	f7fe fd50 	bl	80036b0 <xQueueGenericSendFromISR>
 8004c10:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3728      	adds	r7, #40	@ 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	20000f14 	.word	0x20000f14

08004c20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <prvProcessExpiredTimer+0x80>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3304      	adds	r3, #4
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe fb03 	bl	8003244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d123      	bne.n	8004c8e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	18d1      	adds	r1, r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	f000 f8cc 	bl	8004df0 <prvInsertTimerInActiveList>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d017      	beq.n	8004c8e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c5e:	2300      	movs	r3, #0
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2300      	movs	r3, #0
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	2100      	movs	r1, #0
 8004c68:	6978      	ldr	r0, [r7, #20]
 8004c6a:	f7ff ff8b 	bl	8004b84 <xTimerGenericCommand>
 8004c6e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10b      	bne.n	8004c8e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60fb      	str	r3, [r7, #12]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	4798      	blx	r3
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000f0c 	.word	0x20000f0c

08004ca4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 f859 	bl	8004d68 <prvGetNextExpireTime>
 8004cb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f805 	bl	8004ccc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004cc2:	f000 f8d7 	bl	8004e74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cc6:	bf00      	nop
 8004cc8:	e7f0      	b.n	8004cac <prvTimerTask+0x8>
	...

08004ccc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004cd6:	f7ff fa2f 	bl	8004138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cda:	f107 0308 	add.w	r3, r7, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f866 	bl	8004db0 <prvSampleTimeNow>
 8004ce4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d130      	bne.n	8004d4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10a      	bne.n	8004d08 <prvProcessTimerOrBlockTask+0x3c>
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d806      	bhi.n	8004d08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cfa:	f7ff fa2b 	bl	8004154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cfe:	68f9      	ldr	r1, [r7, #12]
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff8d 	bl	8004c20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d06:	e024      	b.n	8004d52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d0e:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <prvProcessTimerOrBlockTask+0x90>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d20:	4b0f      	ldr	r3, [pc, #60]	@ (8004d60 <prvProcessTimerOrBlockTask+0x94>)
 8004d22:	6818      	ldr	r0, [r3, #0]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f7fe ff75 	bl	8003c1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d32:	f7ff fa0f 	bl	8004154 <xTaskResumeAll>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d3c:	4b09      	ldr	r3, [pc, #36]	@ (8004d64 <prvProcessTimerOrBlockTask+0x98>)
 8004d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	f3bf 8f6f 	isb	sy
}
 8004d4c:	e001      	b.n	8004d52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d4e:	f7ff fa01 	bl	8004154 <xTaskResumeAll>
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000f10 	.word	0x20000f10
 8004d60:	20000f14 	.word	0x20000f14
 8004d64:	e000ed04 	.word	0xe000ed04

08004d68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d70:	4b0e      	ldr	r3, [pc, #56]	@ (8004dac <prvGetNextExpireTime+0x44>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d105      	bne.n	8004d9a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <prvGetNextExpireTime+0x44>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e001      	b.n	8004d9e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000f0c 	.word	0x20000f0c

08004db0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004db8:	f7ff fa6a 	bl	8004290 <xTaskGetTickCount>
 8004dbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004dec <prvSampleTimeNow+0x3c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d205      	bcs.n	8004dd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004dc8:	f000 f910 	bl	8004fec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e002      	b.n	8004dda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dda:	4a04      	ldr	r2, [pc, #16]	@ (8004dec <prvSampleTimeNow+0x3c>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004de0:	68fb      	ldr	r3, [r7, #12]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000f1c 	.word	0x20000f1c

08004df0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d812      	bhi.n	8004e3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d302      	bcc.n	8004e2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e01b      	b.n	8004e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e2a:	4b10      	ldr	r3, [pc, #64]	@ (8004e6c <prvInsertTimerInActiveList+0x7c>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3304      	adds	r3, #4
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fe f9cd 	bl	80031d4 <vListInsert>
 8004e3a:	e012      	b.n	8004e62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d206      	bcs.n	8004e52 <prvInsertTimerInActiveList+0x62>
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d302      	bcc.n	8004e52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e007      	b.n	8004e62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e52:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <prvInsertTimerInActiveList+0x80>)
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f7fe f9b9 	bl	80031d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e62:	697b      	ldr	r3, [r7, #20]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000f10 	.word	0x20000f10
 8004e70:	20000f0c 	.word	0x20000f0c

08004e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08e      	sub	sp, #56	@ 0x38
 8004e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e7a:	e0a5      	b.n	8004fc8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da19      	bge.n	8004eb6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	3304      	adds	r3, #4
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10b      	bne.n	8004ea6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	61fb      	str	r3, [r7, #28]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eac:	6850      	ldr	r0, [r2, #4]
 8004eae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004eb0:	6892      	ldr	r2, [r2, #8]
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f2c0 8085 	blt.w	8004fc8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d004      	beq.n	8004ed4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ecc:	3304      	adds	r3, #4
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fe f9b8 	bl	8003244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ed4:	463b      	mov	r3, r7
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff ff6a 	bl	8004db0 <prvSampleTimeNow>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b09      	cmp	r3, #9
 8004ee2:	d86c      	bhi.n	8004fbe <prvProcessReceivedCommands+0x14a>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <prvProcessReceivedCommands+0x78>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f15 	.word	0x08004f15
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f15 	.word	0x08004f15
 8004ef8:	08004fbf 	.word	0x08004fbf
 8004efc:	08004f73 	.word	0x08004f73
 8004f00:	08004fad 	.word	0x08004fad
 8004f04:	08004f15 	.word	0x08004f15
 8004f08:	08004f15 	.word	0x08004f15
 8004f0c:	08004fbf 	.word	0x08004fbf
 8004f10:	08004f73 	.word	0x08004f73
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	18d1      	adds	r1, r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f22:	f7ff ff65 	bl	8004df0 <prvInsertTimerInActiveList>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d04a      	beq.n	8004fc2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f32:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d142      	bne.n	8004fc2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	441a      	add	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f4e:	f7ff fe19 	bl	8004b84 <xTimerGenericCommand>
 8004f52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d133      	bne.n	8004fc2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	61bb      	str	r3, [r7, #24]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	617b      	str	r3, [r7, #20]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9e:	18d1      	adds	r1, r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa6:	f7ff ff23 	bl	8004df0 <prvInsertTimerInActiveList>
					break;
 8004faa:	e00d      	b.n	8004fc8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8004fb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fb8:	f000 fb72 	bl	80056a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fbc:	e003      	b.n	8004fc6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <prvProcessReceivedCommands+0x154>
					break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <prvProcessReceivedCommands+0x154>
					break;
 8004fc6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fc8:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <prvProcessReceivedCommands+0x174>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	1d39      	adds	r1, r7, #4
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe fc09 	bl	80037e8 <xQueueReceive>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f af4f 	bne.w	8004e7c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	3730      	adds	r7, #48	@ 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000f14 	.word	0x20000f14

08004fec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b088      	sub	sp, #32
 8004ff0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ff2:	e046      	b.n	8005082 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3304      	adds	r3, #4
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe f919 	bl	8003244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d12f      	bne.n	8005082 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4413      	add	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90e      	bls.n	8005052 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005040:	4b19      	ldr	r3, [pc, #100]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	3304      	adds	r3, #4
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fe f8c2 	bl	80031d4 <vListInsert>
 8005050:	e017      	b.n	8005082 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	2100      	movs	r1, #0
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7ff fd91 	bl	8004b84 <xTimerGenericCommand>
 8005062:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <prvSwitchTimerLists+0x96>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	603b      	str	r3, [r7, #0]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005082:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1b3      	bne.n	8004ff4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800508c:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <prvSwitchTimerLists+0xc0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a04      	ldr	r2, [pc, #16]	@ (80050a8 <prvSwitchTimerLists+0xbc>)
 8005098:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800509a:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <prvSwitchTimerLists+0xc0>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20000f0c 	.word	0x20000f0c
 80050ac:	20000f10 	.word	0x20000f10

080050b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050b6:	f000 f929 	bl	800530c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d120      	bne.n	8005104 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050c2:	4814      	ldr	r0, [pc, #80]	@ (8005114 <prvCheckForValidListAndQueue+0x64>)
 80050c4:	f7fe f838 	bl	8003138 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050c8:	4813      	ldr	r0, [pc, #76]	@ (8005118 <prvCheckForValidListAndQueue+0x68>)
 80050ca:	f7fe f835 	bl	8003138 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ce:	4b13      	ldr	r3, [pc, #76]	@ (800511c <prvCheckForValidListAndQueue+0x6c>)
 80050d0:	4a10      	ldr	r2, [pc, #64]	@ (8005114 <prvCheckForValidListAndQueue+0x64>)
 80050d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050d4:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <prvCheckForValidListAndQueue+0x70>)
 80050d6:	4a10      	ldr	r2, [pc, #64]	@ (8005118 <prvCheckForValidListAndQueue+0x68>)
 80050d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050da:	2300      	movs	r3, #0
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <prvCheckForValidListAndQueue+0x74>)
 80050e0:	4a11      	ldr	r2, [pc, #68]	@ (8005128 <prvCheckForValidListAndQueue+0x78>)
 80050e2:	2110      	movs	r1, #16
 80050e4:	200a      	movs	r0, #10
 80050e6:	f7fe f941 	bl	800336c <xQueueGenericCreateStatic>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a08      	ldr	r2, [pc, #32]	@ (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050f0:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d005      	beq.n	8005104 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <prvCheckForValidListAndQueue+0x60>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	490b      	ldr	r1, [pc, #44]	@ (800512c <prvCheckForValidListAndQueue+0x7c>)
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe fd64 	bl	8003bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005104:	f000 f932 	bl	800536c <vPortExitCritical>
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000f14 	.word	0x20000f14
 8005114:	20000ee4 	.word	0x20000ee4
 8005118:	20000ef8 	.word	0x20000ef8
 800511c:	20000f0c 	.word	0x20000f0c
 8005120:	20000f10 	.word	0x20000f10
 8005124:	20000fc0 	.word	0x20000fc0
 8005128:	20000f20 	.word	0x20000f20
 800512c:	08005b08 	.word	0x08005b08

08005130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b04      	subs	r3, #4
 8005140:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b04      	subs	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0201 	bic.w	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b04      	subs	r3, #4
 800515e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005160:	4a08      	ldr	r2, [pc, #32]	@ (8005184 <pxPortInitialiseStack+0x54>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b14      	subs	r3, #20
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3b20      	subs	r3, #32
 8005176:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005178:	68fb      	ldr	r3, [r7, #12]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	08005189 	.word	0x08005189

08005188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800518e:	2300      	movs	r3, #0
 8005190:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <prvTaskExitError+0x54>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d00b      	beq.n	80051b4 <prvTaskExitError+0x2c>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	60fb      	str	r3, [r7, #12]
}
 80051ae:	bf00      	nop
 80051b0:	bf00      	nop
 80051b2:	e7fd      	b.n	80051b0 <prvTaskExitError+0x28>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	60bb      	str	r3, [r7, #8]
}
 80051c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051c8:	bf00      	nop
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0fc      	beq.n	80051ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051d0:	bf00      	nop
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80051fe:	4770      	bx	lr

08005200 <pxCurrentTCBConst2>:
 8005200:	200009e4 	.word	0x200009e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005208:	4806      	ldr	r0, [pc, #24]	@ (8005224 <prvPortStartFirstTask+0x1c>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	b662      	cpsie	i
 8005214:	b661      	cpsie	f
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	df00      	svc	0
 8005220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005222:	bf00      	nop
 8005224:	e000ed08 	.word	0xe000ed08

08005228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800522e:	4b32      	ldr	r3, [pc, #200]	@ (80052f8 <xPortStartScheduler+0xd0>)
 8005230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22ff      	movs	r2, #255	@ 0xff
 800523e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <xPortStartScheduler+0xd4>)
 8005254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005256:	4b2a      	ldr	r3, [pc, #168]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800525c:	e009      	b.n	8005272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800525e:	4b28      	ldr	r3, [pc, #160]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3b01      	subs	r3, #1
 8005264:	4a26      	ldr	r2, [pc, #152]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005272:	78fb      	ldrb	r3, [r7, #3]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b80      	cmp	r3, #128	@ 0x80
 800527c:	d0ef      	beq.n	800525e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <xPortStartScheduler+0xd8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1c3 0307 	rsb	r3, r3, #7
 8005286:	2b04      	cmp	r3, #4
 8005288:	d00b      	beq.n	80052a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60bb      	str	r3, [r7, #8]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052a2:	4b17      	ldr	r3, [pc, #92]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052ac:	4b14      	ldr	r3, [pc, #80]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052b4:	4a12      	ldr	r2, [pc, #72]	@ (8005300 <xPortStartScheduler+0xd8>)
 80052b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005304 <xPortStartScheduler+0xdc>)
 80052d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052d8:	f000 f8b8 	bl	800544c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <xPortStartScheduler+0xe0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052e2:	f7ff ff91 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052e6:	f7ff f8a1 	bl	800442c <vTaskSwitchContext>
	prvTaskExitError();
 80052ea:	f7ff ff4d 	bl	8005188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000e400 	.word	0xe000e400
 80052fc:	20001010 	.word	0x20001010
 8005300:	20001014 	.word	0x20001014
 8005304:	e000ed20 	.word	0xe000ed20
 8005308:	2000000c 	.word	0x2000000c

0800530c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	607b      	str	r3, [r7, #4]
}
 8005324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005326:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <vPortEnterCritical+0x58>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	4a0d      	ldr	r2, [pc, #52]	@ (8005364 <vPortEnterCritical+0x58>)
 800532e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005330:	4b0c      	ldr	r3, [pc, #48]	@ (8005364 <vPortEnterCritical+0x58>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d110      	bne.n	800535a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005338:	4b0b      	ldr	r3, [pc, #44]	@ (8005368 <vPortEnterCritical+0x5c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <vPortEnterCritical+0x4e>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	603b      	str	r3, [r7, #0]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <vPortEnterCritical+0x4a>
	}
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	2000000c 	.word	0x2000000c
 8005368:	e000ed04 	.word	0xe000ed04

0800536c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005372:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <vPortExitCritical+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10b      	bne.n	8005392 <vPortExitCritical+0x26>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	607b      	str	r3, [r7, #4]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005392:	4b0a      	ldr	r3, [pc, #40]	@ (80053bc <vPortExitCritical+0x50>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3b01      	subs	r3, #1
 8005398:	4a08      	ldr	r2, [pc, #32]	@ (80053bc <vPortExitCritical+0x50>)
 800539a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800539c:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <vPortExitCritical+0x50>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <vPortExitCritical+0x44>
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f383 8811 	msr	BASEPRI, r3
}
 80053ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bc80      	pop	{r7}
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	2000000c 	.word	0x2000000c

080053c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053c0:	f3ef 8009 	mrs	r0, PSP
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <pxCurrentTCBConst>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053d0:	6010      	str	r0, [r2, #0]
 80053d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053da:	f380 8811 	msr	BASEPRI, r0
 80053de:	f7ff f825 	bl	800442c <vTaskSwitchContext>
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	f380 8811 	msr	BASEPRI, r0
 80053ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053f6:	f380 8809 	msr	PSP, r0
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	4770      	bx	lr

08005400 <pxCurrentTCBConst>:
 8005400:	200009e4 	.word	0x200009e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005422:	f7fe ff43 	bl	80042ac <xTaskIncrementTick>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800542c:	4b06      	ldr	r3, [pc, #24]	@ (8005448 <SysTick_Handler+0x40>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005450:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <vPortSetupTimerInterrupt+0x30>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005456:	4b0a      	ldr	r3, [pc, #40]	@ (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800545c:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <vPortSetupTimerInterrupt+0x38>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a09      	ldr	r2, [pc, #36]	@ (8005488 <vPortSetupTimerInterrupt+0x3c>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	4a08      	ldr	r2, [pc, #32]	@ (800548c <vPortSetupTimerInterrupt+0x40>)
 800546a:	3b01      	subs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546e:	4b03      	ldr	r3, [pc, #12]	@ (800547c <vPortSetupTimerInterrupt+0x30>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	e000e010 	.word	0xe000e010
 8005480:	e000e018 	.word	0xe000e018
 8005484:	20000000 	.word	0x20000000
 8005488:	10624dd3 	.word	0x10624dd3
 800548c:	e000e014 	.word	0xe000e014

08005490 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005496:	f3ef 8305 	mrs	r3, IPSR
 800549a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b0f      	cmp	r3, #15
 80054a0:	d915      	bls.n	80054ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054a2:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <vPortValidateInterruptPriority+0x70>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054ac:	4b15      	ldr	r3, [pc, #84]	@ (8005504 <vPortValidateInterruptPriority+0x74>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	7afa      	ldrb	r2, [r7, #11]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20b      	bcs.n	80054ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	607b      	str	r3, [r7, #4]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <vPortValidateInterruptPriority+0x78>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054d6:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <vPortValidateInterruptPriority+0x7c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d90b      	bls.n	80054f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	603b      	str	r3, [r7, #0]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <vPortValidateInterruptPriority+0x62>
	}
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr
 8005500:	e000e3f0 	.word	0xe000e3f0
 8005504:	20001010 	.word	0x20001010
 8005508:	e000ed0c 	.word	0xe000ed0c
 800550c:	20001014 	.word	0x20001014

08005510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005518:	2300      	movs	r3, #0
 800551a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800551c:	f7fe fe0c 	bl	8004138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005520:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <pvPortMalloc+0x17c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005528:	f000 f916 	bl	8005758 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800552c:	4b58      	ldr	r3, [pc, #352]	@ (8005690 <pvPortMalloc+0x180>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 8090 	bne.w	800565a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01e      	beq.n	800557e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005540:	2208      	movs	r2, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d015      	beq.n	800557e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	3308      	adds	r3, #8
 800555a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00b      	beq.n	800557e <pvPortMalloc+0x6e>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	617b      	str	r3, [r7, #20]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d06a      	beq.n	800565a <pvPortMalloc+0x14a>
 8005584:	4b43      	ldr	r3, [pc, #268]	@ (8005694 <pvPortMalloc+0x184>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	429a      	cmp	r2, r3
 800558c:	d865      	bhi.n	800565a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800558e:	4b42      	ldr	r3, [pc, #264]	@ (8005698 <pvPortMalloc+0x188>)
 8005590:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005592:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <pvPortMalloc+0x188>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005598:	e004      	b.n	80055a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <pvPortMalloc+0xa6>
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f1      	bne.n	800559a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055b6:	4b35      	ldr	r3, [pc, #212]	@ (800568c <pvPortMalloc+0x17c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055bc:	429a      	cmp	r2, r3
 80055be:	d04c      	beq.n	800565a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2208      	movs	r2, #8
 80055c6:	4413      	add	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	1ad2      	subs	r2, r2, r3
 80055da:	2308      	movs	r3, #8
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	429a      	cmp	r2, r3
 80055e0:	d920      	bls.n	8005624 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f003 0307 	and.w	r3, r3, #7
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00b      	beq.n	800560c <pvPortMalloc+0xfc>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	613b      	str	r3, [r7, #16]
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad2      	subs	r2, r2, r3
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800561e:	69b8      	ldr	r0, [r7, #24]
 8005620:	f000 f8fc 	bl	800581c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005624:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <pvPortMalloc+0x184>)
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <pvPortMalloc+0x184>)
 8005630:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005632:	4b18      	ldr	r3, [pc, #96]	@ (8005694 <pvPortMalloc+0x184>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4b19      	ldr	r3, [pc, #100]	@ (800569c <pvPortMalloc+0x18c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d203      	bcs.n	8005646 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <pvPortMalloc+0x184>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a16      	ldr	r2, [pc, #88]	@ (800569c <pvPortMalloc+0x18c>)
 8005644:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4b11      	ldr	r3, [pc, #68]	@ (8005690 <pvPortMalloc+0x180>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	431a      	orrs	r2, r3
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800565a:	f7fe fd7b 	bl	8004154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00b      	beq.n	8005680 <pvPortMalloc+0x170>
	__asm volatile
 8005668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566c:	f383 8811 	msr	BASEPRI, r3
 8005670:	f3bf 8f6f 	isb	sy
 8005674:	f3bf 8f4f 	dsb	sy
 8005678:	60fb      	str	r3, [r7, #12]
}
 800567a:	bf00      	nop
 800567c:	bf00      	nop
 800567e:	e7fd      	b.n	800567c <pvPortMalloc+0x16c>
	return pvReturn;
 8005680:	69fb      	ldr	r3, [r7, #28]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3728      	adds	r7, #40	@ 0x28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20001c20 	.word	0x20001c20
 8005690:	20001c2c 	.word	0x20001c2c
 8005694:	20001c24 	.word	0x20001c24
 8005698:	20001c18 	.word	0x20001c18
 800569c:	20001c28 	.word	0x20001c28

080056a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04a      	beq.n	8005748 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056b2:	2308      	movs	r3, #8
 80056b4:	425b      	negs	r3, r3
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	4b22      	ldr	r3, [pc, #136]	@ (8005750 <vPortFree+0xb0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10b      	bne.n	80056e6 <vPortFree+0x46>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	60fb      	str	r3, [r7, #12]
}
 80056e0:	bf00      	nop
 80056e2:	bf00      	nop
 80056e4:	e7fd      	b.n	80056e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <vPortFree+0x66>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60bb      	str	r3, [r7, #8]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4b11      	ldr	r3, [pc, #68]	@ (8005750 <vPortFree+0xb0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d019      	beq.n	8005748 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d115      	bne.n	8005748 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	4b0b      	ldr	r3, [pc, #44]	@ (8005750 <vPortFree+0xb0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800572c:	f7fe fd04 	bl	8004138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <vPortFree+0xb4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	4a06      	ldr	r2, [pc, #24]	@ (8005754 <vPortFree+0xb4>)
 800573c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f000 f86c 	bl	800581c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005744:	f7fe fd06 	bl	8004154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005748:	bf00      	nop
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	20001c2c 	.word	0x20001c2c
 8005754:	20001c24 	.word	0x20001c24

08005758 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005762:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005764:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <prvHeapInit+0xac>)
 8005766:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00c      	beq.n	800578c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3307      	adds	r3, #7
 8005776:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	4a1f      	ldr	r2, [pc, #124]	@ (8005804 <prvHeapInit+0xac>)
 8005788:	4413      	add	r3, r2
 800578a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <prvHeapInit+0xb0>)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005796:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <prvHeapInit+0xb0>)
 8005798:	2200      	movs	r2, #0
 800579a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a4:	2208      	movs	r2, #8
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1a9b      	subs	r3, r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0307 	bic.w	r3, r3, #7
 80057b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <prvHeapInit+0xb4>)
 80057b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057ba:	4b14      	ldr	r3, [pc, #80]	@ (800580c <prvHeapInit+0xb4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057c2:	4b12      	ldr	r3, [pc, #72]	@ (800580c <prvHeapInit+0xb4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	1ad2      	subs	r2, r2, r3
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	@ (800580c <prvHeapInit+0xb4>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <prvHeapInit+0xb8>)
 80057e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	4a09      	ldr	r2, [pc, #36]	@ (8005814 <prvHeapInit+0xbc>)
 80057ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057f0:	4b09      	ldr	r3, [pc, #36]	@ (8005818 <prvHeapInit+0xc0>)
 80057f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80057f6:	601a      	str	r2, [r3, #0]
}
 80057f8:	bf00      	nop
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bc80      	pop	{r7}
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	20001018 	.word	0x20001018
 8005808:	20001c18 	.word	0x20001c18
 800580c:	20001c20 	.word	0x20001c20
 8005810:	20001c28 	.word	0x20001c28
 8005814:	20001c24 	.word	0x20001c24
 8005818:	20001c2c 	.word	0x20001c2c

0800581c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005824:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <prvInsertBlockIntoFreeList+0xa8>)
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e002      	b.n	8005830 <prvInsertBlockIntoFreeList+0x14>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	429a      	cmp	r2, r3
 8005838:	d8f7      	bhi.n	800582a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d108      	bne.n	800585e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d118      	bne.n	80058a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d00d      	beq.n	800589a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	441a      	add	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e008      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <prvInsertBlockIntoFreeList+0xac>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e003      	b.n	80058ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d002      	beq.n	80058ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058ba:	bf00      	nop
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr
 80058c4:	20001c18 	.word	0x20001c18
 80058c8:	20001c20 	.word	0x20001c20

080058cc <memset>:
 80058cc:	4603      	mov	r3, r0
 80058ce:	4402      	add	r2, r0
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d100      	bne.n	80058d6 <memset+0xa>
 80058d4:	4770      	bx	lr
 80058d6:	f803 1b01 	strb.w	r1, [r3], #1
 80058da:	e7f9      	b.n	80058d0 <memset+0x4>

080058dc <_reclaim_reent>:
 80058dc:	4b29      	ldr	r3, [pc, #164]	@ (8005984 <_reclaim_reent+0xa8>)
 80058de:	b570      	push	{r4, r5, r6, lr}
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4604      	mov	r4, r0
 80058e4:	4283      	cmp	r3, r0
 80058e6:	d04b      	beq.n	8005980 <_reclaim_reent+0xa4>
 80058e8:	69c3      	ldr	r3, [r0, #28]
 80058ea:	b1ab      	cbz	r3, 8005918 <_reclaim_reent+0x3c>
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	b16b      	cbz	r3, 800590c <_reclaim_reent+0x30>
 80058f0:	2500      	movs	r5, #0
 80058f2:	69e3      	ldr	r3, [r4, #28]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	5959      	ldr	r1, [r3, r5]
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d13b      	bne.n	8005974 <_reclaim_reent+0x98>
 80058fc:	3504      	adds	r5, #4
 80058fe:	2d80      	cmp	r5, #128	@ 0x80
 8005900:	d1f7      	bne.n	80058f2 <_reclaim_reent+0x16>
 8005902:	69e3      	ldr	r3, [r4, #28]
 8005904:	4620      	mov	r0, r4
 8005906:	68d9      	ldr	r1, [r3, #12]
 8005908:	f000 f87a 	bl	8005a00 <_free_r>
 800590c:	69e3      	ldr	r3, [r4, #28]
 800590e:	6819      	ldr	r1, [r3, #0]
 8005910:	b111      	cbz	r1, 8005918 <_reclaim_reent+0x3c>
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f874 	bl	8005a00 <_free_r>
 8005918:	6961      	ldr	r1, [r4, #20]
 800591a:	b111      	cbz	r1, 8005922 <_reclaim_reent+0x46>
 800591c:	4620      	mov	r0, r4
 800591e:	f000 f86f 	bl	8005a00 <_free_r>
 8005922:	69e1      	ldr	r1, [r4, #28]
 8005924:	b111      	cbz	r1, 800592c <_reclaim_reent+0x50>
 8005926:	4620      	mov	r0, r4
 8005928:	f000 f86a 	bl	8005a00 <_free_r>
 800592c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800592e:	b111      	cbz	r1, 8005936 <_reclaim_reent+0x5a>
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f865 	bl	8005a00 <_free_r>
 8005936:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005938:	b111      	cbz	r1, 8005940 <_reclaim_reent+0x64>
 800593a:	4620      	mov	r0, r4
 800593c:	f000 f860 	bl	8005a00 <_free_r>
 8005940:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005942:	b111      	cbz	r1, 800594a <_reclaim_reent+0x6e>
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f85b 	bl	8005a00 <_free_r>
 800594a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800594c:	b111      	cbz	r1, 8005954 <_reclaim_reent+0x78>
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f856 	bl	8005a00 <_free_r>
 8005954:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005956:	b111      	cbz	r1, 800595e <_reclaim_reent+0x82>
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f851 	bl	8005a00 <_free_r>
 800595e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005960:	b111      	cbz	r1, 8005968 <_reclaim_reent+0x8c>
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f84c 	bl	8005a00 <_free_r>
 8005968:	6a23      	ldr	r3, [r4, #32]
 800596a:	b14b      	cbz	r3, 8005980 <_reclaim_reent+0xa4>
 800596c:	4620      	mov	r0, r4
 800596e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005972:	4718      	bx	r3
 8005974:	680e      	ldr	r6, [r1, #0]
 8005976:	4620      	mov	r0, r4
 8005978:	f000 f842 	bl	8005a00 <_free_r>
 800597c:	4631      	mov	r1, r6
 800597e:	e7bb      	b.n	80058f8 <_reclaim_reent+0x1c>
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	bf00      	nop
 8005984:	20000010 	.word	0x20000010

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	2600      	movs	r6, #0
 800598c:	4d0c      	ldr	r5, [pc, #48]	@ (80059c0 <__libc_init_array+0x38>)
 800598e:	4c0d      	ldr	r4, [pc, #52]	@ (80059c4 <__libc_init_array+0x3c>)
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	f000 f886 	bl	8005aa8 <_init>
 800599c:	2600      	movs	r6, #0
 800599e:	4d0a      	ldr	r5, [pc, #40]	@ (80059c8 <__libc_init_array+0x40>)
 80059a0:	4c0a      	ldr	r4, [pc, #40]	@ (80059cc <__libc_init_array+0x44>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08005da8 	.word	0x08005da8
 80059c4:	08005da8 	.word	0x08005da8
 80059c8:	08005da8 	.word	0x08005da8
 80059cc:	08005dac 	.word	0x08005dac

080059d0 <__retarget_lock_acquire_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <__retarget_lock_release_recursive>:
 80059d2:	4770      	bx	lr

080059d4 <strcpy>:
 80059d4:	4603      	mov	r3, r0
 80059d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059da:	f803 2b01 	strb.w	r2, [r3], #1
 80059de:	2a00      	cmp	r2, #0
 80059e0:	d1f9      	bne.n	80059d6 <strcpy+0x2>
 80059e2:	4770      	bx	lr

080059e4 <memcpy>:
 80059e4:	440a      	add	r2, r1
 80059e6:	4291      	cmp	r1, r2
 80059e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80059ec:	d100      	bne.n	80059f0 <memcpy+0xc>
 80059ee:	4770      	bx	lr
 80059f0:	b510      	push	{r4, lr}
 80059f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059f6:	4291      	cmp	r1, r2
 80059f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059fc:	d1f9      	bne.n	80059f2 <memcpy+0xe>
 80059fe:	bd10      	pop	{r4, pc}

08005a00 <_free_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4605      	mov	r5, r0
 8005a04:	2900      	cmp	r1, #0
 8005a06:	d040      	beq.n	8005a8a <_free_r+0x8a>
 8005a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a0c:	1f0c      	subs	r4, r1, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfb8      	it	lt
 8005a12:	18e4      	addlt	r4, r4, r3
 8005a14:	f000 f83c 	bl	8005a90 <__malloc_lock>
 8005a18:	4a1c      	ldr	r2, [pc, #112]	@ (8005a8c <_free_r+0x8c>)
 8005a1a:	6813      	ldr	r3, [r2, #0]
 8005a1c:	b933      	cbnz	r3, 8005a2c <_free_r+0x2c>
 8005a1e:	6063      	str	r3, [r4, #4]
 8005a20:	6014      	str	r4, [r2, #0]
 8005a22:	4628      	mov	r0, r5
 8005a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a28:	f000 b838 	b.w	8005a9c <__malloc_unlock>
 8005a2c:	42a3      	cmp	r3, r4
 8005a2e:	d908      	bls.n	8005a42 <_free_r+0x42>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	1821      	adds	r1, r4, r0
 8005a34:	428b      	cmp	r3, r1
 8005a36:	bf01      	itttt	eq
 8005a38:	6819      	ldreq	r1, [r3, #0]
 8005a3a:	685b      	ldreq	r3, [r3, #4]
 8005a3c:	1809      	addeq	r1, r1, r0
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	e7ed      	b.n	8005a1e <_free_r+0x1e>
 8005a42:	461a      	mov	r2, r3
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	b10b      	cbz	r3, 8005a4c <_free_r+0x4c>
 8005a48:	42a3      	cmp	r3, r4
 8005a4a:	d9fa      	bls.n	8005a42 <_free_r+0x42>
 8005a4c:	6811      	ldr	r1, [r2, #0]
 8005a4e:	1850      	adds	r0, r2, r1
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d10b      	bne.n	8005a6c <_free_r+0x6c>
 8005a54:	6820      	ldr	r0, [r4, #0]
 8005a56:	4401      	add	r1, r0
 8005a58:	1850      	adds	r0, r2, r1
 8005a5a:	4283      	cmp	r3, r0
 8005a5c:	6011      	str	r1, [r2, #0]
 8005a5e:	d1e0      	bne.n	8005a22 <_free_r+0x22>
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4408      	add	r0, r1
 8005a66:	6010      	str	r0, [r2, #0]
 8005a68:	6053      	str	r3, [r2, #4]
 8005a6a:	e7da      	b.n	8005a22 <_free_r+0x22>
 8005a6c:	d902      	bls.n	8005a74 <_free_r+0x74>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	602b      	str	r3, [r5, #0]
 8005a72:	e7d6      	b.n	8005a22 <_free_r+0x22>
 8005a74:	6820      	ldr	r0, [r4, #0]
 8005a76:	1821      	adds	r1, r4, r0
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	bf01      	itttt	eq
 8005a7c:	6819      	ldreq	r1, [r3, #0]
 8005a7e:	685b      	ldreq	r3, [r3, #4]
 8005a80:	1809      	addeq	r1, r1, r0
 8005a82:	6021      	streq	r1, [r4, #0]
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6054      	str	r4, [r2, #4]
 8005a88:	e7cb      	b.n	8005a22 <_free_r+0x22>
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20001d6c 	.word	0x20001d6c

08005a90 <__malloc_lock>:
 8005a90:	4801      	ldr	r0, [pc, #4]	@ (8005a98 <__malloc_lock+0x8>)
 8005a92:	f7ff bf9d 	b.w	80059d0 <__retarget_lock_acquire_recursive>
 8005a96:	bf00      	nop
 8005a98:	20001d68 	.word	0x20001d68

08005a9c <__malloc_unlock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__malloc_unlock+0x8>)
 8005a9e:	f7ff bf98 	b.w	80059d2 <__retarget_lock_release_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20001d68 	.word	0x20001d68

08005aa8 <_init>:
 8005aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aaa:	bf00      	nop
 8005aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aae:	bc08      	pop	{r3}
 8005ab0:	469e      	mov	lr, r3
 8005ab2:	4770      	bx	lr

08005ab4 <_fini>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr
